#This workflow can only run on master! See the limitation mentioned in "Note:" here: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run
name: Deploy Export Template
on:
  workflow_run:
    workflows: [ "Create Draft Release" ]
    types:
      - completed

env:
  SCONS_CACHE_MSVC_CONFIG: true

jobs:
  deploy-export-template:
    strategy:
      matrix:
        name: [ Linux-release, MacOs-x64-release, MacOs-arm64-release, Windows-release, Android-armv7-release, Android-armv8-release, Linux-debug, MacOs-x64-debug, MacOs-arm64-debug, Windows-debug, Android-armv7-debug, Android-armv8-debug ]
        include:
          - name: Linux-release
            # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
            os: ubuntu-20.04
            platform: x11
            binary: godot.x11.opt.64
            cat_command: cat
            arch: x86_64
            target: template_release
          - name: MacOs-x64-release
            os: macos-latest
            platform: macos
            binary: godot.macos.opt.64
            cat_command: cat
            arch: x86_64
            target: template_release
          - name: MacOs-arm64-release
            os: macos-latest
            platform: macos
            binary: godot.macos.opt.arm64
            cat_command: cat
            arch: arm64
            target: template_release
          - name: Windows-release
            os: windows-2019
            platform: windows
            binary: godot.windows.opt.64.exe
            cat_command: type
            arch: x86_64
            target: template_release
          - name: Android-armv7-release
            os: ubuntu-latest
            platform: android
            binary: android_release.apk
            cat_command: cat
            arch: armv7
            output_folder: platform/android/java/lib/libs/release/armeabi-v7a/
            target: template_release
          - name: Android-armv8-release
            os: ubuntu-latest
            platform: android
            binary: android_release.apk
            cat_command: cat
            arch: arm64v8
            output_folder: platform/android/java/lib/libs/release/arm64-v8a/
            target: template_release
          - name: Linux-debug
            # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
            os: ubuntu-20.04
            platform: x11
            binary: godot.x11.opt.debug.64
            cat_command: cat
            arch: x86_64
            target: template_debug
          - name: MacOs-x64-debug
            os: macos-latest
            platform: macos
            binary: godot.macos.opt.debug.64
            cat_command: cat
            arch: x86_64
            target: template_debug
          - name: MacOs-arm64-debug
            os: macos-latest
            platform: macos
            binary: godot.macos.opt.debug.arm64
            cat_command: cat
            arch: arm64
            target: template_debug
          - name: Windows-debug
            os: windows-2019
            platform: windows
            binary: godot.windows.opt.debug.64.exe
            cat_command: type
            arch: x86_64
            target: template_debug
          - name: Android-armv7-debug
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
            arch: armv7
            output_folder: platform/android/java/lib/libs/debug/armeabi-v7a/
            target: template_debug
          - name: Android-armv8-debug
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
            arch: arm64v8
            output_folder: platform/android/java/lib/libs/debug/arm64-v8a/
            target: template_debug
    runs-on: ${{ matrix.os }}
    steps:
      # has to be the first step as the download url is only valid for 1 minute! See: https://stackoverflow.com/a/65049722
      - name: Get release infos from draft release
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: create-draft-release.yaml
          workflow_conclusion: success

      - name: Create release information artifact
        if: matrix.platform == 'x11'
        uses: actions/upload-artifact@v3
        with:
          name: release-informations
          path: |
            release_url/release_url.txt
            godot_version/godot_version.txt
            godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(${{ matrix.cat_command }} release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(${{ matrix.cat_command }} godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(${{ matrix.cat_command }} godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: caacade569eb7a541aaa7a8cdc3eedffca1422d9

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Linux dependencies
        if: matrix.platform == 'x11'
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb wget unzip

      - name: Setup Godot dependencies
        uses: ./.github/actions/godot-deps

      - name: Setup Vulkan SDK
        if: matrix.platform == 'macos'
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      # Upload cache on completion and check it out now
      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ github.job }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}

      - name: Set up JDK 11
        if: matrix.platform == 'android'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: Build ${{ matrix.target }} export template
        if: matrix.platform != 'android'
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=${{ matrix.arch }} -j${{ steps.cpu-cores.outputs.count }}
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          

      - name: Build android ${{ matrix.target }} export template binary
        if: matrix.platform == 'android'
        uses: ./.github/actions/godot-build
        with:
          sconsflags: android_arch=${{ matrix.arch }} -j${{ steps.cpu-cores.outputs.count }}
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          

      - name: Upload android binary
        if: matrix.platform == 'android'
        uses: actions/upload-artifact@v3
        with:
          name: android-export-${{ matrix.target }}-binary-${{ matrix.arch }}
          path: |
            **/${{ matrix.output_folder }}

      - name: Upload export template ${{ matrix.target }}
        if: matrix.platform != 'android' && matrix.platform != 'macos'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.save_release_info.outputs.upload_url }}
          asset_path: bin/${{ matrix.binary }}
          asset_name: ${{ matrix.binary }}
          asset_content_type: application/octet-stream

      - name: Upload MacOs binary
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v3
        with:
          name: macos-template-${{ matrix.target }}-binary-${{ matrix.arch }}
          path: bin/${{ matrix.binary }}

  build-android-export-template:
    needs: [deploy-export-template]
    strategy:
      matrix:
        name: [ Android-debug, Android-release ]
        include:
          - name: Android-debug
            os: ubuntu-20.04
            java-version: 11
            target: template_debug
            apk-name: android_debug.apk
          - name: Android-release
            os: ubuntu-20.04
            java-version: 11
            target: template_release
            apk-name: android_release.apk
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: caacade569eb7a541aaa7a8cdc3eedffca1422d9

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Build android export template
        uses: ./modules/kotlin_jvm/.github/actions/create-android-export-template
        with:
          target: ${{ matrix.target }}

      - name: Upload android export template ${{ matrix.target }}
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.save_release_info.outputs.upload_url }}
          asset_path: bin/${{ matrix.apk-name }}
          asset_name: ${{ matrix.apk-name }}
          asset_content_type: application/octet-stream

  create-macos-universal:
    needs: [deploy-export-template]
    strategy:
      matrix:
        name: [ MacOs-release, MacOs-debug ]
        include:
          - name: MacOs-release
            os: macos-latest
            java-version: 11
            target: template_release
            binary-suffix: opt
          - name: MacOs-debug
            os: macos-latest
            java-version: 11
            target: template_debug
            binary-suffix: opt.debug
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create MacOs universal binary
        uses: ./.github/actions/create-macos-universal-binary
        with:
          amd-64-binary-artifact: macos-template-${{ matrix.target }}-binary-64
          amd-64-binary-name: godot.macos.${{ matrix.binary-suffix }}.64
          arm-64-binary-artifact: macos-template-${{ matrix.target }}-binary-arm64
          arm-64-binary-name: godot.macos.${{ matrix.binary-suffix }}.arm64
          universal-output-binary-name: godot.macos.${{ matrix.binary-suffix }}.universal

      - name: Upload ${{ matrix.target }} MacOs universal artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-template-${{ matrix.target }}-binary-universal
          path: godot.macos.${{ matrix.binary-suffix }}.universal

  create-macos-export-template-app:
    needs: [create-macos-universal]
    strategy:
      matrix:
        os: [ macos-latest ]
        include:
          - os: macos-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: caacade569eb7a541aaa7a8cdc3eedffca1422d9

      - name: Get release export template binary
        uses: actions/download-artifact@v3
        with:
          name: macos-template-release-binary-universal

      - name: Get debug export template binary
        uses: actions/download-artifact@v3
        with:
          name: macos-template-template_debug-binary-universal

      - name: Create MacOs template app
        run: |
          cp -r misc/dist/macos_template.app .
          mkdir -p macos_template.app/Contents/MacOS
          cp godot.macos.opt.universal macos_template.app/Contents/MacOS/godot_macos_release.64
          cp godot.macos.opt.debug.universal macos_template.app/Contents/MacOS/godot_macos_debug.64
          chmod +x macos_template.app/Contents/MacOS/godot_macos*
          zip -q -9 -r macos.zip macos_template.app

      - name: Upload MacOs template app
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.save_release_info.outputs.upload_url }}
          asset_path: macos.zip
          asset_name: macos.zip
          asset_content_type: application/octet-stream