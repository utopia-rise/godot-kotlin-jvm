#This workflow can only run on master! See the limitation mentioned in "Note:" here: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run
name: Deploy Export Template
on:
  workflow_run:
    workflows: [ "Create Draft Release" ]
    types:
      - completed

env:
  SCONS_CACHE_MSVC_CONFIG: true

jobs:
  deploy-export-template:
    strategy:
      matrix:
        name: [ Linux-release, MacOs-x64-release, MacOs-arm64-release, Windows-release, Android-armv7-release, Android-armv8-release, Android-x86_64-release, iOS-arm64-release, Linux-debug, MacOs-x64-debug, MacOs-arm64-debug, Windows-debug, Android-armv7-debug, Android-armv8-debug, Android-x86_64-debug, iOS-arm64-debug ]
        include:
          - name: Linux-release
            # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
            os: ubuntu-20.04
            platform: x11
            binary: godot.linuxbsd.template_release.x86_64
            cat_command: cat
            arch: x86_64
            target: template_release
          - name: MacOs-x64-release
            os: macos-latest
            platform: macos
            binary: godot.macos.template_release.x86_64
            cat_command: cat
            arch: x86_64
            target: template_release
          - name: MacOs-arm64-release
            os: macos-latest
            platform: macos
            binary: godot.macos.template_release.arm64
            cat_command: cat
            arch: arm64
            target: template_release
          - name: Windows-release
            os: windows-2019
            platform: windows
            binary: godot.windows.template_release.x86_64.exe
            cat_command: type
            arch: x86_64
            target: template_release
          - name: Android-armv7-release
            os: ubuntu-latest
            platform: android
            binary: android_release.apk
            cat_command: cat
            arch: armv7
            output_folder: platform/android/java/lib/libs/release/armeabi-v7a/
            target: template_release
          - name: Android-armv8-release
            os: ubuntu-latest
            platform: android
            binary: android_release.apk
            cat_command: cat
            arch: arm64v8
            output_folder: platform/android/java/lib/libs/release/arm64-v8a/
            target: template_release
          - name: Android-x86_64-release
            os: ubuntu-latest
            platform: android
            binary: android_release.apk
            cat_command: cat
            arch: x86_64
            output_folder: platform/android/java/lib/libs/release/x86_64/
            target: template_release
          - name: iOS-arm64-release
            os: macos-latest
            platform: ios
            binary: libgodot.ios.template_release.arm64.a
            cat_command: cat
            arch: arm64
            target: template_release
          - name: Linux-debug
            # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
            os: ubuntu-20.04
            platform: x11
            binary: godot.linuxbsd.template_debug.x86_64
            cat_command: cat
            arch: x86_64
            target: template_debug
          - name: MacOs-x64-debug
            os: macos-latest
            platform: macos
            binary: godot.macos.template_debug.x86_64
            cat_command: cat
            arch: x86_64
            target: template_debug
          - name: MacOs-arm64-debug
            os: macos-latest
            platform: macos
            binary: godot.macos.template_debug.arm64
            cat_command: cat
            arch: arm64
            target: template_debug
          - name: Windows-debug
            os: windows-2019
            platform: windows
            binary: godot.windows.template_debug.x86_64.exe
            cat_command: type
            arch: x86_64
            target: template_debug
          - name: Android-armv7-debug
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
            arch: armv7
            output_folder: platform/android/java/lib/libs/debug/armeabi-v7a/
            target: template_debug
          - name: Android-armv8-debug
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
            arch: arm64v8
            output_folder: platform/android/java/lib/libs/debug/arm64-v8a/
            target: template_debug
          - name: Android-x86_64-debug
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
            arch: x86_64
            output_folder: platform/android/java/lib/libs/debug/x86_64/
            target: template_debug
          - name: iOS-arm64-debug
            os: macos-latest
            platform: ios
            binary: libgodot.ios.template_debug.arm64.a
            cat_command: cat
            arch: arm64
            target: template_debug
    runs-on: ${{ matrix.os }}
    steps:
      # has to be the first step as the download url is only valid for 1 minute! See: https://stackoverflow.com/a/65049722
      - name: Get release infos from draft release
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: create-draft-release.yaml
          workflow_conclusion: success

      - name: Create release information artifact
        if: matrix.platform == 'x11'
        uses: actions/upload-artifact@v3
        with:
          name: release-informations
          path: |
            release_url/release_url.txt
            godot_version/godot_version.txt
            godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(${{ matrix.cat_command }} release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(${{ matrix.cat_command }} godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(${{ matrix.cat_command }} godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 4.1.2-stable

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Setup Godot dependencies
        uses: ./.github/actions/godot-deps
      - name: Fix scons version
        run: |
          python -m pip install scons==4.4.0

      - name: Setup Vulkan SDK
        if: matrix.platform == 'macos'
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      - name: Fix scons version
        run: |
          python -m pip install scons==4.4.0

      # Upload cache on completion and check it out now
      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ github.job }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.target }}

      - name: Set up JDK 11
        if: matrix.platform == 'android'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: Build ${{ matrix.target }} export template
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=${{ matrix.arch }} -j${{ steps.cpu-cores.outputs.count }}
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}


      - name: Upload android binary
        if: matrix.platform == 'android'
        uses: actions/upload-artifact@v3
        with:
          name: android-export-${{ matrix.target }}-binary-${{ matrix.arch }}
          path: ${{ matrix.output_folder }}

      - name: Upload export template ${{ matrix.target }}
        if: matrix.platform != 'android' && matrix.platform != 'macos'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}
          path: bin/${{ matrix.binary }}

      - name: Upload IOS/MacOs binary
        if: matrix.platform == 'macos' || matrix.platform == 'ios'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-template-${{ matrix.target }}-binary-${{ matrix.arch }}
          path: bin/${{ matrix.binary }}

  build-android-export-template:
    needs: [deploy-export-template]
    strategy:
      matrix:
        name: [ Android-debug, Android-release ]
        include:
          - name: Android-debug
            os: ubuntu-20.04
            java-version: 11
            target: template_debug
            base-path: platform/android/java/lib/libs/debug
            apk-name: android_debug.apk
          - name: Android-release
            os: ubuntu-20.04
            java-version: 11
            target: template_release
            base-path: platform/android/java/lib/libs/release
            apk-name: android_release.apk
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 4.1.2-stable

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Build android export template
        uses: ./modules/kotlin_jvm/.github/actions/create-android-export-template
        with:
          target: ${{ matrix.target }}
          base-path: ${{ matrix.base-path }}

      - name: Upload android export template ${{ matrix.target }}
        uses: actions/upload-artifact@v3
        with:
          path: bin/${{ matrix.apk-name }}
          name: ${{ matrix.apk-name }}

      - name: Upload android source
        if: matrix.target == 'template_release' #we only need to do this once doesn't matter for which target
        uses: actions/upload-artifact@v3
        with:
          path: bin/android_source.zip
          name: android_source.zip

  create-macos-universal:
    needs: [deploy-export-template]
    strategy:
      matrix:
        name: [ MacOs-release, MacOs-debug ]
        include:
          - name: MacOs-release
            os: macos-latest
            java-version: 11
            target: template_release
          - name: MacOs-debug
            os: macos-latest
            java-version: 11
            target: template_debug
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create MacOs universal binary
        uses: ./.github/actions/create-macos-universal-binary
        with:
          amd-64-binary-artifact: macos-template-${{ matrix.target }}-binary-x86_64
          amd-64-binary-name: godot.macos.${{ matrix.target }}.x86_64
          arm-64-binary-artifact: macos-template-${{ matrix.target }}-binary-arm64
          arm-64-binary-name: godot.macos.${{ matrix.target }}.arm64
          universal-output-binary-name: godot.macos.${{ matrix.target }}.universal

      - name: Upload ${{ matrix.target }} MacOs universal artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-template-${{ matrix.target }}-binary-universal
          path: godot.macos.${{ matrix.target }}.universal

  create-macos-export-template-app:
    needs: [create-macos-universal]
    strategy:
      matrix:
        os: [ macos-latest ]
        include:
          - os: macos-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 4.1.2-stable

      - name: Get release export template binary
        uses: actions/download-artifact@v3
        with:
          name: macos-template-template_release-binary-universal

      - name: Get debug export template binary
        uses: actions/download-artifact@v3
        with:
          name: macos-template-template_debug-binary-universal

      - name: Create MacOs template app
        run: |
          cp -r misc/dist/macos_template.app .
          mkdir -p macos_template.app/Contents/MacOS
          cp godot.macos.template_release.universal macos_template.app/Contents/MacOS/godot_macos_release.64
          cp godot.macos.template_debug.universal macos_template.app/Contents/MacOS/godot_macos_debug.64
          chmod +x macos_template.app/Contents/MacOS/godot_macos*
          zip -q -9 -r macos.zip macos_template.app
        shell: bash

      - name: Upload MacOs template app
        uses: actions/upload-artifact@v3
        with:
          path: macos.zip
          name: macos.zip

  create-ios-export-template-app:
    needs: [ deploy-export-template ]
    strategy:
      matrix:
        os: [ macos-latest ]
        include:
          - os: macos-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 4.1.2-stable

      - name: Get release export template binary
        uses: actions/download-artifact@v3
        with:
          name: ios-template-template_release-binary-arm64

      - name: Get debug export template binary
        uses: actions/download-artifact@v3
        with:
          name: ios-template-template_debug-binary-arm64

      - name: Clone MoltenVK
        uses: actions/checkout@v2
        with:
          repository: KhronosGroup/MoltenVK
          path: MoltenVk
          ref: v1.2.4

      - name: Build MoltenVK
        run: |
          cd MoltenVK && ./fetchDependencies --ios && make ios

      - name: Create iOS template app
        run: |
          cp -r misc/dist/ios_xcode .
          cp -r MoltenVK/Package/Release/MoltenVK/MoltenVK.xcframework ios_xcode/
          mkdir -p macos_template.app/Contents/MacOS
          cp libgodot.ios.template_release.arm64.a ios_xcode/libgodot.ios.release.xcframework/ios-arm64/libgodot.a
          cp libgodot.ios.template_debug.arm64.a ios_xcode/libgodot.ios.debug.xcframework/ios-arm64/libgodot.a
          zip -q -9 -r ios.zip ios_xcode

      - name: Upload iOS template app
        uses: actions/upload-artifact@v3
        with:
          path: ios.zip
          name: ios.zip

  create_export_template_tpz:
    needs: [ create-macos-export-template-app, build-android-export-template, create-ios-export-template-app ]
    runs-on: ubuntu-latest
    steps:
      - name: Download release informations
        uses: actions/download-artifact@v3
        with:
          name: release-informations

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(cat godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Create templates folder
        run: mkdir templates
        shell: bash

      - name: Download linux debug export templates
        uses: actions/download-artifact@v3
        with:
          name: godot.linuxbsd.template_debug.x86_64

      - name: Copy linux debug export templates
        run: cp godot.linuxbsd.template_debug.x86_64 templates/linux_debug.x86_64
        shell: bash

      - name: Download linux release export templates
        uses: actions/download-artifact@v3
        with:
          name: godot.linuxbsd.template_release.x86_64

      - name: Copy linux release export templates
        run: cp godot.linuxbsd.template_release.x86_64 templates/linux_release.x86_64
        shell: bash

      - name: Download windows debug export templates
        uses: actions/download-artifact@v3
        with:
          name: godot.windows.template_debug.x86_64.exe

      - name: Copy windows debug export templates
        run: cp godot.windows.template_debug.x86_64.exe templates/windows_debug_x86_64.exe
        shell: bash

      - name: Download windows release export templates
        uses: actions/download-artifact@v3
        with:
          name: godot.windows.template_release.x86_64.exe

      - name: Copy windows release export templates
        run: cp godot.windows.template_release.x86_64.exe templates/windows_release_x86_64.exe
        shell: bash

      - name: Download android source zip
        uses: actions/download-artifact@v3
        with:
          name: android_source.zip

      - name: Copy android source zip
        run: cp android_source.zip templates/android_source.zip
        shell: bash

      - name: Download android debug export templates
        uses: actions/download-artifact@v3
        with:
          name: android_debug.apk

      - name: Copy android debug export templates
        run: cp android_debug.apk templates/android_debug.apk
        shell: bash

      - name: Download android release export templates
        uses: actions/download-artifact@v3
        with:
          name: android_release.apk

      - name: Copy android release export templates
        run: cp android_release.apk templates/android_release.apk
        shell: bash

      - name: Download macos export templates
        uses: actions/download-artifact@v3
        with:
          name: macos.zip

      - name: Copy macos export templates
        run: cp macos.zip templates/macos.zip
        shell: bash

      - name: Download ios export templates
        uses: actions/download-artifact@v3
        with:
          name: ios.zip

      - name: Copy ios export templates
        run: cp ios.zip templates/ios.zip
        shell: bash

      - name: Create version.txt
        run: |
          refVersion=4.1.2-stable #for easier search and replace with other `ref` occurrences
          templatesVersion=${refVersion//-/.} #replace `-` with `.` in templates version
          echo "$templatesVersion" > templates/version.txt
        shell: bash

      - name: Compress templates folder to tpz
        run: zip -r godot-kotlin-jvm_export_templates_${{ steps.save_release_info.outputs.godot_kotlin_jvm_version }}.tpz templates
        shell: bash

      - name: Upload export templates tpz
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.save_release_info.outputs.upload_url }}
          asset_path: godot-kotlin-jvm_export_templates_${{ steps.save_release_info.outputs.godot_kotlin_jvm_version }}.tpz
          asset_name: godot-kotlin-jvm_export_templates_${{ steps.save_release_info.outputs.godot_kotlin_jvm_version }}.tpz
          asset_content_type: application/octet-stream
