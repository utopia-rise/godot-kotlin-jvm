name: PR Checks
on: [ pull_request ]

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-trigger_on_pull_request
  cancel-in-progress: true

jobs:
  setup-build-variables:
    # Fake job to define outputs which can be used in the other jobs
    name: üõ†Ô∏è Setup build variables
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Setup done"
    outputs: # defined here explicitly, so it only needs to be defined here. All other workflows can just reference it
      godot-kotlin-jvm-version: "0.13.1-4.4.1"
      godot-version: "4.4.1-stable"
      build-version: "0.13.1"
      jvm-version: "17"

  build-jvm:
    name: ‚òï Build Jvm
    uses: ./.github/workflows/build_jvm.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}

  build-android:
    name: ü§ñ Build Android
    uses: ./.github/workflows/build_android.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  build-ios:
    name: üçè Build iOS
    uses: ./.github/workflows/build_ios.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}

  build-linux:
    name: üêß Build Linux
    uses: ./.github/workflows/build_linux.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}

  build-macos:
    name: üçé Build macOS
    uses: ./.github/workflows/build_macos.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}

  build-windows:
    name: ü™ü Build Windows
    uses: ./.github/workflows/build_windows.yml
    needs:
      - setup-build-variables
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}

  assemble-android:
    name: ü§ñ Assemble android
    uses: ./.github/workflows/assemble_android.yml
    needs:
      - setup-build-variables
      - build-android
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}

  assemble-macos:
    name: üçé Assemble macos
    uses: ./.github/workflows/assemble_macos.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-macos
    with:
      godot-kotlin-jvm-version: ${{ needs.setup-build-variables.outputs['godot-kotlin-jvm-version'] }}
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  assemble-ios:
    name: üçè Assemble ios
    uses: ./.github/workflows/assemble_ios.yml
    needs:
      - setup-build-variables
      - build-ios
    with:
      godot-kotlin-jvm-version: ${{ needs.setup-build-variables.outputs['godot-kotlin-jvm-version'] }}
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  assemble-linux:
    name: üêß Assemble linux
    uses: ./.github/workflows/assemble_linux.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-linux
    with:
      godot-kotlin-jvm-version: ${{ needs.setup-build-variables.outputs['godot-kotlin-jvm-version'] }}
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  assemble-windows:
    name: ü™ü Assemble windows
    uses: ./.github/workflows/assemble_windows.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-windows
    with:
      godot-kotlin-jvm-version: ${{ needs.setup-build-variables.outputs['godot-kotlin-jvm-version'] }}
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  assemble-export-templates:
    name: ü§ñ+üçè+üêß+üçé+ü™ü Assemble export templates
    uses: ./.github/workflows/assemble_export_templates.yml
    needs:
      - setup-build-variables
      - assemble-android
      - assemble-ios # export templates need to be packed into xcode project
      - build-linux # uploads finished export template directly
      - assemble-macos # export templates need to be packed into app
      - build-windows # uploads finished export template directly
    with:
      godot-kotlin-jvm-version: ${{ needs.setup-build-variables.outputs['godot-kotlin-jvm-version'] }}
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-linux:
    name: üêß Test Linux
    uses: ./.github/workflows/test_linux.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-linux
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-macos:
    name: üçé Test Macos
    uses: ./.github/workflows/test_macos.yml
    needs:
      - setup-build-variables
      - build-jvm
      - assemble-macos # we need the universal binary
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-windows:
    name: ü™ü Test Windows
    uses: ./.github/workflows/test_windows.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-windows
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-linux-exports:
    name: üêß Test Linux Exports
    uses: ./.github/workflows/test_linux_exports.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-linux
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-macos-exports:
    name: üçé Test Macos Exports
    uses: ./.github/workflows/test_macos_exports.yml
    needs:
      - setup-build-variables
      - build-jvm
      - assemble-macos # we need the universal binary
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

  test-windows-exports:
    name: ü™ü Test Windows Exports
    uses: ./.github/workflows/test_windows_exports.yml
    needs:
      - setup-build-variables
      - build-jvm
      - build-windows
    with:
      godot-version: ${{ needs.setup-build-variables.outputs['godot-version'] }}
      jvm-version: ${{ needs.setup-build-variables.outputs['jvm-version'] }}
      build-version: ${{ needs.setup-build-variables.outputs['build-version'] }}

#  TODO: remove (only here for testing the signing in the ci pipeline as part of the PR)
  test_localDeploy:
    name: Test local deploy (singing)
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.UTOPIA_RISE_GPG_PRIVATE_KEY_ASCII }}
      ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.UTOPIA_RISE_GPG_KEY_PASSPHRASE }}
      ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.UTOPIA_RISE_MAVEN_CENTRAL_PORTAL_TOKEN_USERNAME }}
      ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.UTOPIA_RISE_MAVEN_CENTRAL_PORTAL_TOKEN_PASSWORD }}
    steps:
      - name: Clone Godot Engine
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ inputs.godot-version }}

      - name: Clone Godot JVM module.
        uses: actions/checkout@v4
        with:
          path: modules/kotlin_jvm

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.jvm-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

      - name: PublishToMavenLocal common
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :common:publishToMavenLocal

      - name: PublishToMavenLocal tools-common
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :tools-common:publishToMavenLocal

      - name: PublishToMavenLocal godot-build-props
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-build-props:publishToMavenLocal

      - name: PublishToMavenLocal godot-entry-generator
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-entry-generator:publishToMavenLocal

      - name: PublishToMavenLocal godot-kotlin-symbol-processor
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-kotlin-symbol-processor:publishToMavenLocal

      - name: PublishToMavenLocal godot-internal-library debug
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-internal-library:publishToMavenLocal -Pdebug

      - name: PublishToMavenLocal godot-internal-library release
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-internal-library:publishToMavenLocal -Prelease

      - name: PublishToMavenLocal godot-core-library debug
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-core-library:publishToMavenLocal -Pdebug

      - name: PublishToMavenLocal godot-core-library release
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-core-library:publishToMavenLocal -Prelease

      - name: PublishToMavenLocal godot-api-library debug
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-api-library:publishToMavenLocal -Pdebug

      - name: PublishToMavenLocal godot-api-library release
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-api-library:publishToMavenLocal -Prelease

      - name: PublishToMavenLocal godot-extension-library debug
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-extension-library:publishToMavenLocal -Pdebug

      - name: PublishToMavenLocal godot-extension-library release
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-extension-library:publishToMavenLocal -Prelease

      - name: PublishToMavenLocal godot-coroutine-library debug
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-coroutine-library:publishToMavenLocal -Pdebug

      - name: PublishToMavenLocal godot-coroutine-library release
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-coroutine-library:publishToMavenLocal -Prelease

      - name: PublishToMavenLocal godot-plugins-common
        shell: sh
        run: |
          modules/kotlin_jvm/kt/gradlew -p modules/kotlin_jvm/kt/ :godot-plugins-common:publishToMavenLocal
