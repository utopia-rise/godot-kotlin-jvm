#This workflow can only run on master! See the limitation mentioned in "Note:" here: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_run
name: Deploy Export Template Debug
on:
  workflow_run:
    workflows: [ "Create Draft Release" ]
    types:
      - completed

env:
  SCONS_CACHE_MSVC_CONFIG: true

jobs:
  deploy-export-template-debug:
    strategy:
      matrix:
        name: [ Linux ]
        include:
          - name: Linux
            # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
            os: ubuntu-18.04
            platform: x11
            binary: godot.x11.opt.debug.64
            cat_command: cat
          - name: OSX
            os: macos-latest
            platform: osx
            binary: godot.osx.opt.debug.64
            cat_command: cat
          - name: Windows
            os: windows-2019
            platform: windows
            binary: godot.windows.opt.debug.64.exe
            cat_command: type
          - name: Android
            os: ubuntu-latest
            platform: android
            binary: android_debug.apk
            cat_command: cat
    runs-on: ${{ matrix.os }}
    steps:
      # has to be the first step as the download url is only valid for 1 minute! See: https://stackoverflow.com/a/65049722
      - name: Get release infos from draft release
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: create-draft-release.yaml
          workflow_conclusion: success

      - name: Save release infos as variables
        id: save_release_info
        run: |
          echo "::set-output name=upload_url::$(${{ matrix.cat_command }} release_url/release_url.txt)"
          echo "::set-output name=godot_version::$(${{ matrix.cat_command }} godot_version/godot_version.txt)"
          echo "::set-output name=godot_kotlin_jvm_version::$(${{ matrix.cat_command }} godot_kotlin_jvm_version/godot_kotlin_jvm_version.txt)"

      - name: Configure dependencies
        if: matrix.platform == 'x11'
        run: |
          sudo apt-get update && sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.4.4-stable

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        if: matrix.platform != 'android'
        id: template-release-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/${{matrix.platform}}/.scons_cache/
          key: ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}

      - name: Load .scons_cache directory for Android arm64-v8
        if: matrix.platform == 'android'
        id: template-release-cache-android-arm64-v8
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/${{matrix.platform}}/arm64-v8/.scons_cache/
          key: ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}-${{github.ref}}
            ${{github.job}}-${{ steps.save_release_info.outputs.godot_version }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install -r modules/kotlin_jvm/requirements.txt

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: Build debug export template
        if: matrix.platform != 'android'
        env:
          SCONS_CACHE: ${{github.workspace}}/${{matrix.platform}}/.scons_cache/
        run: scons platform=${{ matrix.platform }} tools=no target=release_debug bits=64 -j${{ steps.cpu-cores.outputs.count }}

      - name: Build android debug binary arm64v8
        if: matrix.platform == 'android'
        env:
          SCONS_CACHE: ${{github.workspace}}/${{matrix.platform}}/arm64-v8/.scons_cache/
        run: scons platform=${{ matrix.platform }} target=release_debug android_arch=arm64v8 -j${{ steps.cpu-cores.outputs.count }}

      - name: Build android debug export template
        if: matrix.platform == 'android'
        run: cd platform/android/java/ && ./gradlew generateGodotTemplates

      - name: Upload export template debug
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.save_release_info.outputs.upload_url }}
          asset_path: bin/${{ matrix.binary }}
          asset_name: ${{ matrix.binary }}
          asset_content_type: application/octet-stream