# base key setup copied from the godot cache action setup
# just added some if statements for only restoring the cache when not on master and only saving when on master

name: Setup scons cache
description: Setup scons build cache.
inputs:
  cache-name:
    description: The cache base name (job name by default).
    default: "${{github.job}}"
  scons-cache:
    description: The scons cache path.
    default: "${{github.workspace}}/.scons-cache/"
  s3-user:
    description: Username of self-hosted s3
  s3-password:
    description: Password of self-hosted s3
  s3-host:
    description: Host of self-hosted s3
  s3-bucket:
    description: Bucket of self-hosted s3

runs:
  using: "composite"
  steps:

    # Upload cache on completion and check it out now
    - name: Load .scons_cache directory
      if: ${{ github.ref == 'refs/heads/master' && inputs.s3-host == '' }}
      uses: actions/cache@v4
      with:
        path: ${{inputs.scons-cache}}
        key: ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}

        # We try to match an existing cache to restore from it. Each potential key is checked against
        # all existing caches as a prefix. E.g. 'linux-template-minimal' would match any cache that
        # starts with "linux-template-minimal", such as "linux-template-minimal-master-refs/heads/master-6588a4a29af1621086feac0117d5d4d37af957fd".
        #
        # We check these prefixes in this order:
        #
        #   1. The exact match, including the base branch, the commit reference, and the SHA hash of the commit.
        #   2. A partial match for the same base branch and the same commit reference.
        #   3. A partial match for the same base branch and the base branch commit reference.
        #   4. A partial match for the same base branch only (not ideal, matches any PR with the same base branch).

        restore-keys: |
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-refs/heads/${{env.GODOT_BASE_BRANCH}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}

    # Check out cache but do not upload it at the end
    - name: Load .scons_cache directory
      if: ${{ github.ref != 'refs/heads/master' &&  inputs.s3-host == '' }}
      uses: actions/cache/restore@v4 # only restores the cache but does not upload it
      with:
        path: ${{inputs.scons-cache}}
        key: ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}

        # We try to match an existing cache to restore from it. Each potential key is checked against
        # all existing caches as a prefix. E.g. 'linux-template-minimal' would match any cache that
        # starts with "linux-template-minimal", such as "linux-template-minimal-master-refs/heads/master-6588a4a29af1621086feac0117d5d4d37af957fd".
        #
        # We check these prefixes in this order:
        #
        #   1. The exact match, including the base branch, the commit reference, and the SHA hash of the commit.
        #   2. A partial match for the same base branch and the same commit reference.
        #   3. A partial match for the same base branch and the base branch commit reference.
        #   4. A partial match for the same base branch only (not ideal, matches any PR with the same base branch).

        restore-keys: |
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}-refs/heads/${{env.GODOT_BASE_BRANCH}}
          ${{inputs.cache-name}}-${{env.GODOT_BASE_BRANCH}}

    - name: Log
      shell: bash
      run: echo "Host ${{ inputs.s3-host }}"

    - name: Setup s3 cache
      if: ${{ inputs.s3-host != '' }}
      uses: philiplehmann/minio-cache@v1.2.10
      with:
        endpoint: ${{inputs.s3-host}} # optional, default s3.amazonaws.com
        port: 443 # minio port
        insecure: false # optional, use http instead of https. default false
        accessKey: ${{inputs.s3-user}} # required
        secretKey: ${{inputs.s3-password}} # required
        bucket: ${{inputs.s3-bucket}} # required
        key: ${{ inputs.cache-name }}
        path: ${{ inputs.scons-cache }}

