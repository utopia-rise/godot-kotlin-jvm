// THIS FILE IS GENERATED! DO NOT EDIT IT MANUALLY!
package godot

import godot.core.TypeManager
import godot.core.VariantType.OBJECT
import godot.core.variantMapper
import kotlin.Unit

private fun registerEngineTypeMethodForGlobalConstants(): Unit {
}

private fun registerEngineTypeMethodForAESContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "get_iv_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "update")
}

private fun registerEngineTypeMethodForARVRAnchor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_anchor_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_plane")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "get_anchor_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRANCHOR to "set_anchor_id")
}

private fun registerEngineTypeMethodForARVRCamera(): Unit {
}

private fun registerEngineTypeMethodForARVRController(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_controller_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_hand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_joystick_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_joystick_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "is_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_controller_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "set_controller_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "get_rumble")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRCONTROLLER to "set_rumble")
}

private fun registerEngineTypeMethodForARVRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_capabilities")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_render_targetsize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_tracking_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "is_stereo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "uninitialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "get_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "set_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "is_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "set_is_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "is_primary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRINTERFACE to "set_is_primary")
}

private fun registerEngineTypeMethodForARVRInterfaceGDNative(): Unit {
}

private fun registerEngineTypeMethodForARVROrigin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRORIGIN to "get_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRORIGIN to "set_world_scale")
}

private fun registerEngineTypeMethodForARVRPositionalTracker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_joy_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_rw_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "_set_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_hand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_joy_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_tracker_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_tracks_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_tracks_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "get_rumble")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRPOSITIONALTRACKER to "set_rumble")
}

private fun registerEngineTypeMethodForARVRServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "add_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "add_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "center_on_hmd")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "clear_primary_interface_if")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "find_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_hmd_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_interface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_interfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_last_commit_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_last_frame_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_last_process_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_reference_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_tracker_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "remove_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "remove_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_primary_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "set_primary_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "get_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARVRSERVER to "set_world_scale")
}

private fun registerEngineTypeMethodForAStar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "_compute_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "_estimate_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "are_points_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "connect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "disconnect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_available_point_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_closest_position_in_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_id_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_capacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "is_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "reserve_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "set_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR to "set_point_weight_scale")
}

private fun registerEngineTypeMethodForAStar2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "_compute_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "_estimate_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "are_points_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "connect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "disconnect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_available_point_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_closest_position_in_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_id_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_capacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "is_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "reserve_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_weight_scale")
}

private fun registerEngineTypeMethodForAcceptDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "_builtin_text_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "_custom_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "add_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "add_cancel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "register_text_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "remove_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "has_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_hide_on_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_hide_on_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_text")
}

private fun registerEngineTypeMethodForAnimatedSprite(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "_is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "_res_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "_set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "get_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE to "set_speed_scale")
}

private fun registerEngineTypeMethodForAnimatedSprite3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "_is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "_res_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "_set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_sprite_frames")
}

private fun registerEngineTypeMethodForAnimatedTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "_update_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_current_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_current_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_oneshot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_oneshot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_pause")
}

private fun registerEngineTypeMethodForAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "add_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_get_key_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_set_key_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_end_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_start_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_end_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_start_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_in_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_out_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_in_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_out_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "copy_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "find_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_track_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "method_track_get_key_indices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "method_track_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "method_track_get_params")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "remove_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_find_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_interpolation_loop_wrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_interpolation_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_is_imported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_remove_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_remove_key_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_imported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_interpolation_loop_wrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_interpolation_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_swap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "transform_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "transform_track_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_get_key_indices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_step")
}

private fun registerEngineTypeMethodForAnimationNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_set_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "add_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_child_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_child_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_input_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_parameter_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_parameter_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "has_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "is_path_filtered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "remove_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_filter_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "is_filter_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_filter_enabled")
}

private fun registerEngineTypeMethodForAnimationNodeAdd2(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEADD2 to "is_using_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEADD2 to "set_use_sync")
}

private fun registerEngineTypeMethodForAnimationNodeAdd3(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEADD3 to "is_using_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEADD3 to "set_use_sync")
}

private fun registerEngineTypeMethodForAnimationNodeAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "set_animation")
}

private fun registerEngineTypeMethodForAnimationNodeBlend2(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLEND2 to "is_using_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLEND2 to "set_use_sync")
}

private fun registerEngineTypeMethodForAnimationNodeBlend3(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLEND3 to "is_using_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLEND3 to "set_use_sync")
}

private fun registerEngineTypeMethodForAnimationNodeBlendSpace1D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "_add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "remove_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_value_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_value_label")
}

private fun registerEngineTypeMethodForAnimationNodeBlendSpace2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "_add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "_get_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "_set_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "_update_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "add_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_triangle_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_triangle_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "remove_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "remove_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_auto_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_auto_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_x_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_x_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_y_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_y_label")
}

private fun registerEngineTypeMethodForAnimationNodeBlendTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "_node_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "connect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "disconnect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "rename_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "set_graph_offset")
}

private fun registerEngineTypeMethodForAnimationNodeOneShot(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_mix_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_mix_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "has_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to
      "get_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to
      "set_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "is_using_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_use_sync")
}

private fun registerEngineTypeMethodForAnimationNodeOutput(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeStateMachine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "add_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_end_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_start_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "has_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "remove_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to
      "remove_transition_by_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "rename_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "replace_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_end_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_start_node")
}

private fun registerEngineTypeMethodForAnimationNodeStateMachinePlayback(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_play_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_travel_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "travel")
}

private fun registerEngineTypeMethodForAnimationNodeStateMachineTransition(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_advance_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_advance_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "has_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_switch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_switch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_xfade_time")
}

private fun registerEngineTypeMethodForAnimationNodeTimeScale(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeTimeSeek(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeTransition(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_enabled_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_enabled_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_cross_fade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_cross_fade_time")
}

private fun registerEngineTypeMethodForAnimationPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "_animation_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "add_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "animation_get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "animation_set_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "clear_caches")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "clear_queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "find_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_playing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "has_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "play_backwards")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "remove_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "rename_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_assigned_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_assigned_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_current_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_method_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_method_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_default_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_default_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_animation_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_reset_on_save_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_reset_on_save_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_root")
}

private fun registerEngineTypeMethodForAnimationRootNode(): Unit {
}

private fun registerEngineTypeMethodForAnimationTrackEditPlugin(): Unit {
}

private fun registerEngineTypeMethodForAnimationTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "_clear_caches")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "_update_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "rename_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_root_motion_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_tree_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_tree_root")
}

private fun registerEngineTypeMethodForAnimationTreePlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "animation_node_get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "animation_node_get_master_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "animation_node_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "animation_node_set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "animation_node_set_filter_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "animation_node_set_master_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "are_nodes_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend2_node_get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend2_node_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend2_node_set_filter_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend3_node_get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend3_node_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend4_node_get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "blend4_node_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "connect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "disconnect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "get_node_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "mix_node_get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "mix_node_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_get_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_get_input_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_rename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "node_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_get_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_get_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_get_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_get_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_has_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "oneshot_node_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "oneshot_node_set_filter_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "oneshot_node_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "oneshot_node_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "recompute_caches")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "reset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "timescale_node_get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "timescale_node_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "timeseek_node_seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_delete_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "transition_node_get_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_get_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_get_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_has_input_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "transition_node_set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_set_input_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_set_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to
      "transition_node_set_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "get_master_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "set_master_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "get_animation_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREEPLAYER to "set_animation_process_mode")
}

private fun registerEngineTypeMethodForArea(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_area_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_area_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_area_inout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_body_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "_body_inout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "overlaps_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "overlaps_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_audio_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_audio_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "is_overriding_audio_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_audio_bus_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_gravity_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_gravity_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "is_gravity_a_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_gravity_is_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_gravity_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_gravity_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "is_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "is_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_reverb_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_reverb_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "is_using_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_use_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_reverb_uniformity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_reverb_uniformity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "get_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA to "set_space_override_mode")
}

private fun registerEngineTypeMethodForArea2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_area_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_area_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_area_inout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_body_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "_body_inout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "overlaps_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "overlaps_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_overriding_audio_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_audio_bus_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_gravity_a_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_is_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_space_override_mode")
}

private fun registerEngineTypeMethodForArrayMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "add_blend_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "add_surface_from_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "clear_blend_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "clear_surfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "lightmap_unwrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "regen_normalmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_find_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_array_index_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_array_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_update_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_custom_aabb")
}

private fun registerEngineTypeMethodForAspectRatioContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_alignment_horizontal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_alignment_horizontal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_alignment_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_alignment_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_stretch_mode")
}

private fun registerEngineTypeMethodForAtlasTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "has_filter_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_filter_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_region")
}

private fun registerEngineTypeMethodForAudioBusLayout(): Unit {
}

private fun registerEngineTypeMethodForAudioEffect(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectAmplify(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTAMPLIFY to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTAMPLIFY to "set_volume_db")
}

private fun registerEngineTypeMethodForAudioEffectBandLimitFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectBandPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectCapture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "can_get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "clear_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer_length_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_discarded_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_frames_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_pushed_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "set_buffer_length")
}

private fun registerEngineTypeMethodForAudioEffectChorus(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_wet")
}

private fun registerEngineTypeMethodForAudioEffectCompressor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_attack_us")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_attack_us")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_release_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_release_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_sidechain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_sidechain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_threshold")
}

private fun registerEngineTypeMethodForAudioEffectDelay(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_feedback_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_lowpass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_lowpass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_tap1_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_tap2_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_pan")
}

private fun registerEngineTypeMethodForAudioEffectDistortion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_keep_hf_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_keep_hf_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_post_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_post_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_pre_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_pre_gain")
}

private fun registerEngineTypeMethodForAudioEffectEQ(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "get_band_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "get_band_gain_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "set_band_gain_db")
}

private fun registerEngineTypeMethodForAudioEffectEQ10(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectEQ21(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectEQ6(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectFilter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_cutoff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_cutoff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_resonance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_resonance")
}

private fun registerEngineTypeMethodForAudioEffectHighPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectHighShelfFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectInstance(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectLimiter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_ceiling_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_ceiling_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_soft_clip_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_soft_clip_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_soft_clip_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_soft_clip_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_threshold_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_threshold_db")
}

private fun registerEngineTypeMethodForAudioEffectLowPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectLowShelfFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectNotchFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectPanner(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPANNER to "get_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPANNER to "set_pan")
}

private fun registerEngineTypeMethodForAudioEffectPhaser(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_range_max_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_range_max_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_range_min_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_range_min_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_rate_hz")
}

private fun registerEngineTypeMethodForAudioEffectPitchShift(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_pitch_scale")
}

private fun registerEngineTypeMethodForAudioEffectRecord(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "get_recording")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "is_recording_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "set_recording_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "set_format")
}

private fun registerEngineTypeMethodForAudioEffectReverb(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_hpf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_hpf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_predelay_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_predelay_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_predelay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_predelay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_room_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_room_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_wet")
}

private fun registerEngineTypeMethodForAudioEffectSpectrumAnalyzer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_tap_back_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_tap_back_pos")
}

private fun registerEngineTypeMethodForAudioEffectSpectrumAnalyzerInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZERINSTANCE to
      "get_magnitude_for_frequency_range")
}

private fun registerEngineTypeMethodForAudioEffectStereoEnhance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_pan_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_pan_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_surround")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_surround")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_time_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_time_pullout")
}

private fun registerEngineTypeMethodForAudioServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "add_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "add_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_get_device_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "generate_bus_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_peak_volume_left_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_peak_volume_right_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_device_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_output_latency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_speaker_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_time_since_last_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_time_to_next_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_bypassing_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_effect_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_mute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_solo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "move_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "remove_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "remove_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_bypass_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_effect_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_mute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_solo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "swap_bus_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "unlock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_global_rate_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_global_rate_scale")
}

private fun registerEngineTypeMethodForAudioStream(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "get_length")
}

private fun registerEngineTypeMethodForAudioStreamGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "get_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "set_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "set_mix_rate")
}

private fun registerEngineTypeMethodForAudioStreamGeneratorPlayback(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "can_push_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "clear_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to
      "get_frames_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "get_skips")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "push_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "push_frame")
}

private fun registerEngineTypeMethodForAudioStreamMP3(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_loop_offset")
}

private fun registerEngineTypeMethodForAudioStreamMicrophone(): Unit {
}

private fun registerEngineTypeMethodForAudioStreamOGGVorbis(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_loop_offset")
}

private fun registerEngineTypeMethodForAudioStreamPlayback(): Unit {
}

private fun registerEngineTypeMethodForAudioStreamPlaybackResampled(): Unit {
}

private fun registerEngineTypeMethodForAudioStreamPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "_bus_layout_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "_set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream_playback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_mix_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_mix_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_volume_db")
}

private fun registerEngineTypeMethodForAudioStreamPlayer2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "_bus_layout_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "_set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream_playback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_volume_db")
}

private fun registerEngineTypeMethodForAudioStreamPlayer3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "_bus_layout_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "_set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream_playback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "get_attenuation_filter_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "set_attenuation_filter_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_attenuation_filter_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_attenuation_filter_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_attenuation_model")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_attenuation_model")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_emission_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_emission_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_emission_angle_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_emission_angle_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "get_emission_angle_filter_attenuation_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "set_emission_angle_filter_attenuation_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_max_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_max_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_out_of_range_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_out_of_range_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_unit_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_unit_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_unit_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_unit_size")
}

private fun registerEngineTypeMethodForAudioStreamRandomPitch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMPITCH to "get_audio_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMPITCH to "set_audio_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMPITCH to "get_random_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMPITCH to "set_random_pitch")
}

private fun registerEngineTypeMethodForAudioStreamSample(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "save_to_wav")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_loop_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_loop_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_loop_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_loop_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "is_stereo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMSAMPLE to "set_stereo")
}

private fun registerEngineTypeMethodForBackBufferCopy(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "get_copy_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "set_copy_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "set_rect")
}

private fun registerEngineTypeMethodForBakedLightmap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "is_generate_atlas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_generate_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_max_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_max_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_bounce_indirect_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_bounce_indirect_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_capture_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_capture_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_capture_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_capture_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_capture_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_capture_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_capture_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_capture_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_default_texels_per_unit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_default_texels_per_unit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_environment_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_environment_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_environment_custom_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_environment_custom_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_environment_custom_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_environment_custom_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to
      "get_environment_custom_sky_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to
      "set_environment_custom_sky_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_environment_min_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_environment_min_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_environment_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_environment_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_image_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_image_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_light_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_light_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "get_bake_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_bake_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "is_using_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_use_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "is_using_denoiser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_use_denoiser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "is_using_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAP to "set_use_hdr")
}

private fun registerEngineTypeMethodForBakedLightmapData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "_get_user_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "_set_user_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "add_user")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "clear_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "clear_users")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_user_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_user_lightmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_user_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_cell_space_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_cell_space_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_cell_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_cell_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "get_octree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BAKEDLIGHTMAPDATA to "set_octree")
}

private fun registerEngineTypeMethodForBaseButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_toggled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_hovered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_pressed_no_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_action_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_action_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_enabled_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_enabled_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_button_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_button_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_keep_pressed_outside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_keep_pressed_outside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_shortcut_in_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_shortcut_in_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_toggle_mode")
}

private fun registerEngineTypeMethodForBitMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "create_from_image_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_true_bit_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "grow_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "opaque_to_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "set_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "set_bit_rect")
}

private fun registerEngineTypeMethodForBitmapFont(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_get_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_get_kernings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_get_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_set_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_set_kernings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "_set_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "add_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "add_kerning_pair")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "add_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "create_from_fnt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "get_kerning_pair")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "get_texture_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "set_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "set_distance_field_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "get_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "set_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAPFONT to "set_height")
}

private fun registerEngineTypeMethodForBone2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "apply_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_index_in_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_skeleton_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_default_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_default_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_rest")
}

private fun registerEngineTypeMethodForBoneAttachment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT to "get_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT to "set_bone_name")
}

private fun registerEngineTypeMethodForBoxContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "add_spacer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "get_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "set_alignment")
}

private fun registerEngineTypeMethodForBoxShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXSHAPE to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXSHAPE to "set_extents")
}

private fun registerEngineTypeMethodForBulletPhysicsDirectBodyState(): Unit {
}

private fun registerEngineTypeMethodForButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "is_expand_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_expand_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text")
}

private fun registerEngineTypeMethodForButtonGroup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTONGROUP to "get_buttons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTONGROUP to "get_pressed_button")
}

private fun registerEngineTypeMethodForCPUParticles(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "_update_render_thread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "convert_from_particles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES to "set_param_randomness")
}

private fun registerEngineTypeMethodForCPUParticles2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "_texture_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "_update_render_thread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "convert_from_particles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_rect_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_rect_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_normalmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_normalmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_texture")
}

private fun registerEngineTypeMethodForCSGBox(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX to "set_width")
}

private fun registerEngineTypeMethodForCSGCombiner(): Unit {
}

private fun registerEngineTypeMethodForCSGCylinder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "is_cone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_cone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "get_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "get_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER to "set_smooth_faces")
}

private fun registerEngineTypeMethodForCSGMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH to "_mesh_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH to "set_mesh")
}

private fun registerEngineTypeMethodForCSGPolygon(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "_has_editable_3d_polygon_no_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "_is_editable_3d_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "_path_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "_path_exited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "is_path_continuous_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_continuous_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_interval_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_interval_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "is_path_joined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_joined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "is_path_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_simplify_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_simplify_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_path_u_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_path_u_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_spin_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_spin_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "get_spin_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON to "set_spin_sides")
}

private fun registerEngineTypeMethodForCSGPrimitive(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPRIMITIVE to "is_inverting_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPRIMITIVE to "set_invert_faces")
}

private fun registerEngineTypeMethodForCSGShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "_update_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "is_root_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "is_calculating_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_calculate_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "is_using_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE to "set_use_collision")
}

private fun registerEngineTypeMethodForCSGSphere(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "get_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE to "set_smooth_faces")
}

private fun registerEngineTypeMethodForCSGTorus(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_ring_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_ring_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "get_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS to "set_smooth_faces")
}

private fun registerEngineTypeMethodForCamera(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_camera_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_camera_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_cull_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "is_position_behind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "project_local_ray_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "project_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "project_ray_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "project_ray_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_cull_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_orthogonal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "unproject_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_zfar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_zfar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_frustum_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_frustum_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_keep_aspect_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_keep_aspect_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_znear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_znear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA to "set_v_offset")
}

private fun registerEngineTypeMethodForCamera2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "_make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "_set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "_update_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "force_update_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_camera_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_camera_screen_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "reset_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_anchor_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_anchor_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_h_drag_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_h_drag_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_v_drag_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_v_drag_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_margin_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_margin_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_limit_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_screen_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_screen_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_limit_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_rotating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_rotating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_follow_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_enable_follow_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_follow_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_follow_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_zoom")
}

private fun registerEngineTypeMethodForCameraFeed(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_allocate_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_set_RGB_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_set_YCbCr_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_set_YCbCr_imgs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "set_transform")
}

private fun registerEngineTypeMethodForCameraServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "add_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "feeds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "get_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "get_feed_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "remove_feed")
}

private fun registerEngineTypeMethodForCameraTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_camera_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_camera_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_which_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_which_feed")
}

private fun registerEngineTypeMethodForCanvasItem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_pivot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_pivot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_use_pivot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_use_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_edit_use_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_is_on_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_set_on_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_toplevel_raise_self")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_update_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_arc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_colored_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polyline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polyline_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_primitive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_set_transform_matrix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_style_box")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "force_update_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_transform_with_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_local_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_viewport_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_viewport_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to
      "is_local_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_set_as_toplevel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_visible_in_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "make_canvas_position_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "make_input_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_as_toplevel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_notify_local_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_notify_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_draw_behind_parent_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_draw_behind_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_visible")
}

private fun registerEngineTypeMethodForCanvasItemMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_light_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_light_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_animation")
}

private fun registerEngineTypeMethodForCanvasLayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "is_following_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_follow_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_follow_viewport_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_follow_viewport_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_transform")
}

private fun registerEngineTypeMethodForCanvasModulate(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASMODULATE to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASMODULATE to "set_color")
}

private fun registerEngineTypeMethodForCapsuleMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_mid_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_mid_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_rings")
}

private fun registerEngineTypeMethodForCapsuleShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE to "set_radius")
}

private fun registerEngineTypeMethodForCapsuleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "set_radius")
}

private fun registerEngineTypeMethodForCenterContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CENTERCONTAINER to "is_using_top_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CENTERCONTAINER to "set_use_top_left")
}

private fun registerEngineTypeMethodForCharFXTransform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_absolute_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_absolute_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_elapsed_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_elapsed_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_relative_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_relative_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_visibility")
}

private fun registerEngineTypeMethodForCheckBox(): Unit {
}

private fun registerEngineTypeMethodForCheckButton(): Unit {
}

private fun registerEngineTypeMethodForCircleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CIRCLESHAPE2D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CIRCLESHAPE2D to "set_radius")
}

private fun registerEngineTypeMethodForClippedCamera(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "get_clip_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "is_clip_to_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_clip_to_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "is_clip_to_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_clip_to_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "get_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLIPPEDCAMERA to "set_process_mode")
}

private fun registerEngineTypeMethodForCollisionObject(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "_shape_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "_update_debug_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "create_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_shape_owners")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "is_shape_owner_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "remove_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_find_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_get_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "shape_owner_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "get_capture_input_on_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_capture_input_on_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "is_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT to "set_ray_pickable")
}

private fun registerEngineTypeMethodForCollisionObject2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "create_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "get_shape_owner_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_shape_owners")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "is_shape_owner_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "is_shape_owner_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "remove_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_find_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "shape_owner_set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "shape_owner_set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "is_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_pickable")
}

private fun registerEngineTypeMethodForCollisionPolygon(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "_is_editable_3d_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON to "set_polygon")
}

private fun registerEngineTypeMethodForCollisionPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_build_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_build_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "is_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_polygon")
}

private fun registerEngineTypeMethodForCollisionShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "make_convex_from_brothers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE to "set_shape")
}

private fun registerEngineTypeMethodForCollisionShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "_shape_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "is_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "get_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_shape")
}

private fun registerEngineTypeMethodForColorPicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_add_preset_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_focus_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_focus_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_hsv_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_html_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_html_focus_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_preset_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_sample_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_sample_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_screen_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_screen_pick_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_text_type_toggled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_update_presets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_uv_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_value_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "_w_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "add_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "erase_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_presets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_deferred_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_deferred_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_editing_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_edit_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_hsv_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_hsv_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_presets_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_presets_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_presets_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_presets_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_raw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_raw_mode")
}

private fun registerEngineTypeMethodForColorPickerButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "_about_to_show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "_color_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "_modal_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_picker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "set_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "is_editing_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "set_edit_alpha")
}

private fun registerEngineTypeMethodForColorRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORRECT to "get_frame_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORRECT to "set_frame_color")
}

private fun registerEngineTypeMethodForConcavePolygonShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE to "get_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE to "set_faces")
}

private fun registerEngineTypeMethodForConcavePolygonShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE2D to "get_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE2D to "set_segments")
}

private fun registerEngineTypeMethodForConeTwistJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "_get_swing_span")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "_get_twist_span")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "_set_swing_span")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "_set_twist_span")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT to "set_param")
}

private fun registerEngineTypeMethodForConfigFile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "erase_section")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "erase_section_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_section_keys")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "has_section")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "has_section_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load_encrypted_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save_encrypted_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "set_value")
}

private fun registerEngineTypeMethodForConfirmationDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIRMATIONDIALOG to "get_cancel")
}

private fun registerEngineTypeMethodForContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "_child_minsize_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "_sort_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "fit_child_in_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "queue_sort")
}

private fun registerEngineTypeMethodForControl(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_clips_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_get_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_make_custom_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_override_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_set_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_size_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_theme_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_update_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "accept_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_shader_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "can_drop_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "drop_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "find_next_valid_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "find_prev_valid_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "force_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_combined_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_drag_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_global_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_parent_area_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_parent_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "grab_click_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "grab_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_shader_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "minimum_size_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "release_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchor_and_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchors_and_margins_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchors_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_drag_forwarding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_drag_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_margins_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "show_modal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_neighbour")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_previous")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_previous")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_h_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_h_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_v_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_v_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_pass_on_modal_close_click")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_pass_on_modal_close_click")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_mouse_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_mouse_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_clipping_contents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_clip_contents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_custom_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_custom_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_pivot_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_pivot_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_h_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_h_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_stretch_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_stretch_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_v_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_v_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_theme")
}

private fun registerEngineTypeMethodForConvexPolygonShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE to "set_points")
}

private fun registerEngineTypeMethodForConvexPolygonShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "set_point_cloud")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "set_points")
}

private fun registerEngineTypeMethodForCrypto(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "constant_time_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "decrypt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "encrypt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_random_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_rsa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_self_signed_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "hmac_digest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "sign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "verify")
}

private fun registerEngineTypeMethodForCryptoKey(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "is_public_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "load_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "save_to_string")
}

private fun registerEngineTypeMethodForCubeMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_side")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "set_side")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "set_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_lossy_storage_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "set_lossy_storage_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "get_storage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMAP to "set_storage")
}

private fun registerEngineTypeMethodForCubeMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "get_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "get_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "set_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CUBEMESH to "set_subdivide_width")
}

private fun registerEngineTypeMethodForCullInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "get_portal_autoplace_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "set_portal_autoplace_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "get_include_in_bound")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "set_include_in_bound")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "get_portal_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CULLINSTANCE to "set_portal_mode")
}

private fun registerEngineTypeMethodForCurve(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "clean_dupes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_left_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_left_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_right_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_right_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "interpolate_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_left_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_left_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_right_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_right_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_bake_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_bake_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_max_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_max_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_min_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_min_value")
}

private fun registerEngineTypeMethodForCurve2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_baked_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_baked_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_closest_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "interpolate_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "interpolatef")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "tessellate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_bake_interval")
}

private fun registerEngineTypeMethodForCurve3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_tilts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_up_vectors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_closest_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "interpolate_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "interpolate_baked_up_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "interpolatef")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "tessellate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "is_up_vector_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_up_vector_enabled")
}

private fun registerEngineTypeMethodForCurveTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "set_width")
}

private fun registerEngineTypeMethodForCylinderMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_bottom_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_bottom_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_top_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_top_radius")
}

private fun registerEngineTypeMethodForCylinderShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE to "set_radius")
}

private fun registerEngineTypeMethodForDTLSServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DTLSSERVER to "setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DTLSSERVER to "take_connection")
}

private fun registerEngineTypeMethodForDampedSpringJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_stiffness")
}

private fun registerEngineTypeMethodForDirectionalLight(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "is_blend_splits_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "set_blend_splits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "get_shadow_depth_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "set_shadow_depth_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "get_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT to "set_shadow_mode")
}

private fun registerEngineTypeMethodForDynamicFont(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "add_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_available_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_fallback_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "remove_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_font_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_font_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_outline_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_outline_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_use_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_use_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "get_use_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONT to "set_use_mipmaps")
}

private fun registerEngineTypeMethodForDynamicFontData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "is_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "set_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "get_font_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "set_font_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "get_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DYNAMICFONTDATA to "set_hinting")
}

private fun registerEngineTypeMethodForEditorExportPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_bundle_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_cpp_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_embedded_framework")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_framework")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_linker_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_plist_content")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_project_static_lib")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_shared_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "skip")
}

private fun registerEngineTypeMethodForEditorFeatureProfile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "get_feature_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_editor_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_property_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_feature_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "load_from_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "save_to_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_feature")
}

private fun registerEngineTypeMethodForEditorFileDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_cancel_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_dir_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_favorite_move_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_favorite_move_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_favorite_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_favorite_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_file_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_filter_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_go_back")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_go_forward")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_go_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_item_db_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_item_list_item_rmb_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_item_list_rmb_clicked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_item_menu_id_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_item_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_items_clear_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_make_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_make_dir_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_multi_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_recent_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_save_confirm_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_select_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_thumbnail_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_thumbnail_result")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_update_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_update_file_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "_update_file_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "add_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "clear_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_vbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "invalidate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "is_overwrite_warning_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_disable_overwrite_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_display_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_display_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "is_showing_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_show_hidden_files")
}

private fun registerEngineTypeMethodForEditorFileSystem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_file_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_filesystem")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_filesystem_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_scanning_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "is_scanning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "scan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "scan_sources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "update_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "update_script_classes")
}

private fun registerEngineTypeMethodForEditorFileSystemDirectory(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "find_dir_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "find_file_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_import_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_script_class_extends")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_script_class_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_subdir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_subdir_count")
}

private fun registerEngineTypeMethodForEditorImportPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_import_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_import_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_importer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_option_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_preset_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_preset_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_resource_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_save_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "get_visible_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "import")
}

private fun registerEngineTypeMethodForEditorInspector(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_edit_request_change")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_feature_profile_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_filter_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_multiple_properties_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_object_id_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_changed_update_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_keyed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_keyed_with_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_property_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_resource_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "_vscroll_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "refresh")
}

private fun registerEngineTypeMethodForEditorInspectorPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "add_custom_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "add_property_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to
      "add_property_editor_for_multiple_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "can_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "parse_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "parse_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "parse_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "parse_property")
}

private fun registerEngineTypeMethodForEditorInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "edit_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "edit_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_base_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_settings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_file_system_dock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_inspector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_open_scenes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_resource_filesystem")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_resource_previewer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_script_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_selected_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "inspect_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "is_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "is_plugin_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "make_mesh_previews")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "open_scene_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_custom_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_main_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "reload_scene_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "save_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "save_scene_as")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "select_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_main_screen_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_plugin_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "stop_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to
      "is_distraction_free_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_distraction_free_mode")
}

private fun registerEngineTypeMethodForEditorNavigationMeshGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNAVIGATIONMESHGENERATOR to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNAVIGATIONMESHGENERATOR to "clear")
}

private fun registerEngineTypeMethodForEditorPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_autoload_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_container")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_dock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_custom_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_export_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_inspector_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_scene_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_spatial_gizmo_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_tool_menu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_tool_submenu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "apply_changes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "build")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "disable_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "enable_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "forward_canvas_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "forward_canvas_force_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "forward_canvas_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "forward_spatial_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "forward_spatial_force_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "forward_spatial_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_breakpoints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_editor_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_plugin_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_plugin_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_script_create_dialog")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_undo_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_window_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "has_main_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "hide_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "make_bottom_panel_item_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "make_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "queue_save_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_autoload_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_container")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_docks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_custom_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_export_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_inspector_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_scene_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_spatial_gizmo_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_tool_menu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "save_external_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "set_force_draw_over_forwarding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "set_input_event_forwarding_always_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "set_window_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "update_overlays")
}

private fun registerEngineTypeMethodForEditorProperty(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "_focusable_focused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "add_focusable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "emit_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_edited_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_edited_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_bottom_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "update_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_draw_red")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_draw_red")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_keying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_keying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_read_only")
}

private fun registerEngineTypeMethodForEditorResourceConversionPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCECONVERSIONPLUGIN to "_convert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCECONVERSIONPLUGIN to "_converts_to")
}

private fun registerEngineTypeMethodForEditorResourcePicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_button_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_button_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_edit_menu_cbk")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_file_quick_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_file_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_resource_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_update_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_update_resource_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "can_drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_allowed_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_drag_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "handle_menu_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_create_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_toggle_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_edited_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_edited_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "is_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_toggle_mode")
}

private fun registerEngineTypeMethodForEditorResourcePreview(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "_preview_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "add_preview_generator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "check_for_invalidation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to
      "queue_edited_resource_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "queue_resource_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "remove_preview_generator")
}

private fun registerEngineTypeMethodForEditorResourcePreviewGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "can_generate_small_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to "generate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "generate_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "generate_small_preview_automatically")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to "handles")
}

private fun registerEngineTypeMethodForEditorSceneImporter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to "_get_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to "_get_import_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to "_import_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to "_import_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to
      "import_animation_from_other_importer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEIMPORTER to
      "import_scene_from_other_importer")
}

private fun registerEngineTypeMethodForEditorSceneImporterFBX(): Unit {
}

private fun registerEngineTypeMethodForEditorSceneImporterGLTF(): Unit {
}

private fun registerEngineTypeMethodForEditorScenePostImport(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORT to "get_source_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORT to "get_source_folder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORT to "post_import")
}

private fun registerEngineTypeMethodForEditorScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "_run")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "add_root_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "get_editor_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "get_scene")
}

private fun registerEngineTypeMethodForEditorScriptPicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPTPICKER to "get_script_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPTPICKER to "set_script_owner")
}

private fun registerEngineTypeMethodForEditorSelection(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "_emit_change")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "get_selected_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to
      "get_transformable_selected_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "remove_node")
}

private fun registerEngineTypeMethodForEditorSettings(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "add_property_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "erase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_favorites")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_project_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_project_settings_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_recent_dirs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_settings_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "has_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "property_can_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "property_get_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_favorites")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_initial_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_project_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_recent_dirs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_setting")
}

private fun registerEngineTypeMethodForEditorSpatialGizmo(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_collision_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_collision_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "add_unscaled_billboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "commit_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "get_handle_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "get_handle_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "get_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "get_spatial_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "is_handle_highlighted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "redraw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "set_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "set_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMO to "set_spatial_node")
}

private fun registerEngineTypeMethodForEditorSpatialGizmoPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "add_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "can_be_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "commit_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "create_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "create_handle_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "create_icon_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "create_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "get_handle_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "get_handle_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "has_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "is_handle_highlighted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to
      "is_selectable_when_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "redraw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPATIALGIZMOPLUGIN to "set_handle")
}

private fun registerEngineTypeMethodForEditorSpinSlider(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_grabber_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_grabber_mouse_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_grabber_mouse_exited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_value_focus_exited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_value_input_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_value_input_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "_value_input_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "is_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_read_only")
}

private fun registerEngineTypeMethodForEditorVCSInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_file_diff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_modified_files_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_project_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_vcs_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_is_vcs_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_shut_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_stage_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_unstage_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "get_file_diff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "get_modified_files_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "get_project_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "get_vcs_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "is_addon_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "is_vcs_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "shut_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "stage_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "unstage_file")
}

private fun registerEngineTypeMethodForEncodedObjectAsID(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENCODEDOBJECTASID to "get_object_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENCODEDOBJECTASID to "set_object_id")
}

private fun registerEngineTypeMethodForEnvironment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_brightness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_brightness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_color_correction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_color_correction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_contrast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_contrast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_adjustment_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_enable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_saturation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_saturation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_sky_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_sky_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_auto_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_auto_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_auto_exposure_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_auto_exposure_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_auto_exposure_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_auto_exposure_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_auto_exposure_grey")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_auto_exposure_grey")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_auto_exposure_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_auto_exposure_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_bg_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_bg_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_far_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_far_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_far_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_far_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_dof_blur_far_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_far_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_far_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_far_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_far_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_far_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_near_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_near_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_near_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_near_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_dof_blur_near_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_near_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_near_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_near_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_dof_blur_near_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_dof_blur_near_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_depth_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_depth_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_depth_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_depth_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_fog_depth_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_depth_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_depth_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_depth_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_height_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_fog_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_height_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_height_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_sun_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_sun_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_sun_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_sun_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_transmit_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_transmit_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_fog_transmit_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_transmit_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_bicubic_upscale_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_bicubic_upscale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_bloom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_bloom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_luminance_cap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_luminance_cap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_bleed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_bleed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_bleed_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_bleed_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_high_quality_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_high_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_level_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_depth_tolerance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_depth_tolerance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssr_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_fade_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_fade_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_fade_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_fade_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_max_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_max_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssr_rough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_rough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_ao_channel_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_ao_channel_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_blur")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_blur")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_edge_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_edge_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssao_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_intensity2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_intensity2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_direct_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_direct_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_radius2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_radius2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemapper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemapper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_white")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_white")
}

private fun registerEngineTypeMethodForExpression(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "get_error_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "has_execute_failed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "parse")
}

private fun registerEngineTypeMethodForExternalTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXTERNALTEXTURE to "get_external_texture_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXTERNALTEXTURE to "set_size")
}

private fun registerEngineTypeMethodForFileDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_cancel_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_dir_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_file_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_filter_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_go_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_make_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_make_dir_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_save_confirm_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_select_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_tree_item_activated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_tree_multi_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_tree_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_update_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_update_file_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "_update_file_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "add_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "clear_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "deselect_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_line_edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_vbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "invalidate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "is_mode_overriding_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_mode_overrides_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "is_showing_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_show_hidden_files")
}

private fun registerEngineTypeMethodForFileSystemDock(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_bw_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_duplicate_operation_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_feature_profile_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_activate_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_rmb_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_rmb_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_list_thumbnail_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_multi_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_file_sort_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_folder_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_fs_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_fw_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_make_dir_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_make_scene_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_move_operation_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_move_with_overwrite")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_navigate_to_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_preview_invalidated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_rename_operation_confirm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_rescan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_resource_created")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_search_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_select_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_toggle_file_display")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_toggle_split_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_activate_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_empty_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_multi_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_rmb_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_rmb_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_tree_thumbnail_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_update_import_dock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "_update_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "can_drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "get_drag_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "navigate_to_path")
}

private fun registerEngineTypeMethodForFont(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_char_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_string_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_wordwrap_string_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "has_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "is_distance_field_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "update_changes")
}

private fun registerEngineTypeMethodForFuncRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "call_func")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "call_funcv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "set_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FUNCREF to "set_function")
}

private fun registerEngineTypeMethodForGDNative(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVE to "call_native")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVE to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVE to "terminate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVE to "get_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVE to "set_library")
}

private fun registerEngineTypeMethodForGDNativeLibrary(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "get_current_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "get_current_library_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "get_config_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "set_config_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "should_load_once")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "set_load_once")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "is_reloadable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "set_reloadable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "is_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "set_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "get_symbol_prefix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDNATIVELIBRARY to "set_symbol_prefix")
}

private fun registerEngineTypeMethodForGDScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPT to "get_as_byte_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPT to "new")
}

private fun registerEngineTypeMethodForGDScriptFunctionState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPTFUNCTIONSTATE to "_signal_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPTFUNCTIONSTATE to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPTFUNCTIONSTATE to "resume")
}

private fun registerEngineTypeMethodForGIProbe(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "debug_bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_probe_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_probe_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "get_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBE to "set_subdiv")
}

private fun registerEngineTypeMethodForGIProbeData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_dynamic_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_dynamic_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "get_to_cell_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GIPROBEDATA to "set_to_cell_xform")
}

private fun registerEngineTypeMethodForGLTFAccessor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_values_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_values_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_values_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_values_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_type")
}

private fun registerEngineTypeMethodForGLTFAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFANIMATION to "get_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFANIMATION to "set_loop")
}

private fun registerEngineTypeMethodForGLTFBufferView(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_indices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_indices")
}

private fun registerEngineTypeMethodForGLTFCamera(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_fov_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_fov_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_zfar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_zfar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_znear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_znear")
}

private fun registerEngineTypeMethodForGLTFDocument(): Unit {
}

private fun registerEngineTypeMethodForGLTFLight(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_inner_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_inner_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_outer_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_outer_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_type")
}

private fun registerEngineTypeMethodForGLTFMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_blend_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_blend_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_instance_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_instance_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_mesh")
}

private fun registerEngineTypeMethodForGLTFNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_xform")
}

private fun registerEngineTypeMethodForGLTFSkeleton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_bone_attachment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_bone_attachment_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_godot_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_godot_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_godot_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_unique_names")
}

private fun registerEngineTypeMethodForGLTFSkin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_godot_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_godot_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_inverse_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_inverse_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joint_i_to_bone_i")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joint_i_to_bone_i")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joint_i_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joint_i_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joints_original")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joints_original")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_non_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_non_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_skin_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_skin_root")
}

private fun registerEngineTypeMethodForGLTFSpecGloss(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_diffuse_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_diffuse_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_diffuse_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_diffuse_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_gloss_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_gloss_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_spec_gloss_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_spec_gloss_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_specular_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_specular_factor")
}

private fun registerEngineTypeMethodForGLTFState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animation_players_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_scene_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_accessors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_accessors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_buffer_views")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_buffer_views")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_buffers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_buffers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_cameras")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_cameras")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_glb_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_glb_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_json")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_json")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_lights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_lights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_major_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_major_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_minor_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_minor_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_root_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_root_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_scene_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_scene_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skeleton_to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skeleton_to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skeletons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skeletons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_unique_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_unique_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_use_named_skin_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_use_named_skin_binds")
}

private fun registerEngineTypeMethodForGLTFTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "get_src_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "set_src_image")
}

private fun registerEngineTypeMethodForGeneric6DOFJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_hi_limit_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_hi_limit_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_hi_limit_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_lo_limit_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_lo_limit_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_get_angular_lo_limit_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_hi_limit_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_hi_limit_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_hi_limit_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_lo_limit_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_lo_limit_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "_set_angular_lo_limit_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT to "set_param_z")
}

private fun registerEngineTypeMethodForGeometryInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_extra_cull_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_extra_cull_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_generate_lightmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_generate_lightmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_lightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_lightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_lod_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_lod_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_lod_max_hysteresis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_lod_max_hysteresis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_lod_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_lod_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_lod_min_hysteresis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_lod_min_hysteresis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE to "set_flag")
}

private fun registerEngineTypeMethodForGradient(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_offsets")
}

private fun registerEngineTypeMethodForGradientTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE to "_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE to "get_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE to "set_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE to "set_width")
}

private fun registerEngineTypeMethodForGraphEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_connections_layer_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_graph_node_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_graph_node_raised")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_graph_node_slot_updated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_minimap_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_minimap_toggled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_scroll_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_snap_toggled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_snap_value_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_top_layer_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_top_layer_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_update_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_zoom_minus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_zoom_plus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_zoom_reset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_left_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_right_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "clear_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "connect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "disconnect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_connection_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_hbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_node_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_left_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_right_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_connection_activity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_minimap_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_minimap_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_minimap_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_right_disconnects_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_right_disconnects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_scroll_ofs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_scroll_ofs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_showing_zoom_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_show_zoom_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_using_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_use_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_step")
}

private fun registerEngineTypeMethodForGraphNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "clear_all_slots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "clear_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_color_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_color_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_type_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_type_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_slot_enabled_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_slot_enabled_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_color_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_color_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_enabled_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_enabled_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_type_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_type_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_comment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_comment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_close_button_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_show_close_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_title")
}

private fun registerEngineTypeMethodForGridContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDCONTAINER to "get_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDCONTAINER to "set_columns")
}

private fun registerEngineTypeMethodForGridMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "_update_octants_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "clear_baked_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_bake_mesh_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_bake_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_item_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_used_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "make_baked_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "map_to_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "world_to_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_octant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_octant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_mesh_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_mesh_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_use_in_baked_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_use_in_baked_light")
}

private fun registerEngineTypeMethodForGrooveJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "get_initial_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "set_initial_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "set_length")
}

private fun registerEngineTypeMethodForHBoxContainer(): Unit {
}

private fun registerEngineTypeMethodForHMACContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "update")
}

private fun registerEngineTypeMethodForHScrollBar(): Unit {
}

private fun registerEngineTypeMethodForHSeparator(): Unit {
}

private fun registerEngineTypeMethodForHSlider(): Unit {
}

private fun registerEngineTypeMethodForHSplitContainer(): Unit {
}

private fun registerEngineTypeMethodForHTTPClient(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_body_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_headers_as_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "has_response")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "is_response_chunked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "query_string_from_dict")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "read_response_body_chunk")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "request_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "is_blocking_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_blocking_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_read_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_read_chunk_size")
}

private fun registerEngineTypeMethodForHTTPRequest(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "_redirect_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "_request_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "cancel_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_body_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_downloaded_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_http_client_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "request_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_body_size_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_body_size_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_download_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_download_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_download_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_download_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_max_redirects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_max_redirects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "is_using_threads")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_use_threads")
}

private fun registerEngineTypeMethodForHashingContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "update")
}

private fun registerEngineTypeMethodForHeightMapShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "get_map_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "set_map_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "get_map_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "set_map_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "get_map_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE to "set_map_width")
}

private fun registerEngineTypeMethodForHingeJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "_get_lower_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "_get_upper_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "_set_lower_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "_set_upper_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT to "set_param")
}

private fun registerEngineTypeMethodForIP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "clear_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "erase_resolve_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_local_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_local_interfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname_queue_item")
}

private fun registerEngineTypeMethodForImage(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blend_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blend_rect_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blit_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blit_rect_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "bumpmap_to_normalmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "clear_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "convert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "copy_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "create_from_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "crop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "decompress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "detect_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "expand_x2_hq2x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "fill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "fix_alpha_edges")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "flip_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "flip_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_mipmap_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_pixelv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_used_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_invisible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_bmp_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_jpg_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_png_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_tga_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_webp_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "normalmap_to_xy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "premultiply_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "resize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "resize_to_po2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "rgbe_to_srgb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_exr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_png")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_png_to_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "set_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "set_pixelv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "shrink_x2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "srgb_to_linear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "unlock")
}

private fun registerEngineTypeMethodForImageTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "_reload_hook")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "create_from_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "get_lossy_storage_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_lossy_storage_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "get_storage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_storage")
}

private fun registerEngineTypeMethodForImmediateGeometry(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "add_sphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "add_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "set_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "set_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "set_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEGEOMETRY to "set_uv2")
}

private fun registerEngineTypeMethodForInput(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "action_press")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "action_release")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "add_joy_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "flush_buffered_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_accelerometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_action_raw_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_action_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_connected_joypads")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_current_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_gyroscope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_axis_index_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_axis_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_button_index_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_button_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_guid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_vibration_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_vibration_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_last_mouse_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_magnetometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_mouse_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_mouse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_just_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_just_released")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_joy_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_joy_known")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_key_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_mouse_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "joy_connection_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "parse_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "remove_joy_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_accelerometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_custom_mouse_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_gyroscope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_magnetometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_mouse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_use_accumulated_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "start_joy_vibration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "stop_joy_vibration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "vibrate_handheld")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "warp_mouse_position")
}

private fun registerEngineTypeMethodForInputEvent(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "accumulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "as_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "get_action_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_released")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_echo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "shortcut_match")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "xformed_by")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "set_device")
}

private fun registerEngineTypeMethodForInputEventAction(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "get_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "get_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_strength")
}

private fun registerEngineTypeMethodForInputEventGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTGESTURE to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTGESTURE to "set_position")
}

private fun registerEngineTypeMethodForInputEventJoypadButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "get_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_pressure")
}

private fun registerEngineTypeMethodForInputEventJoypadMotion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "set_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "get_axis_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "set_axis_value")
}

private fun registerEngineTypeMethodForInputEventKey(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to
      "get_physical_scancode_with_modifiers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_scancode_with_modifiers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_echo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_physical_scancode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_physical_scancode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_scancode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_scancode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_unicode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_unicode")
}

private fun registerEngineTypeMethodForInputEventMIDI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_controller_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_controller_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_controller_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_controller_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_instrument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_instrument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_velocity")
}

private fun registerEngineTypeMethodForInputEventMagnifyGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMAGNIFYGESTURE to "get_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMAGNIFYGESTURE to "set_factor")
}

private fun registerEngineTypeMethodForInputEventMouse(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_position")
}

private fun registerEngineTypeMethodForInputEventMouseButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "get_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "is_doubleclick")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_doubleclick")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "get_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_pressed")
}

private fun registerEngineTypeMethodForInputEventMouseMotion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_tilt")
}

private fun registerEngineTypeMethodForInputEventPanGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTPANGESTURE to "get_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTPANGESTURE to "set_delta")
}

private fun registerEngineTypeMethodForInputEventScreenDrag(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_speed")
}

private fun registerEngineTypeMethodForInputEventScreenTouch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_pressed")
}

private fun registerEngineTypeMethodForInputEventWithModifiers(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "get_alt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_alt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "get_command")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_command")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "get_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "get_metakey")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_metakey")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "get_shift")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_shift")
}

private fun registerEngineTypeMethodForInputMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_add_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_erase_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_erase_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_get_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_has_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_set_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "add_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "erase_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "event_is_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "get_action_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "get_actions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "has_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "load_from_globals")
}

private fun registerEngineTypeMethodForInstancePlaceholder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "create_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "get_instance_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "get_stored_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "replace_by_instance")
}

private fun registerEngineTypeMethodForInterpolatedCamera(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "is_interpolation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "set_interpolation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "get_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "set_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "get_target_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INTERPOLATEDCAMERA to "set_target_path")
}

private fun registerEngineTypeMethodForItemList(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "_get_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "_scroll_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "_set_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "ensure_current_is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_custom_fg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_selected_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_anything_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_icon_transposed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "move_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_custom_fg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_transposed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "sort_items_by_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "unselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "unselect_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "has_auto_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_auto_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_fixed_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_fixed_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_fixed_icon_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_fixed_icon_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_icon_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_icon_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_icon_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_icon_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_max_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_max_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_max_text_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_max_text_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_same_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_same_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_select_mode")
}

private fun registerEngineTypeMethodForJNISingleton(): Unit {
}

private fun registerEngineTypeMethodForJSONParseResult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "get_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "set_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "get_error_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "set_error_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "get_error_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "set_error_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "get_result")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONPARSERESULT to "set_result")
}

private fun registerEngineTypeMethodForJSONRPC(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_response")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_response_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "process_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "process_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "set_scope")
}

private fun registerEngineTypeMethodForJavaClass(): Unit {
}

private fun registerEngineTypeMethodForJavaClassWrapper(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVACLASSWRAPPER to "wrap")
}

private fun registerEngineTypeMethodForJavaScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPT to "create_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPT to "create_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPT to "download_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPT to "eval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPT to "get_interface")
}

private fun registerEngineTypeMethodForJavaScriptObject(): Unit {
}

private fun registerEngineTypeMethodForJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "get_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "set_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "get_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "set_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "get_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "set_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "get_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT to "set_solver_priority")
}

private fun registerEngineTypeMethodForJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_node_b")
}

private fun registerEngineTypeMethodForKinematicBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "_direct_state_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_floor_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_floor_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_floor_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_last_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_slide_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "is_on_ceiling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "is_on_floor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "is_on_wall")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "move_and_collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "move_and_slide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "move_and_slide_with_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "test_move")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "is_sync_to_physics_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_sync_to_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY to "set_axis_lock")
}

private fun registerEngineTypeMethodForKinematicBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "_direct_state_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_floor_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_floor_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_floor_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_last_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_slide_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "is_on_ceiling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "is_on_floor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "is_on_wall")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "move_and_collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "move_and_slide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "move_and_slide_with_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "test_move")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "get_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "set_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "is_sync_to_physics_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICBODY2D to "set_sync_to_physics")
}

private fun registerEngineTypeMethodForKinematicCollision(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION to "get_travel")
}

private fun registerEngineTypeMethodForKinematicCollision2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_travel")
}

private fun registerEngineTypeMethodForKotlinScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KOTLINSCRIPT to "new")
}

private fun registerEngineTypeMethodForLabel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_line_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_total_character_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "has_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "is_clipping_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_lines_skipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_lines_skipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_percent_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_percent_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "is_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_valign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_valign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_visible_characters")
}

private fun registerEngineTypeMethodForLargeTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "add_piece")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "get_piece_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "get_piece_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "get_piece_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "set_piece_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "set_piece_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LARGETEXTURE to "set_size")
}

private fun registerEngineTypeMethodForLight(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "is_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "is_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "has_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "get_shadow_reverse_cull_face")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT to "set_shadow_reverse_cull_face")
}

private fun registerEngineTypeMethodForLight2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_layer_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_layer_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_layer_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_layer_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_z_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_z_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_z_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_z_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_gradient_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_gradient_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_texture_scale")
}

private fun registerEngineTypeMethodForLightOccluder2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "_poly_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "get_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "set_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "get_occluder_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "set_occluder_polygon")
}

private fun registerEngineTypeMethodForLine2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "_curve_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "_gradient_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_begin_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_begin_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_default_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_default_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_end_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_end_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_joint_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_joint_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_round_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_round_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_sharp_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_sharp_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_texture_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_texture_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_curve")
}

private fun registerEngineTypeMethodForLineEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "_editor_settings_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "_text_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "_toggle_draw_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "append_at_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "delete_char_at_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "delete_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "menu_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "select_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "cursor_get_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "cursor_set_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "cursor_get_blink_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "cursor_set_blink_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_cursor_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_cursor_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_clear_button_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_clear_button_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_expand_to_text_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_expand_to_text_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_placeholder_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_placeholder_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_right_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_right_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_secret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_secret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_secret_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_secret_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_virtual_keyboard_enabled")
}

private fun registerEngineTypeMethodForLineShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINESHAPE2D to "get_d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINESHAPE2D to "set_d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINESHAPE2D to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINESHAPE2D to "set_normal")
}

private fun registerEngineTypeMethodForLinkButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_underline_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_underline_mode")
}

private fun registerEngineTypeMethodForListener(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER to "get_listener_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER to "make_current")
}

private fun registerEngineTypeMethodForListener2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER2D to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER2D to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LISTENER2D to "make_current")
}

private fun registerEngineTypeMethodForMainLoop(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_drop_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_finalize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_global_menu_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_idle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_input_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_iteration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "idle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "input_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "iteration")
}

private fun registerEngineTypeMethodForMarginContainer(): Unit {
}

private fun registerEngineTypeMethodForMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "get_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "set_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "get_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "set_render_priority")
}

private fun registerEngineTypeMethodForMenuButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "_get_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "_set_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "set_disable_shortcuts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "is_switch_on_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "set_switch_on_hover")
}

private fun registerEngineTypeMethodForMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_convex_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_trimesh_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "generate_triangle_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_lightmap_size_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "set_lightmap_size_hint")
}

private fun registerEngineTypeMethodForMeshDataTool(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "commit_to_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "create_from_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_edge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_edges")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_edge_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_face_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_weights")
}

private fun registerEngineTypeMethodForMeshInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "_mesh_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "_update_skinning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "create_convex_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "create_debug_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "create_multiple_convex_collisions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "create_trimesh_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_active_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_surface_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_surface_material_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "set_surface_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_skeleton_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "set_skeleton_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to
      "is_software_skinning_transform_normals_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE to
      "set_software_skinning_transform_normals")
}

private fun registerEngineTypeMethodForMeshInstance2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "set_texture")
}

private fun registerEngineTypeMethodForMeshLibrary(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "create_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "find_item_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_navmesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_navmesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_last_unused_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_navmesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_navmesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_shapes")
}

private fun registerEngineTypeMethodForMeshTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_base_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_base_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_image_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_image_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_mesh")
}

private fun registerEngineTypeMethodForMobileVRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_display_to_lens")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_display_to_lens")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_display_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_display_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_eye_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_eye_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_iod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_iod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_k1")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_k1")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_k2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_k2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_oversample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_oversample")
}

private fun registerEngineTypeMethodForMultiMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_get_color_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_get_custom_data_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_get_transform_2d_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_get_transform_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_set_color_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_set_custom_data_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_set_transform_2d_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "_set_transform_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_as_bulk_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_color_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_color_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_custom_data_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_custom_data_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_transform_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_transform_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_visible_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_visible_instance_count")
}

private fun registerEngineTypeMethodForMultiMeshInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE to "get_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE to "set_multimesh")
}

private fun registerEngineTypeMethodForMultiMeshInstance2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "get_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "set_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "set_texture")
}

private fun registerEngineTypeMethodForMultiplayerAPI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "_add_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "_connected_to_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "_connection_failed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "_del_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "_server_disconnected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_network_connected_peers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_network_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_rpc_sender_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "has_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "is_network_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "send_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "is_object_decoding_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "set_allow_object_decoding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "set_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to
      "is_refusing_new_network_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to
      "set_refuse_new_network_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_root_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "set_root_node")
}

private fun registerEngineTypeMethodForMultiplayerPeerGDNative(): Unit {
}

private fun registerEngineTypeMethodForNativeScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_class_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_method_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_property_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_signal_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "new")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_class_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "set_class_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "set_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_script_class_icon_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "set_script_class_icon_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "get_script_class_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NATIVESCRIPT to "set_script_class_name")
}

private fun registerEngineTypeMethodForNavigation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_closest_point_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_closest_point_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_closest_point_to_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_simple_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "navmesh_add")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "navmesh_remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "navmesh_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "get_up_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION to "set_up_vector")
}

private fun registerEngineTypeMethodForNavigation2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "get_closest_point_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "get_simple_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "navpoly_add")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "navpoly_remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATION2D to "navpoly_set_transform")
}

private fun registerEngineTypeMethodForNavigationMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "_get_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "_set_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "clear_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "create_from_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_polygon_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_max_climb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_max_climb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_max_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_max_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_cell_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_cell_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_detail_sample_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_detail_sample_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_detail_sample_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_detail_sample_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_edge_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_edge_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_edge_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_edge_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to
      "get_filter_walkable_low_height_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to
      "set_filter_walkable_low_height_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_ledge_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_ledge_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_low_hanging_obstacles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_low_hanging_obstacles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_parsed_geometry_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_parsed_geometry_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_source_geometry_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_source_geometry_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_source_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_source_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_verts_per_poly")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_verts_per_poly")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_region_merge_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_region_merge_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_region_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_region_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_sample_partition_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_sample_partition_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_vertices")
}

private fun registerEngineTypeMethodForNavigationMeshInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHINSTANCE to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHINSTANCE to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHINSTANCE to "get_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHINSTANCE to "set_navigation_mesh")
}

private fun registerEngineTypeMethodForNavigationPolygon(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "_get_outlines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "_get_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "_set_outlines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "_set_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_outline_at_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "clear_outlines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "clear_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_outline_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_polygon_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "make_polygons_from_outlines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "remove_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "set_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "set_vertices")
}

private fun registerEngineTypeMethodForNavigationPolygonInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGONINSTANCE to "_navpoly_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGONINSTANCE to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGONINSTANCE to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGONINSTANCE to
      "get_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGONINSTANCE to
      "set_navigation_polygon")
}

private fun registerEngineTypeMethodForNetworkedMultiplayerENet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "close_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "create_client")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "create_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "disconnect_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to
      "get_last_packet_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_packet_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_peer_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_peer_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_bind_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_dtls_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_dtls_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_peer_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "is_always_ordered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_always_ordered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_channel_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_channel_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_compression_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_compression_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_dtls_hostname")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_dtls_hostname")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "is_dtls_verify_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to
      "set_dtls_verify_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to
      "is_server_relay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to
      "set_server_relay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "get_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "is_dtls_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERENET to "set_dtls_enabled")
}

private fun registerEngineTypeMethodForNetworkedMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "get_connection_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "get_packet_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "set_target_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to
      "is_refusing_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to
      "set_refuse_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "get_transfer_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NETWORKEDMULTIPLAYERPEER to "set_transfer_mode")
}

private fun registerEngineTypeMethodForNinePatchRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_texture")
}

private fun registerEngineTypeMethodForNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_get_configuration_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_get_editor_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_get_import_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_physics_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_set_editor_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_set_import_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_child_below_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_to_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "can_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "duplicate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "find_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "find_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_child_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_groups")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_network_master")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node_and_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node_or_null")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_path_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_physics_process_delta_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_position_in_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_process_delta_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_scene_instance_load_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "has_node_and_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_a_parent_of")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_displayed_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_greater_than")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_inside_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_network_master")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_physics_processing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_physics_processing_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "move_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_stray_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_tree_pretty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "propagate_call")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "propagate_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "queue_free")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "raise")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "remove_and_skip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "remove_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "remove_from_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "replace_by")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "request_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_unreliable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_unreliable_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rset_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rset_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rset_unreliable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rset_unreliable_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_display_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_network_master")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_physics_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_physics_process_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_scene_instance_load_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "update_configuration_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_custom_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_custom_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_filename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_filename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_pause_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_pause_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_process_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_priority")
}

private fun registerEngineTypeMethodForNode2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "apply_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_angle_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_relative_transform_to_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "global_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "look_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "move_local_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "move_local_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "to_global")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "is_z_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_z_as_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_z_index")
}

private fun registerEngineTypeMethodForNoiseTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "_generate_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "_queue_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "_thread_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "_update_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "is_normalmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_as_normalmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "get_bump_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_bump_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "get_noise")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_noise")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "get_noise_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_noise_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "get_seamless")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_seamless")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE to "set_width")
}

private fun registerEngineTypeMethodForObject(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_get_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "_to_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "add_user_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "call")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "call_deferred")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "callv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "can_translate_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "connect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "disconnect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "emit_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_incoming_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_indexed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_meta_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_signal_connection_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_user_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_blocking_signals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_queued_for_deletion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "property_list_changed_notify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "remove_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_block_signals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_deferred")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_indexed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_message_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "to_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "tr")
}

private fun registerEngineTypeMethodForOccluder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDER to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDER to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDER to "set_shape")
}

private fun registerEngineTypeMethodForOccluderPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "is_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "get_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_polygon")
}

private fun registerEngineTypeMethodForOccluderShape(): Unit {
}

private fun registerEngineTypeMethodForOccluderShapeSphere(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERSHAPESPHERE to "set_sphere_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERSHAPESPHERE to "set_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERSHAPESPHERE to "get_spheres")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERSHAPESPHERE to "set_spheres")
}

private fun registerEngineTypeMethodForOmniLight(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT to "get_shadow_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT to "set_shadow_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT to "get_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT to "set_shadow_mode")
}

private fun registerEngineTypeMethodForOpenSimplexNoise(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_1d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_2dv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_3dv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_noise_4d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_seamless_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "set_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "set_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_period")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "set_period")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_persistence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "set_persistence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "get_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPENSIMPLEXNOISE to "set_seed")
}

private fun registerEngineTypeMethodForOptionButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "_focused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "_get_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "_select_int")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "_set_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected")
}

private fun registerEngineTypeMethodForPCKPacker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "add_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "flush")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "pck_start")
}

private fun registerEngineTypeMethodForPHashTranslation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHASHTRANSLATION to "generate")
}

private fun registerEngineTypeMethodForPackedDataContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "_iter_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "_iter_init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "_iter_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "pack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "size")
}

private fun registerEngineTypeMethodForPackedDataContainerRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "_is_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "_iter_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "_iter_init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "_iter_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "size")
}

private fun registerEngineTypeMethodForPackedScene(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "_get_bundled_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "_set_bundled_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "can_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "pack")
}

private fun registerEngineTypeMethodForPackedSceneGLTF(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENEGLTF to "export_gltf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENEGLTF to "import_gltf_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENEGLTF to "pack_gltf")
}

private fun registerEngineTypeMethodForPacketPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_available_packet_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_packet_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "put_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "put_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "is_object_decoding_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "set_allow_object_decoding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_encode_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "set_encode_buffer_max_size")
}

private fun registerEngineTypeMethodForPacketPeerDTLS(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "connect_to_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "disconnect_from_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "poll")
}

private fun registerEngineTypeMethodForPacketPeerGDNative(): Unit {
}

private fun registerEngineTypeMethodForPacketPeerStream(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_input_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_input_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_output_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_output_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_stream_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_stream_peer")
}

private fun registerEngineTypeMethodForPacketPeerUDP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "get_packet_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "get_packet_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "is_connected_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "join_multicast_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "leave_multicast_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "set_broadcast_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "set_dest_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "wait")
}

private fun registerEngineTypeMethodForPanel(): Unit {
}

private fun registerEngineTypeMethodForPanelContainer(): Unit {
}

private fun registerEngineTypeMethodForPanoramaSky(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKY to "get_panorama")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKY to "set_panorama")
}

private fun registerEngineTypeMethodForParallaxBackground(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "_camera_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_base_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_base_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "is_ignore_camera_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_ignore_camera_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_limit_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_limit_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_limit_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_limit_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_offset")
}

private fun registerEngineTypeMethodForParallaxLayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_mirroring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_mirroring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_motion_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_motion_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_motion_scale")
}

private fun registerEngineTypeMethodForParticles(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "capture_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "get_visibility_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES to "set_visibility_aabb")
}

private fun registerEngineTypeMethodForParticles2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "capture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "get_visibility_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLES2D to "set_visibility_rect")
}

private fun registerEngineTypeMethodForParticlesMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_point_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_point_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to
      "get_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to
      "set_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_param_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_trail_color_modifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_trail_color_modifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_trail_divisor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_trail_divisor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "get_trail_size_modifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLESMATERIAL to "set_trail_size_modifier")
}

private fun registerEngineTypeMethodForPath(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH to "_curve_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH to "set_curve")
}

private fun registerEngineTypeMethodForPath2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH2D to "_curve_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH2D to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH2D to "set_curve")
}

private fun registerEngineTypeMethodForPathFollow(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_rotation_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_rotation_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_unit_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_unit_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW to "set_v_offset")
}

private fun registerEngineTypeMethodForPathFollow2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_lookahead")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_lookahead")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "is_rotating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_unit_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_unit_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_v_offset")
}

private fun registerEngineTypeMethodForPerformance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "get_monitor")
}

private fun registerEngineTypeMethodForPhysicalBone(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "_direct_state_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_bone_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_simulate_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "is_simulating_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "is_static_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_body_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_body_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_joint_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_joint_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_joint_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_joint_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "get_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE to "set_weight")
}

private fun registerEngineTypeMethodForPhysics2DDirectBodyState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_shape_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_space_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to
      "get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTBODYSTATE to "set_transform")
}

private fun registerEngineTypeMethodForPhysics2DDirectBodyStateSW(): Unit {
}

private fun registerEngineTypeMethodForPhysics2DDirectSpaceState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "get_rest_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "intersect_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to
      "intersect_point_on_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DDIRECTSPACESTATE to "intersect_shape")
}

private fun registerEngineTypeMethodForPhysics2DServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_attach_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_area_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "area_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_attach_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to
      "body_get_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_shape_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to
      "body_is_omitting_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_remove_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to
      "body_set_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to
      "body_set_force_integration_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_omit_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to
      "body_set_shape_as_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_shape_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "body_test_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "capsule_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "circle_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "concave_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "convex_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "damped_spring_joint_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "damped_string_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "damped_string_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "get_process_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "groove_joint_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "joint_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "line_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "pin_joint_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "ray_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "rectangle_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "segment_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "set_collision_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "shape_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "shape_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "shape_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSERVER to "space_set_param")
}

private fun registerEngineTypeMethodForPhysics2DShapeQueryParameters(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to
      "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "get_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DSHAPEQUERYPARAMETERS to "set_transform")
}

private fun registerEngineTypeMethodForPhysics2DTestMotionResult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collision_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to
      "get_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to
      "get_collision_unsafe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICS2DTESTMOTIONRESULT to "get_motion_remainder")
}

private fun registerEngineTypeMethodForPhysicsBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY to "_get_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY to "_set_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY to "remove_collision_exception_with")
}

private fun registerEngineTypeMethodForPhysicsBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "_get_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "_set_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "remove_collision_exception_with")
}

private fun registerEngineTypeMethodForPhysicsDirectBodyState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_space_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to
      "get_principal_inertia_axes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE to "set_transform")
}

private fun registerEngineTypeMethodForPhysicsDirectSpaceState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE to "cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE to "collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE to "get_rest_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE to "intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE to "intersect_shape")
}

private fun registerEngineTypeMethodForPhysicsMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "is_absorbent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_absorbent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "is_rough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_rough")
}

private fun registerEngineTypeMethodForPhysicsServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_is_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_area_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "area_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_kinematic_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_is_axis_locked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to
      "body_is_continuous_collision_detection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to
      "body_is_omitting_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_is_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_remove_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to
      "body_set_enable_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to
      "body_set_force_integration_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_kinematic_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_omit_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "body_test_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "cone_twist_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "cone_twist_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "generic_6dof_joint_get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "generic_6dof_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "generic_6dof_joint_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "generic_6dof_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "get_process_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "hinge_joint_get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "hinge_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "hinge_joint_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "hinge_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_create_cone_twist")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_create_generic_6dof")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_create_hinge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_create_pin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_create_slider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_get_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "joint_set_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_get_local_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_get_local_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_set_local_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_set_local_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "pin_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "set_collision_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "shape_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "shape_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "shape_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "slider_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "slider_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER to "space_set_param")
}

private fun registerEngineTypeMethodForPhysicsShapeQueryParameters(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to
      "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "get_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS to "set_transform")
}

private fun registerEngineTypeMethodForPhysicsTestMotionResult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collision_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to
      "get_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to
      "get_collision_unsafe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT to "get_motion_remainder")
}

private fun registerEngineTypeMethodForPinJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT to "set_param")
}

private fun registerEngineTypeMethodForPinJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT2D to "get_softness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT2D to "set_softness")
}

private fun registerEngineTypeMethodForPlaneMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_subdivide_width")
}

private fun registerEngineTypeMethodForPlaneShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANESHAPE to "get_plane")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANESHAPE to "set_plane")
}

private fun registerEngineTypeMethodForPluginScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLUGINSCRIPT to "new")
}

private fun registerEngineTypeMethodForPointMesh(): Unit {
}

private fun registerEngineTypeMethodForPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "_get_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "_set_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "_skeleton_bone_setup_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "add_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "clear_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "erase_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_bone_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_bone_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_internal_vertex_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_internal_vertex_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_invert_border")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_invert_border")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_vertex_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_vertex_colors")
}

private fun registerEngineTypeMethodForPolygonPathFinder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "find_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_intersections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_point_penalty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "is_point_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "set_point_penalty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "setup")
}

private fun registerEngineTypeMethodForPopup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "popup_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "popup_centered_clamped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "popup_centered_minsize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "popup_centered_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "set_as_minsize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "is_exclusive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUP to "set_exclusive")
}

private fun registerEngineTypeMethodForPopupDialog(): Unit {
}

private fun registerEngineTypeMethodForPopupMenu(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "_get_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "_set_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "_submenu_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_radio_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_multistate_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_radio_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_submenu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_current_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_window_lose_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_shortcut_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_window_lose_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_multistate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_shortcut_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "toggle_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "toggle_item_multistate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_allow_search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_allow_search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_checkable_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_checkable_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_state_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_state_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_submenu_popup_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_submenu_popup_delay")
}

private fun registerEngineTypeMethodForPopupPanel(): Unit {
}

private fun registerEngineTypeMethodForPortal(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "get_linked_room")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_linked_room")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "get_portal_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_portal_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "get_portal_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_portal_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "is_two_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_two_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "get_use_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTAL to "set_use_default_margin")
}

private fun registerEngineTypeMethodForPosition2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POSITION2D to "_get_gizmo_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POSITION2D to "_set_gizmo_extents")
}

private fun registerEngineTypeMethodForPosition3D(): Unit {
}

private fun registerEngineTypeMethodForPrimitiveMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_mesh_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_flip_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_flip_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_material")
}

private fun registerEngineTypeMethodForPrismMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_left_to_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_left_to_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_width")
}

private fun registerEngineTypeMethodForProceduralSky(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "_thread_done")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "_update_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_ground_bottom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_ground_bottom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_ground_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_ground_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_ground_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_ground_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_ground_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_ground_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sky_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sky_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sky_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sky_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sky_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sky_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sky_top_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sky_top_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_latitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_latitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_sun_longitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_sun_longitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "get_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKY to "set_texture_size")
}

private fun registerEngineTypeMethodForProgressBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "is_percent_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "set_percent_visible")
}

private fun registerEngineTypeMethodForProjectSettings(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "add_property_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "get_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "get_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "globalize_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "has_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "load_resource_pack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "localize_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "property_can_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "property_get_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "save_custom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_initial_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_setting")
}

private fun registerEngineTypeMethodForProximityGroup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "_proximity_group_broadcast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "broadcast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "get_dispatch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "set_dispatch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "get_grid_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "set_grid_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "get_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXIMITYGROUP to "set_group_name")
}

private fun registerEngineTypeMethodForProxyTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXYTEXTURE to "get_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROXYTEXTURE to "set_base")
}

private fun registerEngineTypeMethodForQuadMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADMESH to "get_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADMESH to "set_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADMESH to "set_size")
}

private fun registerEngineTypeMethodForRandomNumberGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randf_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randfn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randi")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randi_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randomize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "get_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "set_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "set_state")
}

private fun registerEngineTypeMethodForRange(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "share")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "unshare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_greater_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_allow_greater")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_lesser_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_allow_lesser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_ratio_exp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_exp_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_page")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_page")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_as_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_as_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_using_rounded_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_use_rounded_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_value")
}

private fun registerEngineTypeMethodForRayCast(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "force_raycast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_cast_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_cast_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_debug_shape_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_debug_shape_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_debug_shape_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_debug_shape_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST to "set_exclude_parent_body")
}

private fun registerEngineTypeMethodForRayCast2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "force_raycast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_cast_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_cast_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_exclude_parent_body")
}

private fun registerEngineTypeMethodForRayShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE to "get_slips_on_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE to "set_slips_on_slope")
}

private fun registerEngineTypeMethodForRayShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE2D to "get_slips_on_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYSHAPE2D to "set_slips_on_slope")
}

private fun registerEngineTypeMethodForRectangleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RECTANGLESHAPE2D to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RECTANGLESHAPE2D to "set_extents")
}

private fun registerEngineTypeMethodForReference(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCE to "init_ref")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCE to "reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCE to "unreference")
}

private fun registerEngineTypeMethodForReferenceRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_editor_only")
}

private fun registerEngineTypeMethodForReflectionProbe(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "is_box_projection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_enable_box_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "are_shadows_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_enable_shadows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_interior_ambient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_interior_ambient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to
      "get_interior_ambient_probe_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to
      "set_interior_ambient_probe_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_interior_ambient_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_interior_ambient_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "is_set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_update_mode")
}

private fun registerEngineTypeMethodForRegEx(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "compile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_group_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "search_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "sub")
}

private fun registerEngineTypeMethodForRegExMatch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_group_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_strings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_subject")
}

private fun registerEngineTypeMethodForRemoteTransform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "force_update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "get_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "set_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "get_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "set_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "get_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "set_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "get_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "set_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "get_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM to "set_use_global_coordinates")
}

private fun registerEngineTypeMethodForRemoteTransform2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "force_update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_use_global_coordinates")
}

private fun registerEngineTypeMethodForResource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "_setup_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "duplicate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "emit_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_local_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "setup_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "take_over_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "is_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_path")
}

private fun registerEngineTypeMethodForResourceFormatLoader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "get_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "get_resource_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "handles_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "rename_dependencies")
}

private fun registerEngineTypeMethodForResourceFormatSaver(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "recognize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "save")
}

private fun registerEngineTypeMethodForResourceImporter(): Unit {
}

private fun registerEngineTypeMethodForResourceInteractiveLoader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEINTERACTIVELOADER to "get_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEINTERACTIVELOADER to "get_stage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEINTERACTIVELOADER to "get_stage_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEINTERACTIVELOADER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEINTERACTIVELOADER to "wait")
}

private fun registerEngineTypeMethodForResourcePreloader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "_get_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "_set_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "add_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "get_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "get_resource_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "has_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "remove_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "rename_resource")
}

private fun registerEngineTypeMethodForRichTextEffect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTEFFECT to "_process_custom_fx")
}

private fun registerEngineTypeMethodForRichTextLabel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "_scroll_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "add_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "add_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "append_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_content_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_total_character_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "install_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "newline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "parse_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "parse_expressions_for_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "pop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_bold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_bold_italics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_indent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_italics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_mono")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_strikethrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_table")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_underline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "remove_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "scroll_to_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_table_column_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_using_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_use_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_fit_content_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_fit_content_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_meta_underlined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_meta_underline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_overriding_selected_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_override_selected_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_percent_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_percent_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_scroll_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_scroll_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_scroll_following")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_scroll_follow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_visible_characters")
}

private fun registerEngineTypeMethodForRigidBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "_body_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "_direct_state_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "_reload_physics_characteristics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_colliding_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_inverse_inertia_tensor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "is_able_to_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_can_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "is_contact_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_contact_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to
      "is_using_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to
      "set_use_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "is_using_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_use_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "get_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY to "set_weight")
}

private fun registerEngineTypeMethodForRigidBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_body_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_body_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_direct_state_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_reload_physics_characteristics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_colliding_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "test_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_applied_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_applied_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_applied_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_applied_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_able_to_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_can_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_contact_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_contact_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to
      "get_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to
      "set_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_using_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_use_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_weight")
}

private fun registerEngineTypeMethodForRoom(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "set_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "get_room_simplify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "set_room_simplify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "get_use_default_simplify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOM to "set_use_default_simplify")
}

private fun registerEngineTypeMethodForRoomGroup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMGROUP to "get_roomgroup_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMGROUP to "set_roomgroup_priority")
}

private fun registerEngineTypeMethodForRoomManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "rooms_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "rooms_convert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "rooms_get_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "rooms_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_debug_sprawl")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_debug_sprawl")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_default_portal_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_default_portal_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_gameplay_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_gameplay_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_merge_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_merge_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_overlap_warning_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_overlap_warning_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_portal_depth_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_portal_depth_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_preview_camera_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_preview_camera_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_pvs_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_pvs_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_room_simplify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_room_simplify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_roomlist_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_roomlist_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_show_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_show_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "get_use_secondary_pvs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOMMANAGER to "set_use_secondary_pvs")
}

private fun registerEngineTypeMethodForRootMotionView(): Unit {
}

private fun registerEngineTypeMethodForSceneState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_groups")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_instance_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_owner_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "is_node_instance_placeholder")
}

private fun registerEngineTypeMethodForSceneTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_change_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_connected_to_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_connection_failed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_network_peer_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_network_peer_disconnected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "_server_disconnected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "call_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "call_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "change_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "change_scene_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "create_timer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_network_connected_peers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_network_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_node_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_nodes_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_rpc_sender_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "has_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "has_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_input_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_network_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "notify_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "notify_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "queue_delete")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "quit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "reload_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_auto_accept_quit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_input_as_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_quit_on_go_back")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_screen_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_debugging_collisions_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_debug_collisions_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_debugging_navigation_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_debug_navigation_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_multiplayer_poll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_multiplayer_poll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_network_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_refusing_new_network_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_refuse_new_network_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_using_font_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_use_font_oversampling")
}

private fun registerEngineTypeMethodForSceneTreeTimer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREETIMER to "get_time_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREETIMER to "set_time_left")
}

private fun registerEngineTypeMethodForScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "can_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_instance_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_property_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_constant_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "has_script_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "has_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "instance_has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "is_tool")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "reload")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "set_source_code")
}

private fun registerEngineTypeMethodForScriptCreateDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_browse_class_in_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_browse_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_built_in_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_class_name_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_file_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_lang_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_parent_name_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_path_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_path_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_path_hbox_sorted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "_template_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "config")
}

private fun registerEngineTypeMethodForScriptEditor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_add_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_autosave_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_breaked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_clear_execution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_close_all_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_close_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_close_discard_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_close_docs_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_close_other_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_copy_script_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_editor_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_editor_play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_editor_settings_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_editor_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_file_dialog_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_filter_methods_text_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_filter_scripts_text_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_get_debug_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_goto_script_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_goto_script_line2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_help_class_goto")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_help_class_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_help_overview_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_help_search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_history_back")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_history_forward")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_live_auto_reload_running_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_members_overview_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_menu_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_on_find_in_files_modified_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_on_find_in_files_requested")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_on_find_in_files_result_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_open_recent_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_queue_close_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_reload_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_request_help")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_res_saved_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_resave_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_save_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_script_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_script_created")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_script_list_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_script_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_script_split_dragged")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_set_execution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_show_debugger")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_start_find_in_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_tab_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_theme_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to
      "_toggle_members_overview_alpha_sort")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_tree_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_update_autosave_timer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_update_members_overview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_update_recent_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_update_script_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "_update_script_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "can_drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "drop_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_current_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_drag_data_fw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_open_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "goto_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "open_script_create_dialog")
}

private fun registerEngineTypeMethodForScrollBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "_drag_node_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "_drag_node_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "get_custom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "set_custom_step")
}

private fun registerEngineTypeMethodForScrollContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "_gui_focus_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "_scroll_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "_update_scrollbar_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "ensure_control_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_h_scrollbar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_v_scrollbar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "is_following_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_follow_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "is_h_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_enable_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "is_v_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_enable_v_scroll")
}

private fun registerEngineTypeMethodForSegmentShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "get_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "set_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "get_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "set_b")
}

private fun registerEngineTypeMethodForSeparator(): Unit {
}

private fun registerEngineTypeMethodForShader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_default_texture_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "has_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "set_default_texture_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "set_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_custom_defines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "set_custom_defines")
}

private fun registerEngineTypeMethodForShaderMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "_shader_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "get_shader_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "property_can_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "property_get_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "set_shader_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "get_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "set_shader")
}

private fun registerEngineTypeMethodForShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE to "get_debug_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE to "set_margin")
}

private fun registerEngineTypeMethodForShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_and_get_contacts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_with_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_with_motion_and_get_contacts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "get_custom_solver_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "set_custom_solver_bias")
}

private fun registerEngineTypeMethodForShortCut(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "get_as_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "is_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "get_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "set_shortcut")
}

private fun registerEngineTypeMethodForSkeleton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "add_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "bind_child_node_to_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "clear_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "clear_bones_global_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "find_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_custom_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_global_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_global_pose_no_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bone_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "get_bound_child_nodes_to_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "is_bone_rest_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "localize_rests")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "physical_bones_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to
      "physical_bones_remove_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "physical_bones_start_simulation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "physical_bones_stop_simulation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "register_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_custom_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_disable_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_global_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "set_bone_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "unbind_child_node_from_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON to "unparent_bone_and_rest")
}

private fun registerEngineTypeMethodForSkeleton2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "_update_bone_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "_update_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_skeleton")
}

private fun registerEngineTypeMethodForSkeletonIK(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_parent_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "is_running")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_max_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_max_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "is_override_tip_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_override_tip_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_target_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_target_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "get_tip_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_tip_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "is_using_magnet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK to "set_use_magnet")
}

private fun registerEngineTypeMethodForSkin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "add_bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "clear_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_pose")
}

private fun registerEngineTypeMethodForSkinReference(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKINREFERENCE to "_skin_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKINREFERENCE to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKINREFERENCE to "get_skin")
}

private fun registerEngineTypeMethodForSky(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "get_radiance_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "set_radiance_size")
}

private fun registerEngineTypeMethodForSlider(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "is_scrollable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_scrollable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "get_ticks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_ticks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "get_ticks_on_borders")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_ticks_on_borders")
}

private fun registerEngineTypeMethodForSliderJoint(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "_get_lower_limit_angular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "_get_upper_limit_angular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "_set_lower_limit_angular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "_set_upper_limit_angular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT to "set_param")
}

private fun registerEngineTypeMethodForSoftBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "_draw_soft_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_point_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "is_point_pinned")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "remove_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_point_pinned")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_areaAngular_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_areaAngular_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_damping_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_damping_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_drag_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_drag_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_linear_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_linear_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_parent_collision_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_parent_collision_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "is_physics_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_physics_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_pose_matching_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_pose_matching_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_pressure_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_pressure_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "is_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_simulation_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_simulation_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_total_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_total_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "get_volume_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY to "set_volume_stiffness")
}

private fun registerEngineTypeMethodForSpatial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "_update_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "force_update_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_parent_spatial")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "global_rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "global_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_local_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_scale_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_set_as_toplevel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_visible_in_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "look_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "look_at_from_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "orthonormalize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "rotate_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "rotate_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "rotate_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "rotate_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "scale_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_as_toplevel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_disable_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_identity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_ignore_transform_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_notify_local_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_notify_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "to_global")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "translate_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "update_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "get_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIAL to "set_visible")
}

private fun registerEngineTypeMethodForSpatialGizmo(): Unit {
}

private fun registerEngineTypeMethodForSpatialMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_ao_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_ao_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_ao_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_ao_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_clearcoat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_clearcoat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_clearcoat_gloss")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_clearcoat_gloss")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "is_depth_deep_parallax_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_depth_deep_parallax")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_depth_deep_parallax_flip_binormal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_depth_deep_parallax_flip_binormal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_depth_deep_parallax_flip_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_depth_deep_parallax_flip_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_depth_deep_parallax_max_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_depth_deep_parallax_max_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_depth_deep_parallax_min_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_depth_deep_parallax_min_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_depth_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_depth_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_detail_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_detail_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_detail_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_detail_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_distance_fade_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_distance_fade_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_distance_fade_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_distance_fade_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_emission_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_emission_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_metallic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_metallic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_specular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_specular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_metallic_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_metallic_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_normal_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_normal_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_depth_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_depth_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_diffuse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_diffuse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "is_grow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_grow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_grow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_grow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_point_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_point_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_specular_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_specular_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_proximity_fade_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_proximity_fade_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "is_proximity_fade_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_proximity_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_refraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_refraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_refraction_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_refraction_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_rim")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_rim")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_rim_tint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_rim_tint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_roughness_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_roughness_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_subsurface_scattering_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_subsurface_scattering_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_transmission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_transmission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_uv1_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_uv1_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_uv1_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_uv1_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_uv1_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_uv1_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_uv2_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_uv2_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_uv2_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_uv2_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "get_uv2_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to
      "set_uv2_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALMATERIAL to "set_flag")
}

private fun registerEngineTypeMethodForSpatialVelocityTracker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALVELOCITYTRACKER to
      "get_tracked_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALVELOCITYTRACKER to "reset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALVELOCITYTRACKER to "update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALVELOCITYTRACKER to "is_tracking_physics_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPATIALVELOCITYTRACKER to "set_track_physics_step")
}

private fun registerEngineTypeMethodForSphereMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_is_hemisphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_is_hemisphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_rings")
}

private fun registerEngineTypeMethodForSphereShape(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHERESHAPE to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHERESHAPE to "set_radius")
}

private fun registerEngineTypeMethodForSpinBox(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "_line_edit_focus_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "_line_edit_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "_range_click_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "_text_entered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "apply")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_line_edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_prefix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_prefix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_suffix")
}

private fun registerEngineTypeMethodForSplitContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "clamp_split_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "is_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "get_dragger_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_dragger_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "get_split_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_split_offset")
}

private fun registerEngineTypeMethodForSpotLight(): Unit {
}

private fun registerEngineTypeMethodForSpringArm(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "add_excluded_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "clear_excluded_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "get_hit_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "remove_excluded_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM to "set_length")
}

private fun registerEngineTypeMethodForSprite(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "_texture_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_pixel_opaque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "is_region_filter_clip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_region_filter_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "get_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE to "set_vframes")
}

private fun registerEngineTypeMethodForSprite3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "is_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_vframes")
}

private fun registerEngineTypeMethodForSpriteBase3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "_im_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "_queue_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "generate_triangle_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_item_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_draw_flag")
}

private fun registerEngineTypeMethodForSpriteFrames(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "_get_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "_get_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "_set_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "_set_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "add_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "add_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "clear_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_frame_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "has_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "remove_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "remove_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "rename_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_animation_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_frame")
}

private fun registerEngineTypeMethodForStaticBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "_reload_physics_characteristics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "get_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "set_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "get_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "set_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY to "set_physics_material_override")
}

private fun registerEngineTypeMethodForStaticBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "_reload_physics_characteristics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_physics_material_override")
}

private fun registerEngineTypeMethodForStreamPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_available_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_utf8_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_utf8_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "is_big_endian_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "set_big_endian")
}

private fun registerEngineTypeMethodForStreamPeerBuffer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "duplicate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "resize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_data_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "set_data_array")
}

private fun registerEngineTypeMethodForStreamPeerGDNative(): Unit {
}

private fun registerEngineTypeMethodForStreamPeerSSL(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "accept_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "connect_to_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "disconnect_from_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "is_blocking_handshake_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERSSL to "set_blocking_handshake_enabled")
}

private fun registerEngineTypeMethodForStreamPeerTCP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "disconnect_from_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_connected_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_connected_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "is_connected_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "set_no_delay")
}

private fun registerEngineTypeMethodForStreamTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMTEXTURE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMTEXTURE to "get_load_path")
}

private fun registerEngineTypeMethodForStyleBox(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_center_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_current_item_drawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "test_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin")
}

private fun registerEngineTypeMethodForStyleBoxEmpty(): Unit {
}

private fun registerEngineTypeMethodForStyleBoxFlat(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius_individual")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin_individual")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "is_anti_aliased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_anti_aliased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_aa_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_aa_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_size")
}

private fun registerEngineTypeMethodForStyleBoxLine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_grow_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_grow_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_grow_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_grow_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "is_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_vertical")
}

private fun registerEngineTypeMethodForStyleBoxTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_individual")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_texture")
}

private fun registerEngineTypeMethodForSurfaceTool(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_smooth_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_triangle_fan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "append_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "commit_to_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "create_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "create_from_blend_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "deindex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "generate_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "generate_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_material")
}

private fun registerEngineTypeMethodForTCP_Server(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCP_SERVER to "is_connection_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCP_SERVER to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCP_SERVER to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCP_SERVER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCP_SERVER to "take_connection")
}

private fun registerEngineTypeMethodForTabContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "_child_renamed_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "_on_mouse_exited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "_on_theme_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "_update_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_current_tab_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_previous_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_idx_at_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "is_all_tabs_in_front")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_all_tabs_in_front")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "are_tabs_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tabs_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_use_hidden_tabs_for_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_use_hidden_tabs_for_min_size")
}

private fun registerEngineTypeMethodForTabs(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "_on_mouse_exited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "_update_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "add_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "ensure_tab_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_offset_buttons_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_previous_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_select_with_rmb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "move_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "remove_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_select_with_rmb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_scrolling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_scrolling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "get_tab_close_display_policy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABS to "set_tab_close_display_policy")
}

private fun registerEngineTypeMethodForTextEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_click_selection_held")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_cursor_changed_emit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_push_current_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_scroll_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_text_changed_emit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_toggle_draw_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_update_wrap_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_v_scroll_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_color_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "can_fold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "center_viewport_to_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "clear_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "clear_undo_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_get_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_get_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_set_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_set_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "fold_all_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "fold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_breakpoints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_from_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_from_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_to_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_to_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_word_under_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "insert_text_at_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_set_as_bookmark")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_set_as_breakpoint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_set_as_safe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_selection_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "menu_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "paste")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "remove_breakpoints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "select_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_bookmark")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_breakpoint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_safe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "toggle_fold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "unfold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "unhide_all_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_breakpoint_gutter_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_breakpoint_gutter_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_get_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_set_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_get_blink_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_set_blink_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_is_block_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cursor_set_block_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_right_click_moving_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_right_click_moves_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_fold_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_fold_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_hiding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_hiding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_highlight_all_occurrences_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_highlight_all_occurrences")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_highlight_current_line_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_highlight_current_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_minimap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "draw_minimap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_minimap_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_minimap_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_overriding_selected_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_override_selected_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_readonly")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_readonly")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_show_line_numbers_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_show_line_numbers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_smooth_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_smooth_scroll_enable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_syntax_coloring_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_syntax_coloring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_v_scroll_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_v_scroll_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_wrap_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_wrap_enabled")
}

private fun registerEngineTypeMethodForTextFile(): Unit {
}

private fun registerEngineTypeMethodForTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "draw_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "has_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "get_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE to "set_flags")
}

private fun registerEngineTypeMethodForTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "create")
}

private fun registerEngineTypeMethodForTextureArray(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREARRAY to "create")
}

private fun registerEngineTypeMethodForTextureButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_click_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_click_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_disabled_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_disabled_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_focused_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_focused_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_hover_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_hover_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_pressed_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_pressed_texture")
}

private fun registerEngineTypeMethodForTextureLayered(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_layer_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "set_data_partial")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "set_layer_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "set_flags")
}

private fun registerEngineTypeMethodForTextureProgress(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_nine_patch_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_nine_patch_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_radial_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_radial_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_fill_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_fill_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_radial_initial_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_radial_initial_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_over_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_over_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_progress_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_progress_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_texture_progress_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_texture_progress_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_under_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_under_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_tint_over")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_tint_over")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_tint_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_tint_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "get_tint_under")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESS to "set_tint_under")
}

private fun registerEngineTypeMethodForTextureRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "_texture_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "has_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "get_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_texture")
}

private fun registerEngineTypeMethodForTheme(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "_emit_theme_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "copy_default_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "copy_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "merge_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_default_font")
}

private fun registerEngineTypeMethodForTileMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_clear_quadrants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_get_old_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_get_tile_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_recreate_quadrants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_set_celld")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_set_old_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_set_tile_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "fix_invalid_tiles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_autotile_coord")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cellv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_used_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_used_cells_by_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_used_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_cell_transposed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_cell_x_flipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_cell_y_flipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "map_to_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cellv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "update_bitmask_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "update_bitmask_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "update_dirty_quadrants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "world_to_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_clip_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_clip_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_custom_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_custom_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_half_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_half_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_quadrant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_quadrant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_tile_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_tile_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_y_sort_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_y_sort_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_centered_textures_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_centered_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_use_kinematic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_use_kinematic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_use_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_use_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_compatibility_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_compatibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_show_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_show_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_tileset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_tileset")
}

private fun registerEngineTypeMethodForTileSet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "_forward_atlas_subtile_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "_forward_subtile_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "_is_tile_bound")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_clear_bitmask_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_bitmask_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_icon_coordinate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_light_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_subtile_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_get_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_bitmask_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_icon_coordinate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_light_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_subtile_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "autotile_set_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "create_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "find_tile_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_last_unused_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_tiles_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_light_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_navigation_polygon_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_occluder_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape_one_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape_one_way_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_tile_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_get_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_light_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_navigation_polygon_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_occluder_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shape_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shape_one_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shape_one_way_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_tile_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "tile_set_z_index")
}

private fun registerEngineTypeMethodForTimer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_stopped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "has_autostart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_autostart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_timer_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_timer_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_time_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_wait_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_wait_time")
}

private fun registerEngineTypeMethodForToolButton(): Unit {
}

private fun registerEngineTypeMethodForTouchScreenButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_passby_press_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_passby_press")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_shape_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_shape_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_visibility_mode")
}

private fun registerEngineTypeMethodForTranslation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "_get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "_get_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "_set_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "add_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "erase_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "set_locale")
}

private fun registerEngineTypeMethodForTranslationServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "add_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_loaded_locales")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_locale_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "remove_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "set_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "translate")
}

private fun registerEngineTypeMethodForTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_popup_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_range_click_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_scroll_moved")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_text_editor_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_text_editor_modal_close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "_value_editor_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "are_column_titles_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "create_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "edit_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "ensure_cursor_is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_custom_popup_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_drop_section_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_edited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_edited_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_item_area_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_item_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_next_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_pressed_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_selected_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "scroll_to_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_min_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_titles_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_drop_mode_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_drop_mode_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_folding_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_hide_folding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_root_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_hide_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_select_mode")
}

private fun registerEngineTypeMethodForTreeItem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "add_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "call_recursive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "clear_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "clear_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "erase_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_cell_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_expand_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_max_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_next_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_prev")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_prev_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_range_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_text_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_button_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_custom_set_as_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "move_to_bottom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "move_to_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "remove_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_button_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_cell_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_as_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_expand_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_max_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_range_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_text_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_minimum_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_minimum_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_folding_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_disable_folding")
}

private fun registerEngineTypeMethodForTriangleMesh(): Unit {
}

private fun registerEngineTypeMethodForTween(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "_remove_by_uid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "follow_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "follow_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "get_runtime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "interpolate_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "interpolate_deferred_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "interpolate_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "interpolate_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "remove_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "reset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "reset_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "resume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "resume_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "stop_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "targeting_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "targeting_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "tell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "get_tween_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_tween_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "is_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_repeat")
}

private fun registerEngineTypeMethodForUDPServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "is_connection_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "take_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "get_max_pending_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "set_max_pending_connections")
}

private fun registerEngineTypeMethodForUPNP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "add_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "add_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "clear_devices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "delete_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "discover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_device_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_gateway")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "query_external_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "remove_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "is_discover_ipv6")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_ipv6")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_discover_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_discover_multicast_if")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_multicast_if")
}

private fun registerEngineTypeMethodForUPNPDevice(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "add_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "delete_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "is_valid_gateway")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "query_external_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_description_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_description_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_control_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_control_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_our_addr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_our_addr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_service_type")
}

private fun registerEngineTypeMethodForUndoRedo(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "clear_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "commit_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "create_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_current_action_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "has_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "has_undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "is_commiting_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "undo")
}

private fun registerEngineTypeMethodForVBoxContainer(): Unit {
}

private fun registerEngineTypeMethodForVScrollBar(): Unit {
}

private fun registerEngineTypeMethodForVSeparator(): Unit {
}

private fun registerEngineTypeMethodForVSlider(): Unit {
}

private fun registerEngineTypeMethodForVSplitContainer(): Unit {
}

private fun registerEngineTypeMethodForVehicleBody(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "get_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "set_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "get_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "set_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "get_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY to "set_steering")
}

private fun registerEngineTypeMethodForVehicleWheel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_rpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_skidinfo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "is_in_contact")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_damping_compression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_damping_compression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_damping_relaxation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_damping_relaxation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_suspension_max_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_suspension_max_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_suspension_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_suspension_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_suspension_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_suspension_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "is_used_as_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_use_as_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "is_used_as_traction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_use_as_traction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_friction_slip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_friction_slip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_suspension_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_suspension_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "get_roll_influence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL to "set_roll_influence")
}

private fun registerEngineTypeMethodForVideoPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_stream_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_video_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_audio_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_audio_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "has_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_buffering_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_buffering_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "has_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_stream_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_stream_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_volume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_volume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOPLAYER to "set_volume_db")
}

private fun registerEngineTypeMethodForVideoStream(): Unit {
}

private fun registerEngineTypeMethodForVideoStreamGDNative(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMGDNATIVE to "get_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMGDNATIVE to "set_file")
}

private fun registerEngineTypeMethodForVideoStreamTheora(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMTHEORA to "get_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMTHEORA to "set_file")
}

private fun registerEngineTypeMethodForVideoStreamWebm(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMWEBM to "get_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMWEBM to "set_file")
}

private fun registerEngineTypeMethodForViewport(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_gui_remove_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_gui_show_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_own_world_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_post_gui_grab_click_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_process_picking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_subwindow_visibility_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_vp_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_vp_input_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "_vp_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "find_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "find_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_final_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_modal_stack_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_render_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_viewport_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_visible_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_get_drag_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_has_modal_stack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_is_dragging")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_input_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_size_override_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_attach_to_screen_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_input_as_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "update_worlds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "use_arvr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_arvr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_audio_listener_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_as_audio_listener_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_audio_listener")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_as_audio_listener")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_3d_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_disable_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_use_fxaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_fxaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_input_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_disable_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_snap_controls_to_pixels_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_snap_controls_to_pixels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_handling_input_locally")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_handle_input_locally")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_keep_3d_linear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_keep_3d_linear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_msaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_msaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_own_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_own_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_physics_object_picking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_physics_object_picking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_render_direct_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_render_direct_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_clear_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_clear_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_vflip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_vflip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_sharpen_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_sharpen_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_size_override_stretch_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_size_override_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "has_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_world")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_world_2d")
}

private fun registerEngineTypeMethodForViewportContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "is_stretch_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "set_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "get_stretch_shrink")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTCONTAINER to "set_stretch_shrink")
}

private fun registerEngineTypeMethodForViewportTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTTEXTURE to "get_viewport_path_in_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTTEXTURE to "set_viewport_path_in_scene")
}

private fun registerEngineTypeMethodForVisibilityEnabler(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER to "set_enabler")
}

private fun registerEngineTypeMethodForVisibilityEnabler2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "_node_removed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "is_enabler_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYENABLER2D to "set_enabler")
}

private fun registerEngineTypeMethodForVisibilityNotifier(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER to "is_on_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER to "set_aabb")
}

private fun registerEngineTypeMethodForVisibilityNotifier2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER2D to "is_on_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER2D to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBILITYNOTIFIER2D to "set_rect")
}

private fun registerEngineTypeMethodForVisualInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "_get_visual_instance_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_layer_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_transformed_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "set_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "set_layer_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "get_layer_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE to "set_layer_mask")
}

private fun registerEngineTypeMethodForVisualScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "_node_ports_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "add_custom_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "add_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "add_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_add_argument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_get_argument_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_get_argument_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_get_argument_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_remove_argument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_set_argument_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_set_argument_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "custom_signal_swap_argument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "data_connect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "data_disconnect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_function_node_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_function_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_variable_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_variable_export")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "get_variable_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_custom_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_data_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_sequence_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "has_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "remove_custom_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "remove_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "remove_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "rename_custom_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "rename_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "rename_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "sequence_connect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "sequence_disconnect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_function_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_instance_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_variable_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_variable_export")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPT to "set_variable_info")
}

private fun registerEngineTypeMethodForVisualScriptBasicTypeConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBASICTYPECONSTANT to "get_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBASICTYPECONSTANT to "set_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBASICTYPECONSTANT to
      "get_basic_type_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBASICTYPECONSTANT to
      "set_basic_type_constant")
}

private fun registerEngineTypeMethodForVisualScriptBuiltinFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBUILTINFUNC to "get_func")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTBUILTINFUNC to "set_func")
}

private fun registerEngineTypeMethodForVisualScriptClassConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCLASSCONSTANT to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCLASSCONSTANT to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCLASSCONSTANT to "get_class_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCLASSCONSTANT to "set_class_constant")
}

private fun registerEngineTypeMethodForVisualScriptComment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "get_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "set_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCOMMENT to "set_title")
}

private fun registerEngineTypeMethodForVisualScriptComposeArray(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptCondition(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTANT to "get_constant_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTANT to "set_constant_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTANT to "get_constant_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTANT to "set_constant_value")
}

private fun registerEngineTypeMethodForVisualScriptConstructor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTRUCTOR to "get_constructor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTRUCTOR to "set_constructor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTRUCTOR to "get_constructor_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCONSTRUCTOR to "set_constructor_type")
}

private fun registerEngineTypeMethodForVisualScriptCustomNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_get_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_get_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_input_value_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_input_value_port_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_input_value_port_hint_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_input_value_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_input_value_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_sequence_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_sequence_port_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_value_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_value_port_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_value_port_hint_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_value_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to
      "_get_output_value_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_get_working_memory_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_has_input_sequence_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_script_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTCUSTOMNODE to "_step")
}

private fun registerEngineTypeMethodForVisualScriptDeconstruct(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTDECONSTRUCT to "_get_elem_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTDECONSTRUCT to "_set_elem_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTDECONSTRUCT to "get_deconstruct_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTDECONSTRUCT to "set_deconstruct_type")
}

private fun registerEngineTypeMethodForVisualScriptEmitSignal(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTEMITSIGNAL to "get_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTEMITSIGNAL to "set_signal")
}

private fun registerEngineTypeMethodForVisualScriptEngineSingleton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTENGINESINGLETON to "get_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTENGINESINGLETON to "set_singleton")
}

private fun registerEngineTypeMethodForVisualScriptExpression(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptFunction(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptFunctionCall(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "_get_argument_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "_set_argument_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_rpc_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_rpc_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_use_default_args")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_use_default_args")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "get_validate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONCALL to "set_validate")
}

private fun registerEngineTypeMethodForVisualScriptFunctionState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONSTATE to "_signal_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONSTATE to "connect_to_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONSTATE to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTFUNCTIONSTATE to "resume")
}

private fun registerEngineTypeMethodForVisualScriptGlobalConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTGLOBALCONSTANT to "get_global_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTGLOBALCONSTANT to "set_global_constant")
}

private fun registerEngineTypeMethodForVisualScriptIndexGet(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptIndexSet(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptInputAction(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTINPUTACTION to "get_action_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTINPUTACTION to "set_action_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTINPUTACTION to "get_action_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTINPUTACTION to "set_action_mode")
}

private fun registerEngineTypeMethodForVisualScriptIterator(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptLists(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "add_input_data_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "add_output_data_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "remove_input_data_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "remove_output_data_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "set_input_data_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "set_input_data_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "set_output_data_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLISTS to "set_output_data_port_type")
}

private fun registerEngineTypeMethodForVisualScriptLocalVar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVAR to "get_var_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVAR to "set_var_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVAR to "get_var_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVAR to "set_var_name")
}

private fun registerEngineTypeMethodForVisualScriptLocalVarSet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVARSET to "get_var_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVARSET to "set_var_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVARSET to "get_var_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTLOCALVARSET to "set_var_name")
}

private fun registerEngineTypeMethodForVisualScriptMathConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTMATHCONSTANT to "get_math_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTMATHCONSTANT to "set_math_constant")
}

private fun registerEngineTypeMethodForVisualScriptNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "_get_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "_set_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "get_default_input_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "get_visual_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "ports_changed_notify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTNODE to "set_default_input_value")
}

private fun registerEngineTypeMethodForVisualScriptOperator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTOPERATOR to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTOPERATOR to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTOPERATOR to "get_typed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTOPERATOR to "set_typed")
}

private fun registerEngineTypeMethodForVisualScriptPreload(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPRELOAD to "get_preload")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPRELOAD to "set_preload")
}

private fun registerEngineTypeMethodForVisualScriptPropertyGet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "_get_type_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "_set_type_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "get_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYGET to "set_call_mode")
}

private fun registerEngineTypeMethodForVisualScriptPropertySet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "_get_type_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "_set_type_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_assign_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_assign_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_basic_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "get_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTPROPERTYSET to "set_call_mode")
}

private fun registerEngineTypeMethodForVisualScriptResourcePath(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRESOURCEPATH to "get_resource_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRESOURCEPATH to "set_resource_path")
}

private fun registerEngineTypeMethodForVisualScriptReturn(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRETURN to "is_return_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRETURN to "set_enable_return_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRETURN to "get_return_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTRETURN to "set_return_type")
}

private fun registerEngineTypeMethodForVisualScriptSceneNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSCENENODE to "get_node_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSCENENODE to "set_node_path")
}

private fun registerEngineTypeMethodForVisualScriptSceneTree(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptSelect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSELECT to "get_typed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSELECT to "set_typed")
}

private fun registerEngineTypeMethodForVisualScriptSelf(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptSequence(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSEQUENCE to "get_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSEQUENCE to "set_steps")
}

private fun registerEngineTypeMethodForVisualScriptSubCall(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTSUBCALL to "_subcall")
}

private fun registerEngineTypeMethodForVisualScriptSwitch(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptTypeCast(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTTYPECAST to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTTYPECAST to "set_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTTYPECAST to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTTYPECAST to "set_base_type")
}

private fun registerEngineTypeMethodForVisualScriptVariableGet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTVARIABLEGET to "get_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTVARIABLEGET to "set_variable")
}

private fun registerEngineTypeMethodForVisualScriptVariableSet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTVARIABLESET to "get_variable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTVARIABLESET to "set_variable")
}

private fun registerEngineTypeMethodForVisualScriptWhile(): Unit {
}

private fun registerEngineTypeMethodForVisualScriptYield(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELD to "get_yield_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELD to "set_yield_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELD to "get_wait_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELD to "set_wait_time")
}

private fun registerEngineTypeMethodForVisualScriptYieldSignal(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "get_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "set_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "get_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSCRIPTYIELDSIGNAL to "set_signal")
}

private fun registerEngineTypeMethodForVisualServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "black_bars_set_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "black_bars_set_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_orthogonal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "camera_set_use_vertical_aspect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_clip_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_nine_patch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_particles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_polyline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_primitive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_texture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_item_add_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_add_triangle_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_copy_to_backbuffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_custom_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_item_set_distance_field_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_draw_behind_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_draw_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_sort_children_by_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_item_set_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_item_set_z_as_relative_to_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_item_set_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_attach_to_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_occluder_attach_to_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_occluder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_occluder_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_occluder_set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_occluder_set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_occluder_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_set_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_layer_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_set_shadow_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_light_set_shadow_gradient_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_light_set_z_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_occluder_polygon_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_occluder_polygon_set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_occluder_polygon_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "canvas_occluder_polygon_set_shape_as_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_set_item_mirroring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "canvas_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "directional_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_adjustment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_ambient_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_bg_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_dof_blur_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_dof_blur_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_fog")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_fog_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_fog_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_glow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_sky_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_ssao")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_ssr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "environment_set_tonemap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "force_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "force_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_render_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_test_cube")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_test_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_video_adapter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_video_adapter_vendor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "get_white_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_dynamic_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_get_to_cell_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_dynamic_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "gi_probe_set_to_cell_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "has_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "has_os_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "immediate_vertex_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_attach_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_create2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "instance_geometry_set_as_instance_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "instance_geometry_set_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_geometry_set_draw_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_geometry_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "instance_geometry_set_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_blend_shape_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_exterior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "instance_set_extra_visibility_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_layer_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_surface_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_use_lightmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instance_set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instances_cull_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instances_cull_convex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "instances_cull_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_directional_set_blend_splits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "light_directional_set_shadow_depth_range_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_directional_set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_omni_set_shadow_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_omni_set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_projector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_reverse_cull_face_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "light_set_use_gi")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_get_octree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "lightmap_capture_get_octree_cell_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "lightmap_capture_get_octree_cell_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_set_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "lightmap_capture_set_octree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "lightmap_capture_set_octree_cell_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "lightmap_capture_set_octree_cell_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "make_sphere_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_get_param_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_get_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_set_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_set_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_set_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "material_set_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_add_surface_from_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_get_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_remove_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_set_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_set_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_array_index_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_array_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "mesh_surface_get_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_format_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_format_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_index_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_get_skeleton_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "mesh_surface_update_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_allocate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_get_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_get_visible_instances")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_get_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "multimesh_instance_get_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_set_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_instance_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "multimesh_instance_set_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_set_as_bulk_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "multimesh_set_visible_instances")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "omni_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_get_current_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_get_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_is_inactive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_request_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_emission_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "particles_set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "particles_set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "reflection_probe_set_enable_box_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "reflection_probe_set_enable_shadows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "reflection_probe_set_interior_ambient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "reflection_probe_set_interior_ambient_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "reflection_probe_set_interior_ambient_probe_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "reflection_probe_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "request_frame_drawn_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "scenario_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "scenario_set_debug")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "scenario_set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "scenario_set_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "scenario_set_reflection_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_boot_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_debug_generate_wireframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_default_clear_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_shader_time_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_use_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_get_default_texture_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_get_param_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_set_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "shader_set_default_texture_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_allocate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_bone_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_bone_get_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_bone_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_bone_set_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "skeleton_get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "sky_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "sky_set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "spot_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_allocate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_create_from_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_debug_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_texid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_set_data_partial")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_set_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "texture_set_shrink_all_x2_on_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "texture_set_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "textures_keep_original")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_attach_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_attach_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_attach_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_detach")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_get_render_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_remove_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_canvas_stacking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_clear_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_disable_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_disable_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "viewport_set_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_hide_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_hide_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_msaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_parent_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "viewport_set_render_direct_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "viewport_set_shadow_atlas_quadrant_subdivision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_sharpen_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to
      "viewport_set_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_use_arvr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_use_fxaa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "viewport_set_vflip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "is_render_loop_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSERVER to "set_render_loop_enabled")
}

private fun registerEngineTypeMethodForVisualShader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "_input_type_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "_queue_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "_update_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "can_connect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "connect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "connect_nodes_forced")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "disconnect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_valid_node_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "is_node_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_graph_offset")
}

private fun registerEngineTypeMethodForVisualShaderNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_input_port_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_input_port_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_output_port_for_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_output_port_for_preview")
}

private fun registerEngineTypeMethodForVisualShaderNodeBooleanConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANCONSTANT to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANCONSTANT to "set_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeBooleanUniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeColorConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORCONSTANT to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORCONSTANT to "set_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORFUNC to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORFUNC to "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLOROP to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLOROP to "set_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorUniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeCompare(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_comparison_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_comparison_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeCubeMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_cube_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_cube_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_texture_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeCubeMapUniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeCustom(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_global_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_return_icon_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_subcategory")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_is_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_set_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to
      "_set_input_port_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeDeterminant(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeDotProduct(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeExpression(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEEXPRESSION to "get_expression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEEXPRESSION to "set_expression")
}

private fun registerEngineTypeMethodForVisualShaderNodeFaceForward(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeFresnel(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeGlobalExpression(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeGroupBase(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "add_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "add_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "clear_input_ports")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "clear_output_ports")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to
      "get_free_input_port_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to
      "get_free_output_port_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_input_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_output_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_outputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "has_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "has_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "is_valid_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "remove_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "remove_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_input_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_input_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_output_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_output_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_outputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_size")
}

private fun registerEngineTypeMethodForVisualShaderNodeIf(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeInput(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "get_input_real_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "get_input_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "set_input_name")
}

private fun registerEngineTypeMethodForVisualShaderNodeIs(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEIS to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEIS to "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeOuterProduct(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeOutput(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarClamp(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARCONSTANT to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARCONSTANT to "set_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarDerivativeFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARDERIVATIVEFUNC to
      "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARDERIVATIVEFUNC to
      "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARFUNC to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALARFUNC to "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarInterp(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALAROP to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESCALAROP to "set_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarSmoothStep(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarSwitch(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeScalarUniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeSwitch(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_texture_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureUniform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREUNIFORM to
      "get_color_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREUNIFORM to
      "set_color_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREUNIFORM to "get_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREUNIFORM to "set_texture_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureUniformTriplanar(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformCompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMCONSTANT to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMCONSTANT to "set_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformDecompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMFUNC to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMFUNC to "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformMult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMMULT to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMMULT to "set_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformUniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformVecMult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMVECMULT to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMVECMULT to "set_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeUniform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUNIFORM to "get_uniform_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUNIFORM to "set_uniform_name")
}

private fun registerEngineTypeMethodForVisualShaderNodeUniformRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUNIFORMREF to "get_uniform_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUNIFORMREF to "set_uniform_name")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec3Constant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3CONSTANT to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3CONSTANT to "set_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec3Uniform(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorClamp(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorCompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorDecompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorDerivativeFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORDERIVATIVEFUNC to
      "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORDERIVATIVEFUNC to
      "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorDistance(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORFUNC to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORFUNC to "set_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorInterp(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorLen(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTOROP to "get_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTOROP to "set_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorRefract(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorScalarMix(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorScalarSmoothStep(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorScalarStep(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorSmoothStep(): Unit {
}

private fun registerEngineTypeMethodForWeakRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEAKREF to "get_ref")
}

private fun registerEngineTypeMethodForWebRTCDataChannel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_buffered_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_max_packet_life_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_max_retransmits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_protocol")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_ready_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "is_negotiated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "is_ordered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "was_string_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "set_write_mode")
}

private fun registerEngineTypeMethodForWebRTCDataChannelGDNative(): Unit {
}

private fun registerEngineTypeMethodForWebRTCMultiplayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "add_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "get_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "get_peers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "has_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYER to "remove_peer")
}

private fun registerEngineTypeMethodForWebRTCPeerConnection(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "add_ice_candidate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "create_data_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "create_offer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "get_connection_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "set_local_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "set_remote_description")
}

private fun registerEngineTypeMethodForWebRTCPeerConnectionGDNative(): Unit {
}

private fun registerEngineTypeMethodForWebSocketClient(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "connect_to_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "disconnect_from_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "get_connected_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "get_connected_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "get_trusted_ssl_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "set_trusted_ssl_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "is_verify_ssl_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETCLIENT to "set_verify_ssl_enabled")
}

private fun registerEngineTypeMethodForWebSocketMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "set_buffers")
}

private fun registerEngineTypeMethodForWebSocketPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_connected_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_connected_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to
      "get_current_outbound_buffered_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "is_connected_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_no_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "was_string_packet")
}

private fun registerEngineTypeMethodForWebSocketServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "disconnect_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_peer_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_peer_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "has_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_bind_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "set_bind_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_ca_chain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "set_ca_chain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_handshake_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "set_handshake_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_private_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "set_private_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "get_ssl_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETSERVER to "set_ssl_certificate")
}

private fun registerEngineTypeMethodForWebXRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_controller")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "is_session_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_bounds_geometry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_optional_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_optional_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_reference_space_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to
      "get_requested_reference_space_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to
      "set_requested_reference_space_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_required_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_required_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_session_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_session_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_visibility_state")
}

private fun registerEngineTypeMethodForWindowDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "get_close_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "get_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "set_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOWDIALOG to "set_title")
}

private fun registerEngineTypeMethodForWorld(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "get_direct_space_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "get_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "set_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "get_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD to "get_space")
}

private fun registerEngineTypeMethodForWorld2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_direct_space_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_space")
}

private fun registerEngineTypeMethodForWorldEnvironment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "set_environment")
}

private fun registerEngineTypeMethodForX509Certificate(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_X509CERTIFICATE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_X509CERTIFICATE to "save")
}

private fun registerEngineTypeMethodForXMLParser(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_current_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_named_attribute_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_named_attribute_value_safe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "has_attribute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "is_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "open_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "read")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "skip_section")
}

private fun registerEngineTypeMethodForYSort(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_YSORT to "is_sort_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_YSORT to "set_sort_enabled")
}

private fun registerEngineTypeMethodForClassDB(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "can_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_enum_constants")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_enum_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_integer_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_integer_constant_enum")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_integer_constant_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_get_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_has_enum")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_has_integer_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_has_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_has_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "class_set_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "get_class_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "get_inheriters_from_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "get_parent_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "is_class_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__CLASSDB to "is_parent_class")
}

private fun registerEngineTypeMethodForDirectory(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "change_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "current_is_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "dir_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "file_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_current_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_drive_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "get_space_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "list_dir_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "list_dir_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "make_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "make_dir_recursive")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS__DIRECTORY to "rename")
}

private fun registerEngineTypeMethodForEngine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_author_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_copyright_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_donor_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_frames_drawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_frames_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_idle_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_license_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_license_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_main_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_physics_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_physics_interpolation_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_version_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "has_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "is_in_physics_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "is_editor_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_editor_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_iterations_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_iterations_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_physics_jitter_fix")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_physics_jitter_fix")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "is_printing_error_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_print_error_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_target_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_target_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "get_time_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS__ENGINE to "set_time_scale")
}

private fun registerEngineTypeMethodForFile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "eof_reached")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "file_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "flush")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_as_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_csv_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_md5")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_modified_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_pascal_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_path_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_real")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_sha256")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "is_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "open_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "open_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "open_encrypted_with_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "seek_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_csv_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_pascal_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_real")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "store_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "get_endian_swap")
  TypeManager.engineTypeMethod.add(ENGINECLASS__FILE to "set_endian_swap")
}

private fun registerEngineTypeMethodForGeometry(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "build_box_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "build_capsule_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "build_cylinder_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "clip_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "clip_polygons_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "clip_polyline_with_polygon_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "convex_hull_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "exclude_polygons_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "get_closest_point_to_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "get_closest_point_to_segment_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "get_closest_point_to_segment_uncapped")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to
      "get_closest_point_to_segment_uncapped_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "get_closest_points_between_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to
      "get_closest_points_between_segments_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "get_uv84_normal_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "intersect_polygons_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "intersect_polyline_with_polygon_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "is_point_in_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "is_point_in_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "is_polygon_clockwise")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "line_intersects_line_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "make_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "merge_polygons_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "offset_polygon_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "offset_polyline_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "point_is_inside_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "ray_intersects_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_convex")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_cylinder")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_segment_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_sphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "segment_intersects_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "triangulate_delaunay_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS__GEOMETRY to "triangulate_polygon")
}

private fun registerEngineTypeMethodForJSON(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__JSON to "parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS__JSON to "print")
}

private fun registerEngineTypeMethodForMarshalls(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "base64_to_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "base64_to_utf8")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "base64_to_variant")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "raw_to_base64")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "utf8_to_base64")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MARSHALLS to "variant_to_base64")
}

private fun registerEngineTypeMethodForMutex(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__MUTEX to "lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MUTEX to "try_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS__MUTEX to "unlock")
}

private fun registerEngineTypeMethodForOS(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "alert")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "can_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "can_use_threads")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "center_window")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "close_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "delay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "delay_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "dump_memory_to_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "dump_resources_to_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "find_scancode_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_audio_driver_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_audio_driver_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_cache_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_cmdline_args")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_config_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_connected_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_current_video_driver")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_data_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_date")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_datetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_datetime_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_dynamic_memory_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_executable_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_granted_permissions")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_ime_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_ime_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_latin_keyboard_variant")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_locale_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_model_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_native_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_power_percent_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_power_seconds_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_power_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_process_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_processor_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_real_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_scancode_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_dpi")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_max_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_splash_tick_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_static_memory_peak_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_static_memory_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_system_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_system_time_msecs")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_system_time_secs")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_tablet_driver_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_tablet_driver_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_thread_caller_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_ticks_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_ticks_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_time_zone_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_unix_time_from_datetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_user_data_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_video_driver_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_video_driver_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_virtual_keyboard_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_window_safe_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "global_menu_add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "global_menu_add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "global_menu_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "global_menu_remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "has_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "has_touchscreen_ui_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "has_virtual_keyboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "hide_virtual_keyboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_debug_build")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_ok_left_and_cancel_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_scancode_unicode")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_stdout_verbose")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_userfs_persistent")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_always_on_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_focused")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "keyboard_get_current_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "keyboard_get_layout_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "keyboard_get_layout_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "keyboard_get_layout_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "keyboard_set_current_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "kill")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "move_window_to_foreground")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "native_video_is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "native_video_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "native_video_play")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "native_video_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "native_video_unpause")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "open_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "print_all_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "print_all_textures_by_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "print_resources_by_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "print_resources_in_use")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "request_attention")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "request_permission")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "request_permissions")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_ime_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_ime_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_native_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_thread_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_use_file_access_save_and_swap")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_always_on_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_mouse_passthrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "shell_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "show_virtual_keyboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_clipboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_clipboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_delta_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_delta_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_exit_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_exit_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_keep_screen_on")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_keep_screen_on")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_in_low_processor_usage_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_low_processor_usage_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_low_processor_usage_mode_sleep_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_low_processor_usage_mode_sleep_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_max_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_max_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_min_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_min_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_screen_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_screen_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_current_tablet_driver")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_current_tablet_driver")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_vsync_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_use_vsync")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_vsync_via_compositor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_vsync_via_compositor")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_borderless_window")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_borderless_window")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_fullscreen")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_fullscreen")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_maximized")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_maximized")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_minimized")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_minimized")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_window_per_pixel_transparency_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_per_pixel_transparency_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_window_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "is_window_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "get_window_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS__OS to "set_window_size")
}

private fun registerEngineTypeMethodForResourceLoader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "get_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to
      "get_recognized_extensions_for_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "has")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "has_cached")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "load_interactive")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCELOADER to "set_abort_on_missing_resources")
}

private fun registerEngineTypeMethodForResourceSaver(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCESAVER to "get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS__RESOURCESAVER to "save")
}

private fun registerEngineTypeMethodForSemaphore(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__SEMAPHORE to "post")
  TypeManager.engineTypeMethod.add(ENGINECLASS__SEMAPHORE to "wait")
}

private fun registerEngineTypeMethodForThread(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__THREAD to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS__THREAD to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS__THREAD to "is_alive")
  TypeManager.engineTypeMethod.add(ENGINECLASS__THREAD to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS__THREAD to "wait_to_finish")
}

private fun registerEngineTypeMethodForVisualScriptEditor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS__VISUALSCRIPTEDITOR to "add_custom_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS__VISUALSCRIPTEDITOR to "remove_custom_node")
}

public fun registerEngineTypes(): Unit {
  TypeManager.registerEngineType("GlobalConstants") { GlobalConstants }
  TypeManager.registerSingleton("GlobalConstants")
  TypeManager.registerEngineType("AESContext", ::AESContext)
  TypeManager.registerEngineType("ARVRAnchor", ::ARVRAnchor)
  TypeManager.registerEngineType("ARVRCamera", ::ARVRCamera)
  TypeManager.registerEngineType("ARVRController", ::ARVRController)
  TypeManager.registerEngineType("ARVRInterface", ::ARVRInterface)
  TypeManager.registerEngineType("ARVRInterfaceGDNative", ::ARVRInterfaceGDNative)
  TypeManager.registerEngineType("ARVROrigin", ::ARVROrigin)
  TypeManager.registerEngineType("ARVRPositionalTracker", ::ARVRPositionalTracker)
  TypeManager.registerEngineType("ARVRServer") { ARVRServer }
  TypeManager.registerSingleton("ARVRServer")
  TypeManager.registerEngineType("AStar", ::AStar)
  TypeManager.registerEngineType("AStar2D", ::AStar2D)
  TypeManager.registerEngineType("AcceptDialog", ::AcceptDialog)
  TypeManager.registerEngineType("AnimatedSprite", ::AnimatedSprite)
  TypeManager.registerEngineType("AnimatedSprite3D", ::AnimatedSprite3D)
  TypeManager.registerEngineType("AnimatedTexture", ::AnimatedTexture)
  TypeManager.registerEngineType("Animation", ::Animation)
  TypeManager.registerEngineType("AnimationNode", ::AnimationNode)
  TypeManager.registerEngineType("AnimationNodeAdd2", ::AnimationNodeAdd2)
  TypeManager.registerEngineType("AnimationNodeAdd3", ::AnimationNodeAdd3)
  TypeManager.registerEngineType("AnimationNodeAnimation", ::AnimationNodeAnimation)
  TypeManager.registerEngineType("AnimationNodeBlend2", ::AnimationNodeBlend2)
  TypeManager.registerEngineType("AnimationNodeBlend3", ::AnimationNodeBlend3)
  TypeManager.registerEngineType("AnimationNodeBlendSpace1D", ::AnimationNodeBlendSpace1D)
  TypeManager.registerEngineType("AnimationNodeBlendSpace2D", ::AnimationNodeBlendSpace2D)
  TypeManager.registerEngineType("AnimationNodeBlendTree", ::AnimationNodeBlendTree)
  TypeManager.registerEngineType("AnimationNodeOneShot", ::AnimationNodeOneShot)
  TypeManager.registerEngineType("AnimationNodeOutput", ::AnimationNodeOutput)
  TypeManager.registerEngineType("AnimationNodeStateMachine", ::AnimationNodeStateMachine)
  TypeManager.registerEngineType("AnimationNodeStateMachinePlayback",
      ::AnimationNodeStateMachinePlayback)
  TypeManager.registerEngineType("AnimationNodeStateMachineTransition",
      ::AnimationNodeStateMachineTransition)
  TypeManager.registerEngineType("AnimationNodeTimeScale", ::AnimationNodeTimeScale)
  TypeManager.registerEngineType("AnimationNodeTimeSeek", ::AnimationNodeTimeSeek)
  TypeManager.registerEngineType("AnimationNodeTransition", ::AnimationNodeTransition)
  TypeManager.registerEngineType("AnimationPlayer", ::AnimationPlayer)
  TypeManager.registerEngineType("AnimationRootNode", ::AnimationRootNode)
  TypeManager.registerEngineType("AnimationTrackEditPlugin", ::AnimationTrackEditPlugin)
  TypeManager.registerEngineType("AnimationTree", ::AnimationTree)
  TypeManager.registerEngineType("AnimationTreePlayer", ::AnimationTreePlayer)
  TypeManager.registerEngineType("Area", ::Area)
  TypeManager.registerEngineType("Area2D", ::Area2D)
  TypeManager.registerEngineType("ArrayMesh", ::ArrayMesh)
  TypeManager.registerEngineType("AspectRatioContainer", ::AspectRatioContainer)
  TypeManager.registerEngineType("AtlasTexture", ::AtlasTexture)
  TypeManager.registerEngineType("AudioBusLayout", ::AudioBusLayout)
  TypeManager.registerEngineType("AudioEffect", ::AudioEffect)
  TypeManager.registerEngineType("AudioEffectAmplify", ::AudioEffectAmplify)
  TypeManager.registerEngineType("AudioEffectBandLimitFilter", ::AudioEffectBandLimitFilter)
  TypeManager.registerEngineType("AudioEffectBandPassFilter", ::AudioEffectBandPassFilter)
  TypeManager.registerEngineType("AudioEffectCapture", ::AudioEffectCapture)
  TypeManager.registerEngineType("AudioEffectChorus", ::AudioEffectChorus)
  TypeManager.registerEngineType("AudioEffectCompressor", ::AudioEffectCompressor)
  TypeManager.registerEngineType("AudioEffectDelay", ::AudioEffectDelay)
  TypeManager.registerEngineType("AudioEffectDistortion", ::AudioEffectDistortion)
  TypeManager.registerEngineType("AudioEffectEQ", ::AudioEffectEQ)
  TypeManager.registerEngineType("AudioEffectEQ10", ::AudioEffectEQ10)
  TypeManager.registerEngineType("AudioEffectEQ21", ::AudioEffectEQ21)
  TypeManager.registerEngineType("AudioEffectEQ6", ::AudioEffectEQ6)
  TypeManager.registerEngineType("AudioEffectFilter", ::AudioEffectFilter)
  TypeManager.registerEngineType("AudioEffectHighPassFilter", ::AudioEffectHighPassFilter)
  TypeManager.registerEngineType("AudioEffectHighShelfFilter", ::AudioEffectHighShelfFilter)
  TypeManager.registerEngineType("AudioEffectInstance", ::AudioEffectInstance)
  TypeManager.registerEngineType("AudioEffectLimiter", ::AudioEffectLimiter)
  TypeManager.registerEngineType("AudioEffectLowPassFilter", ::AudioEffectLowPassFilter)
  TypeManager.registerEngineType("AudioEffectLowShelfFilter", ::AudioEffectLowShelfFilter)
  TypeManager.registerEngineType("AudioEffectNotchFilter", ::AudioEffectNotchFilter)
  TypeManager.registerEngineType("AudioEffectPanner", ::AudioEffectPanner)
  TypeManager.registerEngineType("AudioEffectPhaser", ::AudioEffectPhaser)
  TypeManager.registerEngineType("AudioEffectPitchShift", ::AudioEffectPitchShift)
  TypeManager.registerEngineType("AudioEffectRecord", ::AudioEffectRecord)
  TypeManager.registerEngineType("AudioEffectReverb", ::AudioEffectReverb)
  TypeManager.registerEngineType("AudioEffectSpectrumAnalyzer", ::AudioEffectSpectrumAnalyzer)
  TypeManager.registerEngineType("AudioEffectSpectrumAnalyzerInstance",
      ::AudioEffectSpectrumAnalyzerInstance)
  TypeManager.registerEngineType("AudioEffectStereoEnhance", ::AudioEffectStereoEnhance)
  TypeManager.registerEngineType("AudioServer") { AudioServer }
  TypeManager.registerSingleton("AudioServer")
  TypeManager.registerEngineType("AudioStream", ::AudioStream)
  TypeManager.registerEngineType("AudioStreamGenerator", ::AudioStreamGenerator)
  TypeManager.registerEngineType("AudioStreamGeneratorPlayback", ::AudioStreamGeneratorPlayback)
  TypeManager.registerEngineType("AudioStreamMP3", ::AudioStreamMP3)
  TypeManager.registerEngineType("AudioStreamMicrophone", ::AudioStreamMicrophone)
  TypeManager.registerEngineType("AudioStreamOGGVorbis", ::AudioStreamOGGVorbis)
  TypeManager.registerEngineType("AudioStreamPlayback", ::AudioStreamPlayback)
  TypeManager.registerEngineType("AudioStreamPlaybackResampled", ::AudioStreamPlaybackResampled)
  TypeManager.registerEngineType("AudioStreamPlayer", ::AudioStreamPlayer)
  TypeManager.registerEngineType("AudioStreamPlayer2D", ::AudioStreamPlayer2D)
  TypeManager.registerEngineType("AudioStreamPlayer3D", ::AudioStreamPlayer3D)
  TypeManager.registerEngineType("AudioStreamRandomPitch", ::AudioStreamRandomPitch)
  TypeManager.registerEngineType("AudioStreamSample", ::AudioStreamSample)
  TypeManager.registerEngineType("BackBufferCopy", ::BackBufferCopy)
  TypeManager.registerEngineType("BakedLightmap", ::BakedLightmap)
  TypeManager.registerEngineType("BakedLightmapData", ::BakedLightmapData)
  TypeManager.registerEngineType("BaseButton", ::BaseButton)
  TypeManager.registerEngineType("BitMap", ::BitMap)
  TypeManager.registerEngineType("BitmapFont", ::BitmapFont)
  TypeManager.registerEngineType("Bone2D", ::Bone2D)
  TypeManager.registerEngineType("BoneAttachment", ::BoneAttachment)
  TypeManager.registerEngineType("BoxContainer", ::BoxContainer)
  TypeManager.registerEngineType("BoxShape", ::BoxShape)
  TypeManager.registerEngineType("BulletPhysicsDirectBodyState", ::BulletPhysicsDirectBodyState)
  TypeManager.registerEngineType("Button", ::Button)
  TypeManager.registerEngineType("ButtonGroup", ::ButtonGroup)
  TypeManager.registerEngineType("CPUParticles", ::CPUParticles)
  TypeManager.registerEngineType("CPUParticles2D", ::CPUParticles2D)
  TypeManager.registerEngineType("CSGBox", ::CSGBox)
  TypeManager.registerEngineType("CSGCombiner", ::CSGCombiner)
  TypeManager.registerEngineType("CSGCylinder", ::CSGCylinder)
  TypeManager.registerEngineType("CSGMesh", ::CSGMesh)
  TypeManager.registerEngineType("CSGPolygon", ::CSGPolygon)
  TypeManager.registerEngineType("CSGPrimitive", ::CSGPrimitive)
  TypeManager.registerEngineType("CSGShape", ::CSGShape)
  TypeManager.registerEngineType("CSGSphere", ::CSGSphere)
  TypeManager.registerEngineType("CSGTorus", ::CSGTorus)
  TypeManager.registerEngineType("Camera", ::Camera)
  TypeManager.registerEngineType("Camera2D", ::Camera2D)
  TypeManager.registerEngineType("CameraFeed", ::CameraFeed)
  TypeManager.registerEngineType("CameraServer") { CameraServer }
  TypeManager.registerSingleton("CameraServer")
  TypeManager.registerEngineType("CameraTexture", ::CameraTexture)
  TypeManager.registerEngineType("CanvasItem", ::CanvasItem)
  TypeManager.registerEngineType("CanvasItemMaterial", ::CanvasItemMaterial)
  TypeManager.registerEngineType("CanvasLayer", ::CanvasLayer)
  TypeManager.registerEngineType("CanvasModulate", ::CanvasModulate)
  TypeManager.registerEngineType("CapsuleMesh", ::CapsuleMesh)
  TypeManager.registerEngineType("CapsuleShape", ::CapsuleShape)
  TypeManager.registerEngineType("CapsuleShape2D", ::CapsuleShape2D)
  TypeManager.registerEngineType("CenterContainer", ::CenterContainer)
  TypeManager.registerEngineType("CharFXTransform", ::CharFXTransform)
  TypeManager.registerEngineType("CheckBox", ::CheckBox)
  TypeManager.registerEngineType("CheckButton", ::CheckButton)
  TypeManager.registerEngineType("CircleShape2D", ::CircleShape2D)
  TypeManager.registerEngineType("ClippedCamera", ::ClippedCamera)
  TypeManager.registerEngineType("CollisionObject", ::CollisionObject)
  TypeManager.registerEngineType("CollisionObject2D", ::CollisionObject2D)
  TypeManager.registerEngineType("CollisionPolygon", ::CollisionPolygon)
  TypeManager.registerEngineType("CollisionPolygon2D", ::CollisionPolygon2D)
  TypeManager.registerEngineType("CollisionShape", ::CollisionShape)
  TypeManager.registerEngineType("CollisionShape2D", ::CollisionShape2D)
  TypeManager.registerEngineType("ColorPicker", ::ColorPicker)
  TypeManager.registerEngineType("ColorPickerButton", ::ColorPickerButton)
  TypeManager.registerEngineType("ColorRect", ::ColorRect)
  TypeManager.registerEngineType("ConcavePolygonShape", ::ConcavePolygonShape)
  TypeManager.registerEngineType("ConcavePolygonShape2D", ::ConcavePolygonShape2D)
  TypeManager.registerEngineType("ConeTwistJoint", ::ConeTwistJoint)
  TypeManager.registerEngineType("ConfigFile", ::ConfigFile)
  TypeManager.registerEngineType("ConfirmationDialog", ::ConfirmationDialog)
  TypeManager.registerEngineType("Container", ::Container)
  TypeManager.registerEngineType("Control", ::Control)
  TypeManager.registerEngineType("ConvexPolygonShape", ::ConvexPolygonShape)
  TypeManager.registerEngineType("ConvexPolygonShape2D", ::ConvexPolygonShape2D)
  TypeManager.registerEngineType("Crypto", ::Crypto)
  TypeManager.registerEngineType("CryptoKey", ::CryptoKey)
  TypeManager.registerEngineType("CubeMap", ::CubeMap)
  TypeManager.registerEngineType("CubeMesh", ::CubeMesh)
  TypeManager.registerEngineType("CullInstance", ::CullInstance)
  TypeManager.registerEngineType("Curve", ::Curve)
  TypeManager.registerEngineType("Curve2D", ::Curve2D)
  TypeManager.registerEngineType("Curve3D", ::Curve3D)
  TypeManager.registerEngineType("CurveTexture", ::CurveTexture)
  TypeManager.registerEngineType("CylinderMesh", ::CylinderMesh)
  TypeManager.registerEngineType("CylinderShape", ::CylinderShape)
  TypeManager.registerEngineType("DTLSServer", ::DTLSServer)
  TypeManager.registerEngineType("DampedSpringJoint2D", ::DampedSpringJoint2D)
  TypeManager.registerEngineType("DirectionalLight", ::DirectionalLight)
  TypeManager.registerEngineType("DynamicFont", ::DynamicFont)
  TypeManager.registerEngineType("DynamicFontData", ::DynamicFontData)
  TypeManager.registerEngineType("EditorExportPlugin", ::EditorExportPlugin)
  TypeManager.registerEngineType("EditorFeatureProfile", ::EditorFeatureProfile)
  TypeManager.registerEngineType("EditorFileDialog", ::EditorFileDialog)
  TypeManager.registerEngineType("EditorFileSystem", ::EditorFileSystem)
  TypeManager.registerEngineType("EditorFileSystemDirectory", ::EditorFileSystemDirectory)
  TypeManager.registerEngineType("EditorImportPlugin", ::EditorImportPlugin)
  TypeManager.registerEngineType("EditorInspector", ::EditorInspector)
  TypeManager.registerEngineType("EditorInspectorPlugin", ::EditorInspectorPlugin)
  TypeManager.registerEngineType("EditorInterface", ::EditorInterface)
  TypeManager.registerEngineType("EditorNavigationMeshGenerator", ::EditorNavigationMeshGenerator)
  TypeManager.registerEngineType("EditorPlugin", ::EditorPlugin)
  TypeManager.registerEngineType("EditorProperty", ::EditorProperty)
  TypeManager.registerEngineType("EditorResourceConversionPlugin", ::EditorResourceConversionPlugin)
  TypeManager.registerEngineType("EditorResourcePicker", ::EditorResourcePicker)
  TypeManager.registerEngineType("EditorResourcePreview", ::EditorResourcePreview)
  TypeManager.registerEngineType("EditorResourcePreviewGenerator", ::EditorResourcePreviewGenerator)
  TypeManager.registerEngineType("EditorSceneImporter", ::EditorSceneImporter)
  TypeManager.registerEngineType("EditorSceneImporterFBX", ::EditorSceneImporterFBX)
  TypeManager.registerEngineType("EditorSceneImporterGLTF", ::EditorSceneImporterGLTF)
  TypeManager.registerEngineType("EditorScenePostImport", ::EditorScenePostImport)
  TypeManager.registerEngineType("EditorScript", ::EditorScript)
  TypeManager.registerEngineType("EditorScriptPicker", ::EditorScriptPicker)
  TypeManager.registerEngineType("EditorSelection", ::EditorSelection)
  TypeManager.registerEngineType("EditorSettings", ::EditorSettings)
  TypeManager.registerEngineType("EditorSpatialGizmo", ::EditorSpatialGizmo)
  TypeManager.registerEngineType("EditorSpatialGizmoPlugin", ::EditorSpatialGizmoPlugin)
  TypeManager.registerEngineType("EditorSpinSlider", ::EditorSpinSlider)
  TypeManager.registerEngineType("EditorVCSInterface", ::EditorVCSInterface)
  TypeManager.registerEngineType("EncodedObjectAsID", ::EncodedObjectAsID)
  TypeManager.registerEngineType("Environment", ::Environment)
  TypeManager.registerEngineType("Expression", ::Expression)
  TypeManager.registerEngineType("ExternalTexture", ::ExternalTexture)
  TypeManager.registerEngineType("FileDialog", ::FileDialog)
  TypeManager.registerEngineType("FileSystemDock", ::FileSystemDock)
  TypeManager.registerEngineType("Font", ::Font)
  TypeManager.registerEngineType("FuncRef", ::FuncRef)
  TypeManager.registerEngineType("GDNative", ::GDNative)
  TypeManager.registerEngineType("GDNativeLibrary", ::GDNativeLibrary)
  TypeManager.registerEngineType("GDScript", ::GDScript)
  TypeManager.registerEngineType("GDScriptFunctionState", ::GDScriptFunctionState)
  TypeManager.registerEngineType("GIProbe", ::GIProbe)
  TypeManager.registerEngineType("GIProbeData", ::GIProbeData)
  TypeManager.registerEngineType("GLTFAccessor", ::GLTFAccessor)
  TypeManager.registerEngineType("GLTFAnimation", ::GLTFAnimation)
  TypeManager.registerEngineType("GLTFBufferView", ::GLTFBufferView)
  TypeManager.registerEngineType("GLTFCamera", ::GLTFCamera)
  TypeManager.registerEngineType("GLTFDocument", ::GLTFDocument)
  TypeManager.registerEngineType("GLTFLight", ::GLTFLight)
  TypeManager.registerEngineType("GLTFMesh", ::GLTFMesh)
  TypeManager.registerEngineType("GLTFNode", ::GLTFNode)
  TypeManager.registerEngineType("GLTFSkeleton", ::GLTFSkeleton)
  TypeManager.registerEngineType("GLTFSkin", ::GLTFSkin)
  TypeManager.registerEngineType("GLTFSpecGloss", ::GLTFSpecGloss)
  TypeManager.registerEngineType("GLTFState", ::GLTFState)
  TypeManager.registerEngineType("GLTFTexture", ::GLTFTexture)
  TypeManager.registerEngineType("Generic6DOFJoint", ::Generic6DOFJoint)
  TypeManager.registerEngineType("GeometryInstance", ::GeometryInstance)
  TypeManager.registerEngineType("Gradient", ::Gradient)
  TypeManager.registerEngineType("GradientTexture", ::GradientTexture)
  TypeManager.registerEngineType("GraphEdit", ::GraphEdit)
  TypeManager.registerEngineType("GraphNode", ::GraphNode)
  TypeManager.registerEngineType("GridContainer", ::GridContainer)
  TypeManager.registerEngineType("GridMap", ::GridMap)
  TypeManager.registerEngineType("GrooveJoint2D", ::GrooveJoint2D)
  TypeManager.registerEngineType("HBoxContainer", ::HBoxContainer)
  TypeManager.registerEngineType("HMACContext", ::HMACContext)
  TypeManager.registerEngineType("HScrollBar", ::HScrollBar)
  TypeManager.registerEngineType("HSeparator", ::HSeparator)
  TypeManager.registerEngineType("HSlider", ::HSlider)
  TypeManager.registerEngineType("HSplitContainer", ::HSplitContainer)
  TypeManager.registerEngineType("HTTPClient", ::HTTPClient)
  TypeManager.registerEngineType("HTTPRequest", ::HTTPRequest)
  TypeManager.registerEngineType("HashingContext", ::HashingContext)
  TypeManager.registerEngineType("HeightMapShape", ::HeightMapShape)
  TypeManager.registerEngineType("HingeJoint", ::HingeJoint)
  TypeManager.registerEngineType("IP") { IP }
  TypeManager.registerSingleton("IP")
  TypeManager.registerEngineType("Image", ::Image)
  TypeManager.registerEngineType("ImageTexture", ::ImageTexture)
  TypeManager.registerEngineType("ImmediateGeometry", ::ImmediateGeometry)
  TypeManager.registerEngineType("Input") { Input }
  TypeManager.registerSingleton("Input")
  TypeManager.registerEngineType("InputEvent", ::InputEvent)
  TypeManager.registerEngineType("InputEventAction", ::InputEventAction)
  TypeManager.registerEngineType("InputEventGesture", ::InputEventGesture)
  TypeManager.registerEngineType("InputEventJoypadButton", ::InputEventJoypadButton)
  TypeManager.registerEngineType("InputEventJoypadMotion", ::InputEventJoypadMotion)
  TypeManager.registerEngineType("InputEventKey", ::InputEventKey)
  TypeManager.registerEngineType("InputEventMIDI", ::InputEventMIDI)
  TypeManager.registerEngineType("InputEventMagnifyGesture", ::InputEventMagnifyGesture)
  TypeManager.registerEngineType("InputEventMouse", ::InputEventMouse)
  TypeManager.registerEngineType("InputEventMouseButton", ::InputEventMouseButton)
  TypeManager.registerEngineType("InputEventMouseMotion", ::InputEventMouseMotion)
  TypeManager.registerEngineType("InputEventPanGesture", ::InputEventPanGesture)
  TypeManager.registerEngineType("InputEventScreenDrag", ::InputEventScreenDrag)
  TypeManager.registerEngineType("InputEventScreenTouch", ::InputEventScreenTouch)
  TypeManager.registerEngineType("InputEventWithModifiers", ::InputEventWithModifiers)
  TypeManager.registerEngineType("InputMap") { InputMap }
  TypeManager.registerSingleton("InputMap")
  TypeManager.registerEngineType("InstancePlaceholder", ::InstancePlaceholder)
  TypeManager.registerEngineType("InterpolatedCamera", ::InterpolatedCamera)
  TypeManager.registerEngineType("ItemList", ::ItemList)
  TypeManager.registerEngineType("JNISingleton", ::JNISingleton)
  TypeManager.registerEngineType("JSONParseResult", ::JSONParseResult)
  TypeManager.registerEngineType("JSONRPC", ::JSONRPC)
  TypeManager.registerEngineType("JavaClass", ::JavaClass)
  TypeManager.registerEngineType("JavaClassWrapper") { JavaClassWrapper }
  TypeManager.registerSingleton("JavaClassWrapper")
  TypeManager.registerEngineType("JavaScript") { JavaScript }
  TypeManager.registerSingleton("JavaScript")
  TypeManager.registerEngineType("JavaScriptObject", ::JavaScriptObject)
  TypeManager.registerEngineType("Joint", ::Joint)
  TypeManager.registerEngineType("Joint2D", ::Joint2D)
  TypeManager.registerEngineType("KinematicBody", ::KinematicBody)
  TypeManager.registerEngineType("KinematicBody2D", ::KinematicBody2D)
  TypeManager.registerEngineType("KinematicCollision", ::KinematicCollision)
  TypeManager.registerEngineType("KinematicCollision2D", ::KinematicCollision2D)
  TypeManager.registerEngineType("KotlinScript", ::KotlinScript)
  TypeManager.registerEngineType("Label", ::Label)
  TypeManager.registerEngineType("LargeTexture", ::LargeTexture)
  TypeManager.registerEngineType("Light", ::Light)
  TypeManager.registerEngineType("Light2D", ::Light2D)
  TypeManager.registerEngineType("LightOccluder2D", ::LightOccluder2D)
  TypeManager.registerEngineType("Line2D", ::Line2D)
  TypeManager.registerEngineType("LineEdit", ::LineEdit)
  TypeManager.registerEngineType("LineShape2D", ::LineShape2D)
  TypeManager.registerEngineType("LinkButton", ::LinkButton)
  TypeManager.registerEngineType("Listener", ::Listener)
  TypeManager.registerEngineType("Listener2D", ::Listener2D)
  TypeManager.registerEngineType("MainLoop", ::MainLoop)
  TypeManager.registerEngineType("MarginContainer", ::MarginContainer)
  TypeManager.registerEngineType("Material", ::Material)
  TypeManager.registerEngineType("MenuButton", ::MenuButton)
  TypeManager.registerEngineType("Mesh", ::Mesh)
  TypeManager.registerEngineType("MeshDataTool", ::MeshDataTool)
  TypeManager.registerEngineType("MeshInstance", ::MeshInstance)
  TypeManager.registerEngineType("MeshInstance2D", ::MeshInstance2D)
  TypeManager.registerEngineType("MeshLibrary", ::MeshLibrary)
  TypeManager.registerEngineType("MeshTexture", ::MeshTexture)
  TypeManager.registerEngineType("MobileVRInterface", ::MobileVRInterface)
  TypeManager.registerEngineType("MultiMesh", ::MultiMesh)
  TypeManager.registerEngineType("MultiMeshInstance", ::MultiMeshInstance)
  TypeManager.registerEngineType("MultiMeshInstance2D", ::MultiMeshInstance2D)
  TypeManager.registerEngineType("MultiplayerAPI", ::MultiplayerAPI)
  TypeManager.registerEngineType("MultiplayerPeerGDNative", ::MultiplayerPeerGDNative)
  TypeManager.registerEngineType("NativeScript", ::NativeScript)
  TypeManager.registerEngineType("Navigation", ::Navigation)
  TypeManager.registerEngineType("Navigation2D", ::Navigation2D)
  TypeManager.registerEngineType("NavigationMesh", ::NavigationMesh)
  TypeManager.registerEngineType("NavigationMeshInstance", ::NavigationMeshInstance)
  TypeManager.registerEngineType("NavigationPolygon", ::NavigationPolygon)
  TypeManager.registerEngineType("NavigationPolygonInstance", ::NavigationPolygonInstance)
  TypeManager.registerEngineType("NetworkedMultiplayerENet", ::NetworkedMultiplayerENet)
  TypeManager.registerEngineType("NetworkedMultiplayerPeer", ::NetworkedMultiplayerPeer)
  TypeManager.registerEngineType("NinePatchRect", ::NinePatchRect)
  TypeManager.registerEngineType("Node", ::Node)
  TypeManager.registerEngineType("Node2D", ::Node2D)
  TypeManager.registerEngineType("NoiseTexture", ::NoiseTexture)
  TypeManager.registerEngineType("Object", ::Object)
  TypeManager.registerEngineType("Occluder", ::Occluder)
  TypeManager.registerEngineType("OccluderPolygon2D", ::OccluderPolygon2D)
  TypeManager.registerEngineType("OccluderShape", ::OccluderShape)
  TypeManager.registerEngineType("OccluderShapeSphere", ::OccluderShapeSphere)
  TypeManager.registerEngineType("OmniLight", ::OmniLight)
  TypeManager.registerEngineType("OpenSimplexNoise", ::OpenSimplexNoise)
  TypeManager.registerEngineType("OptionButton", ::OptionButton)
  TypeManager.registerEngineType("PCKPacker", ::PCKPacker)
  TypeManager.registerEngineType("PHashTranslation", ::PHashTranslation)
  TypeManager.registerEngineType("PackedDataContainer", ::PackedDataContainer)
  TypeManager.registerEngineType("PackedDataContainerRef", ::PackedDataContainerRef)
  TypeManager.registerEngineType("PackedScene", ::PackedScene)
  TypeManager.registerEngineType("PackedSceneGLTF", ::PackedSceneGLTF)
  TypeManager.registerEngineType("PacketPeer", ::PacketPeer)
  TypeManager.registerEngineType("PacketPeerDTLS", ::PacketPeerDTLS)
  TypeManager.registerEngineType("PacketPeerGDNative", ::PacketPeerGDNative)
  TypeManager.registerEngineType("PacketPeerStream", ::PacketPeerStream)
  TypeManager.registerEngineType("PacketPeerUDP", ::PacketPeerUDP)
  TypeManager.registerEngineType("Panel", ::Panel)
  TypeManager.registerEngineType("PanelContainer", ::PanelContainer)
  TypeManager.registerEngineType("PanoramaSky", ::PanoramaSky)
  TypeManager.registerEngineType("ParallaxBackground", ::ParallaxBackground)
  TypeManager.registerEngineType("ParallaxLayer", ::ParallaxLayer)
  TypeManager.registerEngineType("Particles", ::Particles)
  TypeManager.registerEngineType("Particles2D", ::Particles2D)
  TypeManager.registerEngineType("ParticlesMaterial", ::ParticlesMaterial)
  TypeManager.registerEngineType("Path", ::Path)
  TypeManager.registerEngineType("Path2D", ::Path2D)
  TypeManager.registerEngineType("PathFollow", ::PathFollow)
  TypeManager.registerEngineType("PathFollow2D", ::PathFollow2D)
  TypeManager.registerEngineType("Performance") { Performance }
  TypeManager.registerSingleton("Performance")
  TypeManager.registerEngineType("PhysicalBone", ::PhysicalBone)
  TypeManager.registerEngineType("Physics2DDirectBodyState", ::Physics2DDirectBodyState)
  TypeManager.registerEngineType("Physics2DDirectBodyStateSW", ::Physics2DDirectBodyStateSW)
  TypeManager.registerEngineType("Physics2DDirectSpaceState", ::Physics2DDirectSpaceState)
  TypeManager.registerEngineType("Physics2DServer") { Physics2DServer }
  TypeManager.registerSingleton("Physics2DServer")
  TypeManager.registerEngineType("Physics2DShapeQueryParameters", ::Physics2DShapeQueryParameters)
  TypeManager.registerEngineType("Physics2DTestMotionResult", ::Physics2DTestMotionResult)
  TypeManager.registerEngineType("PhysicsBody", ::PhysicsBody)
  TypeManager.registerEngineType("PhysicsBody2D", ::PhysicsBody2D)
  TypeManager.registerEngineType("PhysicsDirectBodyState", ::PhysicsDirectBodyState)
  TypeManager.registerEngineType("PhysicsDirectSpaceState", ::PhysicsDirectSpaceState)
  TypeManager.registerEngineType("PhysicsMaterial", ::PhysicsMaterial)
  TypeManager.registerEngineType("PhysicsServer") { PhysicsServer }
  TypeManager.registerSingleton("PhysicsServer")
  TypeManager.registerEngineType("PhysicsShapeQueryParameters", ::PhysicsShapeQueryParameters)
  TypeManager.registerEngineType("PhysicsTestMotionResult", ::PhysicsTestMotionResult)
  TypeManager.registerEngineType("PinJoint", ::PinJoint)
  TypeManager.registerEngineType("PinJoint2D", ::PinJoint2D)
  TypeManager.registerEngineType("PlaneMesh", ::PlaneMesh)
  TypeManager.registerEngineType("PlaneShape", ::PlaneShape)
  TypeManager.registerEngineType("PluginScript", ::PluginScript)
  TypeManager.registerEngineType("PointMesh", ::PointMesh)
  TypeManager.registerEngineType("Polygon2D", ::Polygon2D)
  TypeManager.registerEngineType("PolygonPathFinder", ::PolygonPathFinder)
  TypeManager.registerEngineType("Popup", ::Popup)
  TypeManager.registerEngineType("PopupDialog", ::PopupDialog)
  TypeManager.registerEngineType("PopupMenu", ::PopupMenu)
  TypeManager.registerEngineType("PopupPanel", ::PopupPanel)
  TypeManager.registerEngineType("Portal", ::Portal)
  TypeManager.registerEngineType("Position2D", ::Position2D)
  TypeManager.registerEngineType("Position3D", ::Position3D)
  TypeManager.registerEngineType("PrimitiveMesh", ::PrimitiveMesh)
  TypeManager.registerEngineType("PrismMesh", ::PrismMesh)
  TypeManager.registerEngineType("ProceduralSky", ::ProceduralSky)
  TypeManager.registerEngineType("ProgressBar", ::ProgressBar)
  TypeManager.registerEngineType("ProjectSettings") { ProjectSettings }
  TypeManager.registerSingleton("ProjectSettings")
  TypeManager.registerEngineType("ProximityGroup", ::ProximityGroup)
  TypeManager.registerEngineType("ProxyTexture", ::ProxyTexture)
  TypeManager.registerEngineType("QuadMesh", ::QuadMesh)
  TypeManager.registerEngineType("RandomNumberGenerator", ::RandomNumberGenerator)
  TypeManager.registerEngineType("Range", ::Range)
  TypeManager.registerEngineType("RayCast", ::RayCast)
  TypeManager.registerEngineType("RayCast2D", ::RayCast2D)
  TypeManager.registerEngineType("RayShape", ::RayShape)
  TypeManager.registerEngineType("RayShape2D", ::RayShape2D)
  TypeManager.registerEngineType("RectangleShape2D", ::RectangleShape2D)
  TypeManager.registerEngineType("Reference", ::Reference)
  TypeManager.registerEngineType("ReferenceRect", ::ReferenceRect)
  TypeManager.registerEngineType("ReflectionProbe", ::ReflectionProbe)
  TypeManager.registerEngineType("RegEx", ::RegEx)
  TypeManager.registerEngineType("RegExMatch", ::RegExMatch)
  TypeManager.registerEngineType("RemoteTransform", ::RemoteTransform)
  TypeManager.registerEngineType("RemoteTransform2D", ::RemoteTransform2D)
  TypeManager.registerEngineType("Resource", ::Resource)
  TypeManager.registerEngineType("ResourceFormatLoader", ::ResourceFormatLoader)
  TypeManager.registerEngineType("ResourceFormatSaver", ::ResourceFormatSaver)
  TypeManager.registerEngineType("ResourceImporter", ::ResourceImporter)
  TypeManager.registerEngineType("ResourceInteractiveLoader", ::ResourceInteractiveLoader)
  TypeManager.registerEngineType("ResourcePreloader", ::ResourcePreloader)
  TypeManager.registerEngineType("RichTextEffect", ::RichTextEffect)
  TypeManager.registerEngineType("RichTextLabel", ::RichTextLabel)
  TypeManager.registerEngineType("RigidBody", ::RigidBody)
  TypeManager.registerEngineType("RigidBody2D", ::RigidBody2D)
  TypeManager.registerEngineType("Room", ::Room)
  TypeManager.registerEngineType("RoomGroup", ::RoomGroup)
  TypeManager.registerEngineType("RoomManager", ::RoomManager)
  TypeManager.registerEngineType("RootMotionView", ::RootMotionView)
  TypeManager.registerEngineType("SceneState", ::SceneState)
  TypeManager.registerEngineType("SceneTree", ::SceneTree)
  TypeManager.registerEngineType("SceneTreeTimer", ::SceneTreeTimer)
  TypeManager.registerEngineType("Script", ::Script)
  TypeManager.registerEngineType("ScriptCreateDialog", ::ScriptCreateDialog)
  TypeManager.registerEngineType("ScriptEditor", ::ScriptEditor)
  TypeManager.registerEngineType("ScrollBar", ::ScrollBar)
  TypeManager.registerEngineType("ScrollContainer", ::ScrollContainer)
  TypeManager.registerEngineType("SegmentShape2D", ::SegmentShape2D)
  TypeManager.registerEngineType("Separator", ::Separator)
  TypeManager.registerEngineType("Shader", ::Shader)
  TypeManager.registerEngineType("ShaderMaterial", ::ShaderMaterial)
  TypeManager.registerEngineType("Shape", ::Shape)
  TypeManager.registerEngineType("Shape2D", ::Shape2D)
  TypeManager.registerEngineType("ShortCut", ::ShortCut)
  TypeManager.registerEngineType("Skeleton", ::Skeleton)
  TypeManager.registerEngineType("Skeleton2D", ::Skeleton2D)
  TypeManager.registerEngineType("SkeletonIK", ::SkeletonIK)
  TypeManager.registerEngineType("Skin", ::Skin)
  TypeManager.registerEngineType("SkinReference", ::SkinReference)
  TypeManager.registerEngineType("Sky", ::Sky)
  TypeManager.registerEngineType("Slider", ::Slider)
  TypeManager.registerEngineType("SliderJoint", ::SliderJoint)
  TypeManager.registerEngineType("SoftBody", ::SoftBody)
  TypeManager.registerEngineType("Spatial", ::Spatial)
  TypeManager.registerEngineType("SpatialGizmo", ::SpatialGizmo)
  TypeManager.registerEngineType("SpatialMaterial", ::SpatialMaterial)
  TypeManager.registerEngineType("SpatialVelocityTracker", ::SpatialVelocityTracker)
  TypeManager.registerEngineType("SphereMesh", ::SphereMesh)
  TypeManager.registerEngineType("SphereShape", ::SphereShape)
  TypeManager.registerEngineType("SpinBox", ::SpinBox)
  TypeManager.registerEngineType("SplitContainer", ::SplitContainer)
  TypeManager.registerEngineType("SpotLight", ::SpotLight)
  TypeManager.registerEngineType("SpringArm", ::SpringArm)
  TypeManager.registerEngineType("Sprite", ::Sprite)
  TypeManager.registerEngineType("Sprite3D", ::Sprite3D)
  TypeManager.registerEngineType("SpriteBase3D", ::SpriteBase3D)
  TypeManager.registerEngineType("SpriteFrames", ::SpriteFrames)
  TypeManager.registerEngineType("StaticBody", ::StaticBody)
  TypeManager.registerEngineType("StaticBody2D", ::StaticBody2D)
  TypeManager.registerEngineType("StreamPeer", ::StreamPeer)
  TypeManager.registerEngineType("StreamPeerBuffer", ::StreamPeerBuffer)
  TypeManager.registerEngineType("StreamPeerGDNative", ::StreamPeerGDNative)
  TypeManager.registerEngineType("StreamPeerSSL", ::StreamPeerSSL)
  TypeManager.registerEngineType("StreamPeerTCP", ::StreamPeerTCP)
  TypeManager.registerEngineType("StreamTexture", ::StreamTexture)
  TypeManager.registerEngineType("StyleBox", ::StyleBox)
  TypeManager.registerEngineType("StyleBoxEmpty", ::StyleBoxEmpty)
  TypeManager.registerEngineType("StyleBoxFlat", ::StyleBoxFlat)
  TypeManager.registerEngineType("StyleBoxLine", ::StyleBoxLine)
  TypeManager.registerEngineType("StyleBoxTexture", ::StyleBoxTexture)
  TypeManager.registerEngineType("SurfaceTool", ::SurfaceTool)
  TypeManager.registerEngineType("TCP_Server", ::TCP_Server)
  TypeManager.registerEngineType("TabContainer", ::TabContainer)
  TypeManager.registerEngineType("Tabs", ::Tabs)
  TypeManager.registerEngineType("TextEdit", ::TextEdit)
  TypeManager.registerEngineType("TextFile", ::TextFile)
  TypeManager.registerEngineType("Texture", ::Texture)
  TypeManager.registerEngineType("Texture3D", ::Texture3D)
  TypeManager.registerEngineType("TextureArray", ::TextureArray)
  TypeManager.registerEngineType("TextureButton", ::TextureButton)
  TypeManager.registerEngineType("TextureLayered", ::TextureLayered)
  TypeManager.registerEngineType("TextureProgress", ::TextureProgress)
  TypeManager.registerEngineType("TextureRect", ::TextureRect)
  TypeManager.registerEngineType("Theme", ::Theme)
  TypeManager.registerEngineType("TileMap", ::TileMap)
  TypeManager.registerEngineType("TileSet", ::TileSet)
  TypeManager.registerEngineType("Timer", ::Timer)
  TypeManager.registerEngineType("ToolButton", ::ToolButton)
  TypeManager.registerEngineType("TouchScreenButton", ::TouchScreenButton)
  TypeManager.registerEngineType("Translation", ::Translation)
  TypeManager.registerEngineType("TranslationServer") { TranslationServer }
  TypeManager.registerSingleton("TranslationServer")
  TypeManager.registerEngineType("Tree", ::Tree)
  TypeManager.registerEngineType("TreeItem", ::TreeItem)
  TypeManager.registerEngineType("TriangleMesh", ::TriangleMesh)
  TypeManager.registerEngineType("Tween", ::Tween)
  TypeManager.registerEngineType("UDPServer", ::UDPServer)
  TypeManager.registerEngineType("UPNP", ::UPNP)
  TypeManager.registerEngineType("UPNPDevice", ::UPNPDevice)
  TypeManager.registerEngineType("UndoRedo", ::UndoRedo)
  TypeManager.registerEngineType("VBoxContainer", ::VBoxContainer)
  TypeManager.registerEngineType("VScrollBar", ::VScrollBar)
  TypeManager.registerEngineType("VSeparator", ::VSeparator)
  TypeManager.registerEngineType("VSlider", ::VSlider)
  TypeManager.registerEngineType("VSplitContainer", ::VSplitContainer)
  TypeManager.registerEngineType("VehicleBody", ::VehicleBody)
  TypeManager.registerEngineType("VehicleWheel", ::VehicleWheel)
  TypeManager.registerEngineType("VideoPlayer", ::VideoPlayer)
  TypeManager.registerEngineType("VideoStream", ::VideoStream)
  TypeManager.registerEngineType("VideoStreamGDNative", ::VideoStreamGDNative)
  TypeManager.registerEngineType("VideoStreamTheora", ::VideoStreamTheora)
  TypeManager.registerEngineType("VideoStreamWebm", ::VideoStreamWebm)
  TypeManager.registerEngineType("Viewport", ::Viewport)
  TypeManager.registerEngineType("ViewportContainer", ::ViewportContainer)
  TypeManager.registerEngineType("ViewportTexture", ::ViewportTexture)
  TypeManager.registerEngineType("VisibilityEnabler", ::VisibilityEnabler)
  TypeManager.registerEngineType("VisibilityEnabler2D", ::VisibilityEnabler2D)
  TypeManager.registerEngineType("VisibilityNotifier", ::VisibilityNotifier)
  TypeManager.registerEngineType("VisibilityNotifier2D", ::VisibilityNotifier2D)
  TypeManager.registerEngineType("VisualInstance", ::VisualInstance)
  TypeManager.registerEngineType("VisualScript", ::VisualScript)
  TypeManager.registerEngineType("VisualScriptBasicTypeConstant", ::VisualScriptBasicTypeConstant)
  TypeManager.registerEngineType("VisualScriptBuiltinFunc", ::VisualScriptBuiltinFunc)
  TypeManager.registerEngineType("VisualScriptClassConstant", ::VisualScriptClassConstant)
  TypeManager.registerEngineType("VisualScriptComment", ::VisualScriptComment)
  TypeManager.registerEngineType("VisualScriptComposeArray", ::VisualScriptComposeArray)
  TypeManager.registerEngineType("VisualScriptCondition", ::VisualScriptCondition)
  TypeManager.registerEngineType("VisualScriptConstant", ::VisualScriptConstant)
  TypeManager.registerEngineType("VisualScriptConstructor", ::VisualScriptConstructor)
  TypeManager.registerEngineType("VisualScriptCustomNode", ::VisualScriptCustomNode)
  TypeManager.registerEngineType("VisualScriptDeconstruct", ::VisualScriptDeconstruct)
  TypeManager.registerEngineType("VisualScriptEmitSignal", ::VisualScriptEmitSignal)
  TypeManager.registerEngineType("VisualScriptEngineSingleton", ::VisualScriptEngineSingleton)
  TypeManager.registerEngineType("VisualScriptExpression", ::VisualScriptExpression)
  TypeManager.registerEngineType("VisualScriptFunction", ::VisualScriptFunction)
  TypeManager.registerEngineType("VisualScriptFunctionCall", ::VisualScriptFunctionCall)
  TypeManager.registerEngineType("VisualScriptFunctionState", ::VisualScriptFunctionState)
  TypeManager.registerEngineType("VisualScriptGlobalConstant", ::VisualScriptGlobalConstant)
  TypeManager.registerEngineType("VisualScriptIndexGet", ::VisualScriptIndexGet)
  TypeManager.registerEngineType("VisualScriptIndexSet", ::VisualScriptIndexSet)
  TypeManager.registerEngineType("VisualScriptInputAction", ::VisualScriptInputAction)
  TypeManager.registerEngineType("VisualScriptIterator", ::VisualScriptIterator)
  TypeManager.registerEngineType("VisualScriptLists", ::VisualScriptLists)
  TypeManager.registerEngineType("VisualScriptLocalVar", ::VisualScriptLocalVar)
  TypeManager.registerEngineType("VisualScriptLocalVarSet", ::VisualScriptLocalVarSet)
  TypeManager.registerEngineType("VisualScriptMathConstant", ::VisualScriptMathConstant)
  TypeManager.registerEngineType("VisualScriptNode", ::VisualScriptNode)
  TypeManager.registerEngineType("VisualScriptOperator", ::VisualScriptOperator)
  TypeManager.registerEngineType("VisualScriptPreload", ::VisualScriptPreload)
  TypeManager.registerEngineType("VisualScriptPropertyGet", ::VisualScriptPropertyGet)
  TypeManager.registerEngineType("VisualScriptPropertySet", ::VisualScriptPropertySet)
  TypeManager.registerEngineType("VisualScriptResourcePath", ::VisualScriptResourcePath)
  TypeManager.registerEngineType("VisualScriptReturn", ::VisualScriptReturn)
  TypeManager.registerEngineType("VisualScriptSceneNode", ::VisualScriptSceneNode)
  TypeManager.registerEngineType("VisualScriptSceneTree", ::VisualScriptSceneTree)
  TypeManager.registerEngineType("VisualScriptSelect", ::VisualScriptSelect)
  TypeManager.registerEngineType("VisualScriptSelf", ::VisualScriptSelf)
  TypeManager.registerEngineType("VisualScriptSequence", ::VisualScriptSequence)
  TypeManager.registerEngineType("VisualScriptSubCall", ::VisualScriptSubCall)
  TypeManager.registerEngineType("VisualScriptSwitch", ::VisualScriptSwitch)
  TypeManager.registerEngineType("VisualScriptTypeCast", ::VisualScriptTypeCast)
  TypeManager.registerEngineType("VisualScriptVariableGet", ::VisualScriptVariableGet)
  TypeManager.registerEngineType("VisualScriptVariableSet", ::VisualScriptVariableSet)
  TypeManager.registerEngineType("VisualScriptWhile", ::VisualScriptWhile)
  TypeManager.registerEngineType("VisualScriptYield", ::VisualScriptYield)
  TypeManager.registerEngineType("VisualScriptYieldSignal", ::VisualScriptYieldSignal)
  TypeManager.registerEngineType("VisualServer") { VisualServer }
  TypeManager.registerSingleton("VisualServer")
  TypeManager.registerEngineType("VisualShader", ::VisualShader)
  TypeManager.registerEngineType("VisualShaderNode", ::VisualShaderNode)
  TypeManager.registerEngineType("VisualShaderNodeBooleanConstant",
      ::VisualShaderNodeBooleanConstant)
  TypeManager.registerEngineType("VisualShaderNodeBooleanUniform", ::VisualShaderNodeBooleanUniform)
  TypeManager.registerEngineType("VisualShaderNodeColorConstant", ::VisualShaderNodeColorConstant)
  TypeManager.registerEngineType("VisualShaderNodeColorFunc", ::VisualShaderNodeColorFunc)
  TypeManager.registerEngineType("VisualShaderNodeColorOp", ::VisualShaderNodeColorOp)
  TypeManager.registerEngineType("VisualShaderNodeColorUniform", ::VisualShaderNodeColorUniform)
  TypeManager.registerEngineType("VisualShaderNodeCompare", ::VisualShaderNodeCompare)
  TypeManager.registerEngineType("VisualShaderNodeCubeMap", ::VisualShaderNodeCubeMap)
  TypeManager.registerEngineType("VisualShaderNodeCubeMapUniform", ::VisualShaderNodeCubeMapUniform)
  TypeManager.registerEngineType("VisualShaderNodeCustom", ::VisualShaderNodeCustom)
  TypeManager.registerEngineType("VisualShaderNodeDeterminant", ::VisualShaderNodeDeterminant)
  TypeManager.registerEngineType("VisualShaderNodeDotProduct", ::VisualShaderNodeDotProduct)
  TypeManager.registerEngineType("VisualShaderNodeExpression", ::VisualShaderNodeExpression)
  TypeManager.registerEngineType("VisualShaderNodeFaceForward", ::VisualShaderNodeFaceForward)
  TypeManager.registerEngineType("VisualShaderNodeFresnel", ::VisualShaderNodeFresnel)
  TypeManager.registerEngineType("VisualShaderNodeGlobalExpression",
      ::VisualShaderNodeGlobalExpression)
  TypeManager.registerEngineType("VisualShaderNodeGroupBase", ::VisualShaderNodeGroupBase)
  TypeManager.registerEngineType("VisualShaderNodeIf", ::VisualShaderNodeIf)
  TypeManager.registerEngineType("VisualShaderNodeInput", ::VisualShaderNodeInput)
  TypeManager.registerEngineType("VisualShaderNodeIs", ::VisualShaderNodeIs)
  TypeManager.registerEngineType("VisualShaderNodeOuterProduct", ::VisualShaderNodeOuterProduct)
  TypeManager.registerEngineType("VisualShaderNodeOutput", ::VisualShaderNodeOutput)
  TypeManager.registerEngineType("VisualShaderNodeScalarClamp", ::VisualShaderNodeScalarClamp)
  TypeManager.registerEngineType("VisualShaderNodeScalarConstant", ::VisualShaderNodeScalarConstant)
  TypeManager.registerEngineType("VisualShaderNodeScalarDerivativeFunc",
      ::VisualShaderNodeScalarDerivativeFunc)
  TypeManager.registerEngineType("VisualShaderNodeScalarFunc", ::VisualShaderNodeScalarFunc)
  TypeManager.registerEngineType("VisualShaderNodeScalarInterp", ::VisualShaderNodeScalarInterp)
  TypeManager.registerEngineType("VisualShaderNodeScalarOp", ::VisualShaderNodeScalarOp)
  TypeManager.registerEngineType("VisualShaderNodeScalarSmoothStep",
      ::VisualShaderNodeScalarSmoothStep)
  TypeManager.registerEngineType("VisualShaderNodeScalarSwitch", ::VisualShaderNodeScalarSwitch)
  TypeManager.registerEngineType("VisualShaderNodeScalarUniform", ::VisualShaderNodeScalarUniform)
  TypeManager.registerEngineType("VisualShaderNodeSwitch", ::VisualShaderNodeSwitch)
  TypeManager.registerEngineType("VisualShaderNodeTexture", ::VisualShaderNodeTexture)
  TypeManager.registerEngineType("VisualShaderNodeTextureUniform", ::VisualShaderNodeTextureUniform)
  TypeManager.registerEngineType("VisualShaderNodeTextureUniformTriplanar",
      ::VisualShaderNodeTextureUniformTriplanar)
  TypeManager.registerEngineType("VisualShaderNodeTransformCompose",
      ::VisualShaderNodeTransformCompose)
  TypeManager.registerEngineType("VisualShaderNodeTransformConstant",
      ::VisualShaderNodeTransformConstant)
  TypeManager.registerEngineType("VisualShaderNodeTransformDecompose",
      ::VisualShaderNodeTransformDecompose)
  TypeManager.registerEngineType("VisualShaderNodeTransformFunc", ::VisualShaderNodeTransformFunc)
  TypeManager.registerEngineType("VisualShaderNodeTransformMult", ::VisualShaderNodeTransformMult)
  TypeManager.registerEngineType("VisualShaderNodeTransformUniform",
      ::VisualShaderNodeTransformUniform)
  TypeManager.registerEngineType("VisualShaderNodeTransformVecMult",
      ::VisualShaderNodeTransformVecMult)
  TypeManager.registerEngineType("VisualShaderNodeUniform", ::VisualShaderNodeUniform)
  TypeManager.registerEngineType("VisualShaderNodeUniformRef", ::VisualShaderNodeUniformRef)
  TypeManager.registerEngineType("VisualShaderNodeVec3Constant", ::VisualShaderNodeVec3Constant)
  TypeManager.registerEngineType("VisualShaderNodeVec3Uniform", ::VisualShaderNodeVec3Uniform)
  TypeManager.registerEngineType("VisualShaderNodeVectorClamp", ::VisualShaderNodeVectorClamp)
  TypeManager.registerEngineType("VisualShaderNodeVectorCompose", ::VisualShaderNodeVectorCompose)
  TypeManager.registerEngineType("VisualShaderNodeVectorDecompose",
      ::VisualShaderNodeVectorDecompose)
  TypeManager.registerEngineType("VisualShaderNodeVectorDerivativeFunc",
      ::VisualShaderNodeVectorDerivativeFunc)
  TypeManager.registerEngineType("VisualShaderNodeVectorDistance", ::VisualShaderNodeVectorDistance)
  TypeManager.registerEngineType("VisualShaderNodeVectorFunc", ::VisualShaderNodeVectorFunc)
  TypeManager.registerEngineType("VisualShaderNodeVectorInterp", ::VisualShaderNodeVectorInterp)
  TypeManager.registerEngineType("VisualShaderNodeVectorLen", ::VisualShaderNodeVectorLen)
  TypeManager.registerEngineType("VisualShaderNodeVectorOp", ::VisualShaderNodeVectorOp)
  TypeManager.registerEngineType("VisualShaderNodeVectorRefract", ::VisualShaderNodeVectorRefract)
  TypeManager.registerEngineType("VisualShaderNodeVectorScalarMix",
      ::VisualShaderNodeVectorScalarMix)
  TypeManager.registerEngineType("VisualShaderNodeVectorScalarSmoothStep",
      ::VisualShaderNodeVectorScalarSmoothStep)
  TypeManager.registerEngineType("VisualShaderNodeVectorScalarStep",
      ::VisualShaderNodeVectorScalarStep)
  TypeManager.registerEngineType("VisualShaderNodeVectorSmoothStep",
      ::VisualShaderNodeVectorSmoothStep)
  TypeManager.registerEngineType("WeakRef", ::WeakRef)
  TypeManager.registerEngineType("WebRTCDataChannel", ::WebRTCDataChannel)
  TypeManager.registerEngineType("WebRTCDataChannelGDNative", ::WebRTCDataChannelGDNative)
  TypeManager.registerEngineType("WebRTCMultiplayer", ::WebRTCMultiplayer)
  TypeManager.registerEngineType("WebRTCPeerConnection", ::WebRTCPeerConnection)
  TypeManager.registerEngineType("WebRTCPeerConnectionGDNative", ::WebRTCPeerConnectionGDNative)
  TypeManager.registerEngineType("WebSocketClient", ::WebSocketClient)
  TypeManager.registerEngineType("WebSocketMultiplayerPeer", ::WebSocketMultiplayerPeer)
  TypeManager.registerEngineType("WebSocketPeer", ::WebSocketPeer)
  TypeManager.registerEngineType("WebSocketServer", ::WebSocketServer)
  TypeManager.registerEngineType("WebXRInterface", ::WebXRInterface)
  TypeManager.registerEngineType("WindowDialog", ::WindowDialog)
  TypeManager.registerEngineType("World", ::World)
  TypeManager.registerEngineType("World2D", ::World2D)
  TypeManager.registerEngineType("WorldEnvironment", ::WorldEnvironment)
  TypeManager.registerEngineType("X509Certificate", ::X509Certificate)
  TypeManager.registerEngineType("XMLParser", ::XMLParser)
  TypeManager.registerEngineType("YSort", ::YSort)
  TypeManager.registerEngineType("_ClassDB") { ClassDB }
  TypeManager.registerSingleton("ClassDB")
  TypeManager.registerEngineType("_Directory", ::Directory)
  TypeManager.registerEngineType("_Engine") { Engine }
  TypeManager.registerSingleton("Engine")
  TypeManager.registerEngineType("_File", ::File)
  TypeManager.registerEngineType("_Geometry") { Geometry }
  TypeManager.registerSingleton("Geometry")
  TypeManager.registerEngineType("_JSON") { JSON }
  TypeManager.registerSingleton("JSON")
  TypeManager.registerEngineType("_Marshalls") { Marshalls }
  TypeManager.registerSingleton("Marshalls")
  TypeManager.registerEngineType("_Mutex", ::Mutex)
  TypeManager.registerEngineType("_OS") { OS }
  TypeManager.registerSingleton("OS")
  TypeManager.registerEngineType("_ResourceLoader") { ResourceLoader }
  TypeManager.registerSingleton("ResourceLoader")
  TypeManager.registerEngineType("_ResourceSaver") { ResourceSaver }
  TypeManager.registerSingleton("ResourceSaver")
  TypeManager.registerEngineType("_Semaphore", ::Semaphore)
  TypeManager.registerEngineType("_Thread", ::Thread)
  TypeManager.registerEngineType("_VisualScriptEditor") { VisualScriptEditor }
  TypeManager.registerSingleton("VisualScriptEditor")
}

public fun registerVariantMapping(): Unit {
  variantMapper[GlobalConstants::class] = OBJECT
  variantMapper[AESContext::class] = OBJECT
  variantMapper[ARVRAnchor::class] = OBJECT
  variantMapper[ARVRCamera::class] = OBJECT
  variantMapper[ARVRController::class] = OBJECT
  variantMapper[ARVRInterface::class] = OBJECT
  variantMapper[ARVRInterfaceGDNative::class] = OBJECT
  variantMapper[ARVROrigin::class] = OBJECT
  variantMapper[ARVRPositionalTracker::class] = OBJECT
  variantMapper[ARVRServer::class] = OBJECT
  variantMapper[AStar::class] = OBJECT
  variantMapper[AStar2D::class] = OBJECT
  variantMapper[AcceptDialog::class] = OBJECT
  variantMapper[AnimatedSprite::class] = OBJECT
  variantMapper[AnimatedSprite3D::class] = OBJECT
  variantMapper[AnimatedTexture::class] = OBJECT
  variantMapper[Animation::class] = OBJECT
  variantMapper[AnimationNode::class] = OBJECT
  variantMapper[AnimationNodeAdd2::class] = OBJECT
  variantMapper[AnimationNodeAdd3::class] = OBJECT
  variantMapper[AnimationNodeAnimation::class] = OBJECT
  variantMapper[AnimationNodeBlend2::class] = OBJECT
  variantMapper[AnimationNodeBlend3::class] = OBJECT
  variantMapper[AnimationNodeBlendSpace1D::class] = OBJECT
  variantMapper[AnimationNodeBlendSpace2D::class] = OBJECT
  variantMapper[AnimationNodeBlendTree::class] = OBJECT
  variantMapper[AnimationNodeOneShot::class] = OBJECT
  variantMapper[AnimationNodeOutput::class] = OBJECT
  variantMapper[AnimationNodeStateMachine::class] = OBJECT
  variantMapper[AnimationNodeStateMachinePlayback::class] = OBJECT
  variantMapper[AnimationNodeStateMachineTransition::class] = OBJECT
  variantMapper[AnimationNodeTimeScale::class] = OBJECT
  variantMapper[AnimationNodeTimeSeek::class] = OBJECT
  variantMapper[AnimationNodeTransition::class] = OBJECT
  variantMapper[AnimationPlayer::class] = OBJECT
  variantMapper[AnimationRootNode::class] = OBJECT
  variantMapper[AnimationTrackEditPlugin::class] = OBJECT
  variantMapper[AnimationTree::class] = OBJECT
  variantMapper[AnimationTreePlayer::class] = OBJECT
  variantMapper[Area::class] = OBJECT
  variantMapper[Area2D::class] = OBJECT
  variantMapper[ArrayMesh::class] = OBJECT
  variantMapper[AspectRatioContainer::class] = OBJECT
  variantMapper[AtlasTexture::class] = OBJECT
  variantMapper[AudioBusLayout::class] = OBJECT
  variantMapper[AudioEffect::class] = OBJECT
  variantMapper[AudioEffectAmplify::class] = OBJECT
  variantMapper[AudioEffectBandLimitFilter::class] = OBJECT
  variantMapper[AudioEffectBandPassFilter::class] = OBJECT
  variantMapper[AudioEffectCapture::class] = OBJECT
  variantMapper[AudioEffectChorus::class] = OBJECT
  variantMapper[AudioEffectCompressor::class] = OBJECT
  variantMapper[AudioEffectDelay::class] = OBJECT
  variantMapper[AudioEffectDistortion::class] = OBJECT
  variantMapper[AudioEffectEQ::class] = OBJECT
  variantMapper[AudioEffectEQ10::class] = OBJECT
  variantMapper[AudioEffectEQ21::class] = OBJECT
  variantMapper[AudioEffectEQ6::class] = OBJECT
  variantMapper[AudioEffectFilter::class] = OBJECT
  variantMapper[AudioEffectHighPassFilter::class] = OBJECT
  variantMapper[AudioEffectHighShelfFilter::class] = OBJECT
  variantMapper[AudioEffectInstance::class] = OBJECT
  variantMapper[AudioEffectLimiter::class] = OBJECT
  variantMapper[AudioEffectLowPassFilter::class] = OBJECT
  variantMapper[AudioEffectLowShelfFilter::class] = OBJECT
  variantMapper[AudioEffectNotchFilter::class] = OBJECT
  variantMapper[AudioEffectPanner::class] = OBJECT
  variantMapper[AudioEffectPhaser::class] = OBJECT
  variantMapper[AudioEffectPitchShift::class] = OBJECT
  variantMapper[AudioEffectRecord::class] = OBJECT
  variantMapper[AudioEffectReverb::class] = OBJECT
  variantMapper[AudioEffectSpectrumAnalyzer::class] = OBJECT
  variantMapper[AudioEffectSpectrumAnalyzerInstance::class] = OBJECT
  variantMapper[AudioEffectStereoEnhance::class] = OBJECT
  variantMapper[AudioServer::class] = OBJECT
  variantMapper[AudioStream::class] = OBJECT
  variantMapper[AudioStreamGenerator::class] = OBJECT
  variantMapper[AudioStreamGeneratorPlayback::class] = OBJECT
  variantMapper[AudioStreamMP3::class] = OBJECT
  variantMapper[AudioStreamMicrophone::class] = OBJECT
  variantMapper[AudioStreamOGGVorbis::class] = OBJECT
  variantMapper[AudioStreamPlayback::class] = OBJECT
  variantMapper[AudioStreamPlaybackResampled::class] = OBJECT
  variantMapper[AudioStreamPlayer::class] = OBJECT
  variantMapper[AudioStreamPlayer2D::class] = OBJECT
  variantMapper[AudioStreamPlayer3D::class] = OBJECT
  variantMapper[AudioStreamRandomPitch::class] = OBJECT
  variantMapper[AudioStreamSample::class] = OBJECT
  variantMapper[BackBufferCopy::class] = OBJECT
  variantMapper[BakedLightmap::class] = OBJECT
  variantMapper[BakedLightmapData::class] = OBJECT
  variantMapper[BaseButton::class] = OBJECT
  variantMapper[BitMap::class] = OBJECT
  variantMapper[BitmapFont::class] = OBJECT
  variantMapper[Bone2D::class] = OBJECT
  variantMapper[BoneAttachment::class] = OBJECT
  variantMapper[BoxContainer::class] = OBJECT
  variantMapper[BoxShape::class] = OBJECT
  variantMapper[BulletPhysicsDirectBodyState::class] = OBJECT
  variantMapper[Button::class] = OBJECT
  variantMapper[ButtonGroup::class] = OBJECT
  variantMapper[CPUParticles::class] = OBJECT
  variantMapper[CPUParticles2D::class] = OBJECT
  variantMapper[CSGBox::class] = OBJECT
  variantMapper[CSGCombiner::class] = OBJECT
  variantMapper[CSGCylinder::class] = OBJECT
  variantMapper[CSGMesh::class] = OBJECT
  variantMapper[CSGPolygon::class] = OBJECT
  variantMapper[CSGPrimitive::class] = OBJECT
  variantMapper[CSGShape::class] = OBJECT
  variantMapper[CSGSphere::class] = OBJECT
  variantMapper[CSGTorus::class] = OBJECT
  variantMapper[Camera::class] = OBJECT
  variantMapper[Camera2D::class] = OBJECT
  variantMapper[CameraFeed::class] = OBJECT
  variantMapper[CameraServer::class] = OBJECT
  variantMapper[CameraTexture::class] = OBJECT
  variantMapper[CanvasItem::class] = OBJECT
  variantMapper[CanvasItemMaterial::class] = OBJECT
  variantMapper[CanvasLayer::class] = OBJECT
  variantMapper[CanvasModulate::class] = OBJECT
  variantMapper[CapsuleMesh::class] = OBJECT
  variantMapper[CapsuleShape::class] = OBJECT
  variantMapper[CapsuleShape2D::class] = OBJECT
  variantMapper[CenterContainer::class] = OBJECT
  variantMapper[CharFXTransform::class] = OBJECT
  variantMapper[CheckBox::class] = OBJECT
  variantMapper[CheckButton::class] = OBJECT
  variantMapper[CircleShape2D::class] = OBJECT
  variantMapper[ClippedCamera::class] = OBJECT
  variantMapper[CollisionObject::class] = OBJECT
  variantMapper[CollisionObject2D::class] = OBJECT
  variantMapper[CollisionPolygon::class] = OBJECT
  variantMapper[CollisionPolygon2D::class] = OBJECT
  variantMapper[CollisionShape::class] = OBJECT
  variantMapper[CollisionShape2D::class] = OBJECT
  variantMapper[ColorPicker::class] = OBJECT
  variantMapper[ColorPickerButton::class] = OBJECT
  variantMapper[ColorRect::class] = OBJECT
  variantMapper[ConcavePolygonShape::class] = OBJECT
  variantMapper[ConcavePolygonShape2D::class] = OBJECT
  variantMapper[ConeTwistJoint::class] = OBJECT
  variantMapper[ConfigFile::class] = OBJECT
  variantMapper[ConfirmationDialog::class] = OBJECT
  variantMapper[Container::class] = OBJECT
  variantMapper[Control::class] = OBJECT
  variantMapper[ConvexPolygonShape::class] = OBJECT
  variantMapper[ConvexPolygonShape2D::class] = OBJECT
  variantMapper[Crypto::class] = OBJECT
  variantMapper[CryptoKey::class] = OBJECT
  variantMapper[CubeMap::class] = OBJECT
  variantMapper[CubeMesh::class] = OBJECT
  variantMapper[CullInstance::class] = OBJECT
  variantMapper[Curve::class] = OBJECT
  variantMapper[Curve2D::class] = OBJECT
  variantMapper[Curve3D::class] = OBJECT
  variantMapper[CurveTexture::class] = OBJECT
  variantMapper[CylinderMesh::class] = OBJECT
  variantMapper[CylinderShape::class] = OBJECT
  variantMapper[DTLSServer::class] = OBJECT
  variantMapper[DampedSpringJoint2D::class] = OBJECT
  variantMapper[DirectionalLight::class] = OBJECT
  variantMapper[DynamicFont::class] = OBJECT
  variantMapper[DynamicFontData::class] = OBJECT
  variantMapper[EditorExportPlugin::class] = OBJECT
  variantMapper[EditorFeatureProfile::class] = OBJECT
  variantMapper[EditorFileDialog::class] = OBJECT
  variantMapper[EditorFileSystem::class] = OBJECT
  variantMapper[EditorFileSystemDirectory::class] = OBJECT
  variantMapper[EditorImportPlugin::class] = OBJECT
  variantMapper[EditorInspector::class] = OBJECT
  variantMapper[EditorInspectorPlugin::class] = OBJECT
  variantMapper[EditorInterface::class] = OBJECT
  variantMapper[EditorNavigationMeshGenerator::class] = OBJECT
  variantMapper[EditorPlugin::class] = OBJECT
  variantMapper[EditorProperty::class] = OBJECT
  variantMapper[EditorResourceConversionPlugin::class] = OBJECT
  variantMapper[EditorResourcePicker::class] = OBJECT
  variantMapper[EditorResourcePreview::class] = OBJECT
  variantMapper[EditorResourcePreviewGenerator::class] = OBJECT
  variantMapper[EditorSceneImporter::class] = OBJECT
  variantMapper[EditorSceneImporterFBX::class] = OBJECT
  variantMapper[EditorSceneImporterGLTF::class] = OBJECT
  variantMapper[EditorScenePostImport::class] = OBJECT
  variantMapper[EditorScript::class] = OBJECT
  variantMapper[EditorScriptPicker::class] = OBJECT
  variantMapper[EditorSelection::class] = OBJECT
  variantMapper[EditorSettings::class] = OBJECT
  variantMapper[EditorSpatialGizmo::class] = OBJECT
  variantMapper[EditorSpatialGizmoPlugin::class] = OBJECT
  variantMapper[EditorSpinSlider::class] = OBJECT
  variantMapper[EditorVCSInterface::class] = OBJECT
  variantMapper[EncodedObjectAsID::class] = OBJECT
  variantMapper[Environment::class] = OBJECT
  variantMapper[Expression::class] = OBJECT
  variantMapper[ExternalTexture::class] = OBJECT
  variantMapper[FileDialog::class] = OBJECT
  variantMapper[FileSystemDock::class] = OBJECT
  variantMapper[Font::class] = OBJECT
  variantMapper[FuncRef::class] = OBJECT
  variantMapper[GDNative::class] = OBJECT
  variantMapper[GDNativeLibrary::class] = OBJECT
  variantMapper[GDScript::class] = OBJECT
  variantMapper[GDScriptFunctionState::class] = OBJECT
  variantMapper[GIProbe::class] = OBJECT
  variantMapper[GIProbeData::class] = OBJECT
  variantMapper[GLTFAccessor::class] = OBJECT
  variantMapper[GLTFAnimation::class] = OBJECT
  variantMapper[GLTFBufferView::class] = OBJECT
  variantMapper[GLTFCamera::class] = OBJECT
  variantMapper[GLTFDocument::class] = OBJECT
  variantMapper[GLTFLight::class] = OBJECT
  variantMapper[GLTFMesh::class] = OBJECT
  variantMapper[GLTFNode::class] = OBJECT
  variantMapper[GLTFSkeleton::class] = OBJECT
  variantMapper[GLTFSkin::class] = OBJECT
  variantMapper[GLTFSpecGloss::class] = OBJECT
  variantMapper[GLTFState::class] = OBJECT
  variantMapper[GLTFTexture::class] = OBJECT
  variantMapper[Generic6DOFJoint::class] = OBJECT
  variantMapper[GeometryInstance::class] = OBJECT
  variantMapper[Gradient::class] = OBJECT
  variantMapper[GradientTexture::class] = OBJECT
  variantMapper[GraphEdit::class] = OBJECT
  variantMapper[GraphNode::class] = OBJECT
  variantMapper[GridContainer::class] = OBJECT
  variantMapper[GridMap::class] = OBJECT
  variantMapper[GrooveJoint2D::class] = OBJECT
  variantMapper[HBoxContainer::class] = OBJECT
  variantMapper[HMACContext::class] = OBJECT
  variantMapper[HScrollBar::class] = OBJECT
  variantMapper[HSeparator::class] = OBJECT
  variantMapper[HSlider::class] = OBJECT
  variantMapper[HSplitContainer::class] = OBJECT
  variantMapper[HTTPClient::class] = OBJECT
  variantMapper[HTTPRequest::class] = OBJECT
  variantMapper[HashingContext::class] = OBJECT
  variantMapper[HeightMapShape::class] = OBJECT
  variantMapper[HingeJoint::class] = OBJECT
  variantMapper[IP::class] = OBJECT
  variantMapper[Image::class] = OBJECT
  variantMapper[ImageTexture::class] = OBJECT
  variantMapper[ImmediateGeometry::class] = OBJECT
  variantMapper[Input::class] = OBJECT
  variantMapper[InputEvent::class] = OBJECT
  variantMapper[InputEventAction::class] = OBJECT
  variantMapper[InputEventGesture::class] = OBJECT
  variantMapper[InputEventJoypadButton::class] = OBJECT
  variantMapper[InputEventJoypadMotion::class] = OBJECT
  variantMapper[InputEventKey::class] = OBJECT
  variantMapper[InputEventMIDI::class] = OBJECT
  variantMapper[InputEventMagnifyGesture::class] = OBJECT
  variantMapper[InputEventMouse::class] = OBJECT
  variantMapper[InputEventMouseButton::class] = OBJECT
  variantMapper[InputEventMouseMotion::class] = OBJECT
  variantMapper[InputEventPanGesture::class] = OBJECT
  variantMapper[InputEventScreenDrag::class] = OBJECT
  variantMapper[InputEventScreenTouch::class] = OBJECT
  variantMapper[InputEventWithModifiers::class] = OBJECT
  variantMapper[InputMap::class] = OBJECT
  variantMapper[InstancePlaceholder::class] = OBJECT
  variantMapper[InterpolatedCamera::class] = OBJECT
  variantMapper[ItemList::class] = OBJECT
  variantMapper[JNISingleton::class] = OBJECT
  variantMapper[JSONParseResult::class] = OBJECT
  variantMapper[JSONRPC::class] = OBJECT
  variantMapper[JavaClass::class] = OBJECT
  variantMapper[JavaClassWrapper::class] = OBJECT
  variantMapper[JavaScript::class] = OBJECT
  variantMapper[JavaScriptObject::class] = OBJECT
  variantMapper[Joint::class] = OBJECT
  variantMapper[Joint2D::class] = OBJECT
  variantMapper[KinematicBody::class] = OBJECT
  variantMapper[KinematicBody2D::class] = OBJECT
  variantMapper[KinematicCollision::class] = OBJECT
  variantMapper[KinematicCollision2D::class] = OBJECT
  variantMapper[KotlinScript::class] = OBJECT
  variantMapper[Label::class] = OBJECT
  variantMapper[LargeTexture::class] = OBJECT
  variantMapper[Light::class] = OBJECT
  variantMapper[Light2D::class] = OBJECT
  variantMapper[LightOccluder2D::class] = OBJECT
  variantMapper[Line2D::class] = OBJECT
  variantMapper[LineEdit::class] = OBJECT
  variantMapper[LineShape2D::class] = OBJECT
  variantMapper[LinkButton::class] = OBJECT
  variantMapper[Listener::class] = OBJECT
  variantMapper[Listener2D::class] = OBJECT
  variantMapper[MainLoop::class] = OBJECT
  variantMapper[MarginContainer::class] = OBJECT
  variantMapper[Material::class] = OBJECT
  variantMapper[MenuButton::class] = OBJECT
  variantMapper[Mesh::class] = OBJECT
  variantMapper[MeshDataTool::class] = OBJECT
  variantMapper[MeshInstance::class] = OBJECT
  variantMapper[MeshInstance2D::class] = OBJECT
  variantMapper[MeshLibrary::class] = OBJECT
  variantMapper[MeshTexture::class] = OBJECT
  variantMapper[MobileVRInterface::class] = OBJECT
  variantMapper[MultiMesh::class] = OBJECT
  variantMapper[MultiMeshInstance::class] = OBJECT
  variantMapper[MultiMeshInstance2D::class] = OBJECT
  variantMapper[MultiplayerAPI::class] = OBJECT
  variantMapper[MultiplayerPeerGDNative::class] = OBJECT
  variantMapper[NativeScript::class] = OBJECT
  variantMapper[Navigation::class] = OBJECT
  variantMapper[Navigation2D::class] = OBJECT
  variantMapper[NavigationMesh::class] = OBJECT
  variantMapper[NavigationMeshInstance::class] = OBJECT
  variantMapper[NavigationPolygon::class] = OBJECT
  variantMapper[NavigationPolygonInstance::class] = OBJECT
  variantMapper[NetworkedMultiplayerENet::class] = OBJECT
  variantMapper[NetworkedMultiplayerPeer::class] = OBJECT
  variantMapper[NinePatchRect::class] = OBJECT
  variantMapper[Node::class] = OBJECT
  variantMapper[Node2D::class] = OBJECT
  variantMapper[NoiseTexture::class] = OBJECT
  variantMapper[Object::class] = OBJECT
  variantMapper[Occluder::class] = OBJECT
  variantMapper[OccluderPolygon2D::class] = OBJECT
  variantMapper[OccluderShape::class] = OBJECT
  variantMapper[OccluderShapeSphere::class] = OBJECT
  variantMapper[OmniLight::class] = OBJECT
  variantMapper[OpenSimplexNoise::class] = OBJECT
  variantMapper[OptionButton::class] = OBJECT
  variantMapper[PCKPacker::class] = OBJECT
  variantMapper[PHashTranslation::class] = OBJECT
  variantMapper[PackedDataContainer::class] = OBJECT
  variantMapper[PackedDataContainerRef::class] = OBJECT
  variantMapper[PackedScene::class] = OBJECT
  variantMapper[PackedSceneGLTF::class] = OBJECT
  variantMapper[PacketPeer::class] = OBJECT
  variantMapper[PacketPeerDTLS::class] = OBJECT
  variantMapper[PacketPeerGDNative::class] = OBJECT
  variantMapper[PacketPeerStream::class] = OBJECT
  variantMapper[PacketPeerUDP::class] = OBJECT
  variantMapper[Panel::class] = OBJECT
  variantMapper[PanelContainer::class] = OBJECT
  variantMapper[PanoramaSky::class] = OBJECT
  variantMapper[ParallaxBackground::class] = OBJECT
  variantMapper[ParallaxLayer::class] = OBJECT
  variantMapper[Particles::class] = OBJECT
  variantMapper[Particles2D::class] = OBJECT
  variantMapper[ParticlesMaterial::class] = OBJECT
  variantMapper[Path::class] = OBJECT
  variantMapper[Path2D::class] = OBJECT
  variantMapper[PathFollow::class] = OBJECT
  variantMapper[PathFollow2D::class] = OBJECT
  variantMapper[Performance::class] = OBJECT
  variantMapper[PhysicalBone::class] = OBJECT
  variantMapper[Physics2DDirectBodyState::class] = OBJECT
  variantMapper[Physics2DDirectBodyStateSW::class] = OBJECT
  variantMapper[Physics2DDirectSpaceState::class] = OBJECT
  variantMapper[Physics2DServer::class] = OBJECT
  variantMapper[Physics2DShapeQueryParameters::class] = OBJECT
  variantMapper[Physics2DTestMotionResult::class] = OBJECT
  variantMapper[PhysicsBody::class] = OBJECT
  variantMapper[PhysicsBody2D::class] = OBJECT
  variantMapper[PhysicsDirectBodyState::class] = OBJECT
  variantMapper[PhysicsDirectSpaceState::class] = OBJECT
  variantMapper[PhysicsMaterial::class] = OBJECT
  variantMapper[PhysicsServer::class] = OBJECT
  variantMapper[PhysicsShapeQueryParameters::class] = OBJECT
  variantMapper[PhysicsTestMotionResult::class] = OBJECT
  variantMapper[PinJoint::class] = OBJECT
  variantMapper[PinJoint2D::class] = OBJECT
  variantMapper[PlaneMesh::class] = OBJECT
  variantMapper[PlaneShape::class] = OBJECT
  variantMapper[PluginScript::class] = OBJECT
  variantMapper[PointMesh::class] = OBJECT
  variantMapper[Polygon2D::class] = OBJECT
  variantMapper[PolygonPathFinder::class] = OBJECT
  variantMapper[Popup::class] = OBJECT
  variantMapper[PopupDialog::class] = OBJECT
  variantMapper[PopupMenu::class] = OBJECT
  variantMapper[PopupPanel::class] = OBJECT
  variantMapper[Portal::class] = OBJECT
  variantMapper[Position2D::class] = OBJECT
  variantMapper[Position3D::class] = OBJECT
  variantMapper[PrimitiveMesh::class] = OBJECT
  variantMapper[PrismMesh::class] = OBJECT
  variantMapper[ProceduralSky::class] = OBJECT
  variantMapper[ProgressBar::class] = OBJECT
  variantMapper[ProjectSettings::class] = OBJECT
  variantMapper[ProximityGroup::class] = OBJECT
  variantMapper[ProxyTexture::class] = OBJECT
  variantMapper[QuadMesh::class] = OBJECT
  variantMapper[RandomNumberGenerator::class] = OBJECT
  variantMapper[Range::class] = OBJECT
  variantMapper[RayCast::class] = OBJECT
  variantMapper[RayCast2D::class] = OBJECT
  variantMapper[RayShape::class] = OBJECT
  variantMapper[RayShape2D::class] = OBJECT
  variantMapper[RectangleShape2D::class] = OBJECT
  variantMapper[Reference::class] = OBJECT
  variantMapper[ReferenceRect::class] = OBJECT
  variantMapper[ReflectionProbe::class] = OBJECT
  variantMapper[RegEx::class] = OBJECT
  variantMapper[RegExMatch::class] = OBJECT
  variantMapper[RemoteTransform::class] = OBJECT
  variantMapper[RemoteTransform2D::class] = OBJECT
  variantMapper[Resource::class] = OBJECT
  variantMapper[ResourceFormatLoader::class] = OBJECT
  variantMapper[ResourceFormatSaver::class] = OBJECT
  variantMapper[ResourceImporter::class] = OBJECT
  variantMapper[ResourceInteractiveLoader::class] = OBJECT
  variantMapper[ResourcePreloader::class] = OBJECT
  variantMapper[RichTextEffect::class] = OBJECT
  variantMapper[RichTextLabel::class] = OBJECT
  variantMapper[RigidBody::class] = OBJECT
  variantMapper[RigidBody2D::class] = OBJECT
  variantMapper[Room::class] = OBJECT
  variantMapper[RoomGroup::class] = OBJECT
  variantMapper[RoomManager::class] = OBJECT
  variantMapper[RootMotionView::class] = OBJECT
  variantMapper[SceneState::class] = OBJECT
  variantMapper[SceneTree::class] = OBJECT
  variantMapper[SceneTreeTimer::class] = OBJECT
  variantMapper[Script::class] = OBJECT
  variantMapper[ScriptCreateDialog::class] = OBJECT
  variantMapper[ScriptEditor::class] = OBJECT
  variantMapper[ScrollBar::class] = OBJECT
  variantMapper[ScrollContainer::class] = OBJECT
  variantMapper[SegmentShape2D::class] = OBJECT
  variantMapper[Separator::class] = OBJECT
  variantMapper[Shader::class] = OBJECT
  variantMapper[ShaderMaterial::class] = OBJECT
  variantMapper[Shape::class] = OBJECT
  variantMapper[Shape2D::class] = OBJECT
  variantMapper[ShortCut::class] = OBJECT
  variantMapper[Skeleton::class] = OBJECT
  variantMapper[Skeleton2D::class] = OBJECT
  variantMapper[SkeletonIK::class] = OBJECT
  variantMapper[Skin::class] = OBJECT
  variantMapper[SkinReference::class] = OBJECT
  variantMapper[Sky::class] = OBJECT
  variantMapper[Slider::class] = OBJECT
  variantMapper[SliderJoint::class] = OBJECT
  variantMapper[SoftBody::class] = OBJECT
  variantMapper[Spatial::class] = OBJECT
  variantMapper[SpatialGizmo::class] = OBJECT
  variantMapper[SpatialMaterial::class] = OBJECT
  variantMapper[SpatialVelocityTracker::class] = OBJECT
  variantMapper[SphereMesh::class] = OBJECT
  variantMapper[SphereShape::class] = OBJECT
  variantMapper[SpinBox::class] = OBJECT
  variantMapper[SplitContainer::class] = OBJECT
  variantMapper[SpotLight::class] = OBJECT
  variantMapper[SpringArm::class] = OBJECT
  variantMapper[Sprite::class] = OBJECT
  variantMapper[Sprite3D::class] = OBJECT
  variantMapper[SpriteBase3D::class] = OBJECT
  variantMapper[SpriteFrames::class] = OBJECT
  variantMapper[StaticBody::class] = OBJECT
  variantMapper[StaticBody2D::class] = OBJECT
  variantMapper[StreamPeer::class] = OBJECT
  variantMapper[StreamPeerBuffer::class] = OBJECT
  variantMapper[StreamPeerGDNative::class] = OBJECT
  variantMapper[StreamPeerSSL::class] = OBJECT
  variantMapper[StreamPeerTCP::class] = OBJECT
  variantMapper[StreamTexture::class] = OBJECT
  variantMapper[StyleBox::class] = OBJECT
  variantMapper[StyleBoxEmpty::class] = OBJECT
  variantMapper[StyleBoxFlat::class] = OBJECT
  variantMapper[StyleBoxLine::class] = OBJECT
  variantMapper[StyleBoxTexture::class] = OBJECT
  variantMapper[SurfaceTool::class] = OBJECT
  variantMapper[TCP_Server::class] = OBJECT
  variantMapper[TabContainer::class] = OBJECT
  variantMapper[Tabs::class] = OBJECT
  variantMapper[TextEdit::class] = OBJECT
  variantMapper[TextFile::class] = OBJECT
  variantMapper[Texture::class] = OBJECT
  variantMapper[Texture3D::class] = OBJECT
  variantMapper[TextureArray::class] = OBJECT
  variantMapper[TextureButton::class] = OBJECT
  variantMapper[TextureLayered::class] = OBJECT
  variantMapper[TextureProgress::class] = OBJECT
  variantMapper[TextureRect::class] = OBJECT
  variantMapper[Theme::class] = OBJECT
  variantMapper[TileMap::class] = OBJECT
  variantMapper[TileSet::class] = OBJECT
  variantMapper[Timer::class] = OBJECT
  variantMapper[ToolButton::class] = OBJECT
  variantMapper[TouchScreenButton::class] = OBJECT
  variantMapper[Translation::class] = OBJECT
  variantMapper[TranslationServer::class] = OBJECT
  variantMapper[Tree::class] = OBJECT
  variantMapper[TreeItem::class] = OBJECT
  variantMapper[TriangleMesh::class] = OBJECT
  variantMapper[Tween::class] = OBJECT
  variantMapper[UDPServer::class] = OBJECT
  variantMapper[UPNP::class] = OBJECT
  variantMapper[UPNPDevice::class] = OBJECT
  variantMapper[UndoRedo::class] = OBJECT
  variantMapper[VBoxContainer::class] = OBJECT
  variantMapper[VScrollBar::class] = OBJECT
  variantMapper[VSeparator::class] = OBJECT
  variantMapper[VSlider::class] = OBJECT
  variantMapper[VSplitContainer::class] = OBJECT
  variantMapper[VehicleBody::class] = OBJECT
  variantMapper[VehicleWheel::class] = OBJECT
  variantMapper[VideoPlayer::class] = OBJECT
  variantMapper[VideoStream::class] = OBJECT
  variantMapper[VideoStreamGDNative::class] = OBJECT
  variantMapper[VideoStreamTheora::class] = OBJECT
  variantMapper[VideoStreamWebm::class] = OBJECT
  variantMapper[Viewport::class] = OBJECT
  variantMapper[ViewportContainer::class] = OBJECT
  variantMapper[ViewportTexture::class] = OBJECT
  variantMapper[VisibilityEnabler::class] = OBJECT
  variantMapper[VisibilityEnabler2D::class] = OBJECT
  variantMapper[VisibilityNotifier::class] = OBJECT
  variantMapper[VisibilityNotifier2D::class] = OBJECT
  variantMapper[VisualInstance::class] = OBJECT
  variantMapper[VisualScript::class] = OBJECT
  variantMapper[VisualScriptBasicTypeConstant::class] = OBJECT
  variantMapper[VisualScriptBuiltinFunc::class] = OBJECT
  variantMapper[VisualScriptClassConstant::class] = OBJECT
  variantMapper[VisualScriptComment::class] = OBJECT
  variantMapper[VisualScriptComposeArray::class] = OBJECT
  variantMapper[VisualScriptCondition::class] = OBJECT
  variantMapper[VisualScriptConstant::class] = OBJECT
  variantMapper[VisualScriptConstructor::class] = OBJECT
  variantMapper[VisualScriptCustomNode::class] = OBJECT
  variantMapper[VisualScriptDeconstruct::class] = OBJECT
  variantMapper[VisualScriptEmitSignal::class] = OBJECT
  variantMapper[VisualScriptEngineSingleton::class] = OBJECT
  variantMapper[VisualScriptExpression::class] = OBJECT
  variantMapper[VisualScriptFunction::class] = OBJECT
  variantMapper[VisualScriptFunctionCall::class] = OBJECT
  variantMapper[VisualScriptFunctionState::class] = OBJECT
  variantMapper[VisualScriptGlobalConstant::class] = OBJECT
  variantMapper[VisualScriptIndexGet::class] = OBJECT
  variantMapper[VisualScriptIndexSet::class] = OBJECT
  variantMapper[VisualScriptInputAction::class] = OBJECT
  variantMapper[VisualScriptIterator::class] = OBJECT
  variantMapper[VisualScriptLists::class] = OBJECT
  variantMapper[VisualScriptLocalVar::class] = OBJECT
  variantMapper[VisualScriptLocalVarSet::class] = OBJECT
  variantMapper[VisualScriptMathConstant::class] = OBJECT
  variantMapper[VisualScriptNode::class] = OBJECT
  variantMapper[VisualScriptOperator::class] = OBJECT
  variantMapper[VisualScriptPreload::class] = OBJECT
  variantMapper[VisualScriptPropertyGet::class] = OBJECT
  variantMapper[VisualScriptPropertySet::class] = OBJECT
  variantMapper[VisualScriptResourcePath::class] = OBJECT
  variantMapper[VisualScriptReturn::class] = OBJECT
  variantMapper[VisualScriptSceneNode::class] = OBJECT
  variantMapper[VisualScriptSceneTree::class] = OBJECT
  variantMapper[VisualScriptSelect::class] = OBJECT
  variantMapper[VisualScriptSelf::class] = OBJECT
  variantMapper[VisualScriptSequence::class] = OBJECT
  variantMapper[VisualScriptSubCall::class] = OBJECT
  variantMapper[VisualScriptSwitch::class] = OBJECT
  variantMapper[VisualScriptTypeCast::class] = OBJECT
  variantMapper[VisualScriptVariableGet::class] = OBJECT
  variantMapper[VisualScriptVariableSet::class] = OBJECT
  variantMapper[VisualScriptWhile::class] = OBJECT
  variantMapper[VisualScriptYield::class] = OBJECT
  variantMapper[VisualScriptYieldSignal::class] = OBJECT
  variantMapper[VisualServer::class] = OBJECT
  variantMapper[VisualShader::class] = OBJECT
  variantMapper[VisualShaderNode::class] = OBJECT
  variantMapper[VisualShaderNodeBooleanConstant::class] = OBJECT
  variantMapper[VisualShaderNodeBooleanUniform::class] = OBJECT
  variantMapper[VisualShaderNodeColorConstant::class] = OBJECT
  variantMapper[VisualShaderNodeColorFunc::class] = OBJECT
  variantMapper[VisualShaderNodeColorOp::class] = OBJECT
  variantMapper[VisualShaderNodeColorUniform::class] = OBJECT
  variantMapper[VisualShaderNodeCompare::class] = OBJECT
  variantMapper[VisualShaderNodeCubeMap::class] = OBJECT
  variantMapper[VisualShaderNodeCubeMapUniform::class] = OBJECT
  variantMapper[VisualShaderNodeCustom::class] = OBJECT
  variantMapper[VisualShaderNodeDeterminant::class] = OBJECT
  variantMapper[VisualShaderNodeDotProduct::class] = OBJECT
  variantMapper[VisualShaderNodeExpression::class] = OBJECT
  variantMapper[VisualShaderNodeFaceForward::class] = OBJECT
  variantMapper[VisualShaderNodeFresnel::class] = OBJECT
  variantMapper[VisualShaderNodeGlobalExpression::class] = OBJECT
  variantMapper[VisualShaderNodeGroupBase::class] = OBJECT
  variantMapper[VisualShaderNodeIf::class] = OBJECT
  variantMapper[VisualShaderNodeInput::class] = OBJECT
  variantMapper[VisualShaderNodeIs::class] = OBJECT
  variantMapper[VisualShaderNodeOuterProduct::class] = OBJECT
  variantMapper[VisualShaderNodeOutput::class] = OBJECT
  variantMapper[VisualShaderNodeScalarClamp::class] = OBJECT
  variantMapper[VisualShaderNodeScalarConstant::class] = OBJECT
  variantMapper[VisualShaderNodeScalarDerivativeFunc::class] = OBJECT
  variantMapper[VisualShaderNodeScalarFunc::class] = OBJECT
  variantMapper[VisualShaderNodeScalarInterp::class] = OBJECT
  variantMapper[VisualShaderNodeScalarOp::class] = OBJECT
  variantMapper[VisualShaderNodeScalarSmoothStep::class] = OBJECT
  variantMapper[VisualShaderNodeScalarSwitch::class] = OBJECT
  variantMapper[VisualShaderNodeScalarUniform::class] = OBJECT
  variantMapper[VisualShaderNodeSwitch::class] = OBJECT
  variantMapper[VisualShaderNodeTexture::class] = OBJECT
  variantMapper[VisualShaderNodeTextureUniform::class] = OBJECT
  variantMapper[VisualShaderNodeTextureUniformTriplanar::class] = OBJECT
  variantMapper[VisualShaderNodeTransformCompose::class] = OBJECT
  variantMapper[VisualShaderNodeTransformConstant::class] = OBJECT
  variantMapper[VisualShaderNodeTransformDecompose::class] = OBJECT
  variantMapper[VisualShaderNodeTransformFunc::class] = OBJECT
  variantMapper[VisualShaderNodeTransformMult::class] = OBJECT
  variantMapper[VisualShaderNodeTransformUniform::class] = OBJECT
  variantMapper[VisualShaderNodeTransformVecMult::class] = OBJECT
  variantMapper[VisualShaderNodeUniform::class] = OBJECT
  variantMapper[VisualShaderNodeUniformRef::class] = OBJECT
  variantMapper[VisualShaderNodeVec3Constant::class] = OBJECT
  variantMapper[VisualShaderNodeVec3Uniform::class] = OBJECT
  variantMapper[VisualShaderNodeVectorClamp::class] = OBJECT
  variantMapper[VisualShaderNodeVectorCompose::class] = OBJECT
  variantMapper[VisualShaderNodeVectorDecompose::class] = OBJECT
  variantMapper[VisualShaderNodeVectorDerivativeFunc::class] = OBJECT
  variantMapper[VisualShaderNodeVectorDistance::class] = OBJECT
  variantMapper[VisualShaderNodeVectorFunc::class] = OBJECT
  variantMapper[VisualShaderNodeVectorInterp::class] = OBJECT
  variantMapper[VisualShaderNodeVectorLen::class] = OBJECT
  variantMapper[VisualShaderNodeVectorOp::class] = OBJECT
  variantMapper[VisualShaderNodeVectorRefract::class] = OBJECT
  variantMapper[VisualShaderNodeVectorScalarMix::class] = OBJECT
  variantMapper[VisualShaderNodeVectorScalarSmoothStep::class] = OBJECT
  variantMapper[VisualShaderNodeVectorScalarStep::class] = OBJECT
  variantMapper[VisualShaderNodeVectorSmoothStep::class] = OBJECT
  variantMapper[WeakRef::class] = OBJECT
  variantMapper[WebRTCDataChannel::class] = OBJECT
  variantMapper[WebRTCDataChannelGDNative::class] = OBJECT
  variantMapper[WebRTCMultiplayer::class] = OBJECT
  variantMapper[WebRTCPeerConnection::class] = OBJECT
  variantMapper[WebRTCPeerConnectionGDNative::class] = OBJECT
  variantMapper[WebSocketClient::class] = OBJECT
  variantMapper[WebSocketMultiplayerPeer::class] = OBJECT
  variantMapper[WebSocketPeer::class] = OBJECT
  variantMapper[WebSocketServer::class] = OBJECT
  variantMapper[WebXRInterface::class] = OBJECT
  variantMapper[WindowDialog::class] = OBJECT
  variantMapper[World::class] = OBJECT
  variantMapper[World2D::class] = OBJECT
  variantMapper[WorldEnvironment::class] = OBJECT
  variantMapper[X509Certificate::class] = OBJECT
  variantMapper[XMLParser::class] = OBJECT
  variantMapper[YSort::class] = OBJECT
  variantMapper[ClassDB::class] = OBJECT
  variantMapper[Directory::class] = OBJECT
  variantMapper[Engine::class] = OBJECT
  variantMapper[File::class] = OBJECT
  variantMapper[Geometry::class] = OBJECT
  variantMapper[JSON::class] = OBJECT
  variantMapper[Marshalls::class] = OBJECT
  variantMapper[Mutex::class] = OBJECT
  variantMapper[OS::class] = OBJECT
  variantMapper[ResourceLoader::class] = OBJECT
  variantMapper[ResourceSaver::class] = OBJECT
  variantMapper[Semaphore::class] = OBJECT
  variantMapper[Thread::class] = OBJECT
  variantMapper[VisualScriptEditor::class] = OBJECT
}

public fun registerEngineTypeMethods(): Unit {
  registerEngineTypeMethodForGlobalConstants()
  registerEngineTypeMethodForAESContext()
  registerEngineTypeMethodForARVRAnchor()
  registerEngineTypeMethodForARVRCamera()
  registerEngineTypeMethodForARVRController()
  registerEngineTypeMethodForARVRInterface()
  registerEngineTypeMethodForARVRInterfaceGDNative()
  registerEngineTypeMethodForARVROrigin()
  registerEngineTypeMethodForARVRPositionalTracker()
  registerEngineTypeMethodForARVRServer()
  registerEngineTypeMethodForAStar()
  registerEngineTypeMethodForAStar2D()
  registerEngineTypeMethodForAcceptDialog()
  registerEngineTypeMethodForAnimatedSprite()
  registerEngineTypeMethodForAnimatedSprite3D()
  registerEngineTypeMethodForAnimatedTexture()
  registerEngineTypeMethodForAnimation()
  registerEngineTypeMethodForAnimationNode()
  registerEngineTypeMethodForAnimationNodeAdd2()
  registerEngineTypeMethodForAnimationNodeAdd3()
  registerEngineTypeMethodForAnimationNodeAnimation()
  registerEngineTypeMethodForAnimationNodeBlend2()
  registerEngineTypeMethodForAnimationNodeBlend3()
  registerEngineTypeMethodForAnimationNodeBlendSpace1D()
  registerEngineTypeMethodForAnimationNodeBlendSpace2D()
  registerEngineTypeMethodForAnimationNodeBlendTree()
  registerEngineTypeMethodForAnimationNodeOneShot()
  registerEngineTypeMethodForAnimationNodeOutput()
  registerEngineTypeMethodForAnimationNodeStateMachine()
  registerEngineTypeMethodForAnimationNodeStateMachinePlayback()
  registerEngineTypeMethodForAnimationNodeStateMachineTransition()
  registerEngineTypeMethodForAnimationNodeTimeScale()
  registerEngineTypeMethodForAnimationNodeTimeSeek()
  registerEngineTypeMethodForAnimationNodeTransition()
  registerEngineTypeMethodForAnimationPlayer()
  registerEngineTypeMethodForAnimationRootNode()
  registerEngineTypeMethodForAnimationTrackEditPlugin()
  registerEngineTypeMethodForAnimationTree()
  registerEngineTypeMethodForAnimationTreePlayer()
  registerEngineTypeMethodForArea()
  registerEngineTypeMethodForArea2D()
  registerEngineTypeMethodForArrayMesh()
  registerEngineTypeMethodForAspectRatioContainer()
  registerEngineTypeMethodForAtlasTexture()
  registerEngineTypeMethodForAudioBusLayout()
  registerEngineTypeMethodForAudioEffect()
  registerEngineTypeMethodForAudioEffectAmplify()
  registerEngineTypeMethodForAudioEffectBandLimitFilter()
  registerEngineTypeMethodForAudioEffectBandPassFilter()
  registerEngineTypeMethodForAudioEffectCapture()
  registerEngineTypeMethodForAudioEffectChorus()
  registerEngineTypeMethodForAudioEffectCompressor()
  registerEngineTypeMethodForAudioEffectDelay()
  registerEngineTypeMethodForAudioEffectDistortion()
  registerEngineTypeMethodForAudioEffectEQ()
  registerEngineTypeMethodForAudioEffectEQ10()
  registerEngineTypeMethodForAudioEffectEQ21()
  registerEngineTypeMethodForAudioEffectEQ6()
  registerEngineTypeMethodForAudioEffectFilter()
  registerEngineTypeMethodForAudioEffectHighPassFilter()
  registerEngineTypeMethodForAudioEffectHighShelfFilter()
  registerEngineTypeMethodForAudioEffectInstance()
  registerEngineTypeMethodForAudioEffectLimiter()
  registerEngineTypeMethodForAudioEffectLowPassFilter()
  registerEngineTypeMethodForAudioEffectLowShelfFilter()
  registerEngineTypeMethodForAudioEffectNotchFilter()
  registerEngineTypeMethodForAudioEffectPanner()
  registerEngineTypeMethodForAudioEffectPhaser()
  registerEngineTypeMethodForAudioEffectPitchShift()
  registerEngineTypeMethodForAudioEffectRecord()
  registerEngineTypeMethodForAudioEffectReverb()
  registerEngineTypeMethodForAudioEffectSpectrumAnalyzer()
  registerEngineTypeMethodForAudioEffectSpectrumAnalyzerInstance()
  registerEngineTypeMethodForAudioEffectStereoEnhance()
  registerEngineTypeMethodForAudioServer()
  registerEngineTypeMethodForAudioStream()
  registerEngineTypeMethodForAudioStreamGenerator()
  registerEngineTypeMethodForAudioStreamGeneratorPlayback()
  registerEngineTypeMethodForAudioStreamMP3()
  registerEngineTypeMethodForAudioStreamMicrophone()
  registerEngineTypeMethodForAudioStreamOGGVorbis()
  registerEngineTypeMethodForAudioStreamPlayback()
  registerEngineTypeMethodForAudioStreamPlaybackResampled()
  registerEngineTypeMethodForAudioStreamPlayer()
  registerEngineTypeMethodForAudioStreamPlayer2D()
  registerEngineTypeMethodForAudioStreamPlayer3D()
  registerEngineTypeMethodForAudioStreamRandomPitch()
  registerEngineTypeMethodForAudioStreamSample()
  registerEngineTypeMethodForBackBufferCopy()
  registerEngineTypeMethodForBakedLightmap()
  registerEngineTypeMethodForBakedLightmapData()
  registerEngineTypeMethodForBaseButton()
  registerEngineTypeMethodForBitMap()
  registerEngineTypeMethodForBitmapFont()
  registerEngineTypeMethodForBone2D()
  registerEngineTypeMethodForBoneAttachment()
  registerEngineTypeMethodForBoxContainer()
  registerEngineTypeMethodForBoxShape()
  registerEngineTypeMethodForBulletPhysicsDirectBodyState()
  registerEngineTypeMethodForButton()
  registerEngineTypeMethodForButtonGroup()
  registerEngineTypeMethodForCPUParticles()
  registerEngineTypeMethodForCPUParticles2D()
  registerEngineTypeMethodForCSGBox()
  registerEngineTypeMethodForCSGCombiner()
  registerEngineTypeMethodForCSGCylinder()
  registerEngineTypeMethodForCSGMesh()
  registerEngineTypeMethodForCSGPolygon()
  registerEngineTypeMethodForCSGPrimitive()
  registerEngineTypeMethodForCSGShape()
  registerEngineTypeMethodForCSGSphere()
  registerEngineTypeMethodForCSGTorus()
  registerEngineTypeMethodForCamera()
  registerEngineTypeMethodForCamera2D()
  registerEngineTypeMethodForCameraFeed()
  registerEngineTypeMethodForCameraServer()
  registerEngineTypeMethodForCameraTexture()
  registerEngineTypeMethodForCanvasItem()
  registerEngineTypeMethodForCanvasItemMaterial()
  registerEngineTypeMethodForCanvasLayer()
  registerEngineTypeMethodForCanvasModulate()
  registerEngineTypeMethodForCapsuleMesh()
  registerEngineTypeMethodForCapsuleShape()
  registerEngineTypeMethodForCapsuleShape2D()
  registerEngineTypeMethodForCenterContainer()
  registerEngineTypeMethodForCharFXTransform()
  registerEngineTypeMethodForCheckBox()
  registerEngineTypeMethodForCheckButton()
  registerEngineTypeMethodForCircleShape2D()
  registerEngineTypeMethodForClippedCamera()
  registerEngineTypeMethodForCollisionObject()
  registerEngineTypeMethodForCollisionObject2D()
  registerEngineTypeMethodForCollisionPolygon()
  registerEngineTypeMethodForCollisionPolygon2D()
  registerEngineTypeMethodForCollisionShape()
  registerEngineTypeMethodForCollisionShape2D()
  registerEngineTypeMethodForColorPicker()
  registerEngineTypeMethodForColorPickerButton()
  registerEngineTypeMethodForColorRect()
  registerEngineTypeMethodForConcavePolygonShape()
  registerEngineTypeMethodForConcavePolygonShape2D()
  registerEngineTypeMethodForConeTwistJoint()
  registerEngineTypeMethodForConfigFile()
  registerEngineTypeMethodForConfirmationDialog()
  registerEngineTypeMethodForContainer()
  registerEngineTypeMethodForControl()
  registerEngineTypeMethodForConvexPolygonShape()
  registerEngineTypeMethodForConvexPolygonShape2D()
  registerEngineTypeMethodForCrypto()
  registerEngineTypeMethodForCryptoKey()
  registerEngineTypeMethodForCubeMap()
  registerEngineTypeMethodForCubeMesh()
  registerEngineTypeMethodForCullInstance()
  registerEngineTypeMethodForCurve()
  registerEngineTypeMethodForCurve2D()
  registerEngineTypeMethodForCurve3D()
  registerEngineTypeMethodForCurveTexture()
  registerEngineTypeMethodForCylinderMesh()
  registerEngineTypeMethodForCylinderShape()
  registerEngineTypeMethodForDTLSServer()
  registerEngineTypeMethodForDampedSpringJoint2D()
  registerEngineTypeMethodForDirectionalLight()
  registerEngineTypeMethodForDynamicFont()
  registerEngineTypeMethodForDynamicFontData()
  registerEngineTypeMethodForEditorExportPlugin()
  registerEngineTypeMethodForEditorFeatureProfile()
  registerEngineTypeMethodForEditorFileDialog()
  registerEngineTypeMethodForEditorFileSystem()
  registerEngineTypeMethodForEditorFileSystemDirectory()
  registerEngineTypeMethodForEditorImportPlugin()
  registerEngineTypeMethodForEditorInspector()
  registerEngineTypeMethodForEditorInspectorPlugin()
  registerEngineTypeMethodForEditorInterface()
  registerEngineTypeMethodForEditorNavigationMeshGenerator()
  registerEngineTypeMethodForEditorPlugin()
  registerEngineTypeMethodForEditorProperty()
  registerEngineTypeMethodForEditorResourceConversionPlugin()
  registerEngineTypeMethodForEditorResourcePicker()
  registerEngineTypeMethodForEditorResourcePreview()
  registerEngineTypeMethodForEditorResourcePreviewGenerator()
  registerEngineTypeMethodForEditorSceneImporter()
  registerEngineTypeMethodForEditorSceneImporterFBX()
  registerEngineTypeMethodForEditorSceneImporterGLTF()
  registerEngineTypeMethodForEditorScenePostImport()
  registerEngineTypeMethodForEditorScript()
  registerEngineTypeMethodForEditorScriptPicker()
  registerEngineTypeMethodForEditorSelection()
  registerEngineTypeMethodForEditorSettings()
  registerEngineTypeMethodForEditorSpatialGizmo()
  registerEngineTypeMethodForEditorSpatialGizmoPlugin()
  registerEngineTypeMethodForEditorSpinSlider()
  registerEngineTypeMethodForEditorVCSInterface()
  registerEngineTypeMethodForEncodedObjectAsID()
  registerEngineTypeMethodForEnvironment()
  registerEngineTypeMethodForExpression()
  registerEngineTypeMethodForExternalTexture()
  registerEngineTypeMethodForFileDialog()
  registerEngineTypeMethodForFileSystemDock()
  registerEngineTypeMethodForFont()
  registerEngineTypeMethodForFuncRef()
  registerEngineTypeMethodForGDNative()
  registerEngineTypeMethodForGDNativeLibrary()
  registerEngineTypeMethodForGDScript()
  registerEngineTypeMethodForGDScriptFunctionState()
  registerEngineTypeMethodForGIProbe()
  registerEngineTypeMethodForGIProbeData()
  registerEngineTypeMethodForGLTFAccessor()
  registerEngineTypeMethodForGLTFAnimation()
  registerEngineTypeMethodForGLTFBufferView()
  registerEngineTypeMethodForGLTFCamera()
  registerEngineTypeMethodForGLTFDocument()
  registerEngineTypeMethodForGLTFLight()
  registerEngineTypeMethodForGLTFMesh()
  registerEngineTypeMethodForGLTFNode()
  registerEngineTypeMethodForGLTFSkeleton()
  registerEngineTypeMethodForGLTFSkin()
  registerEngineTypeMethodForGLTFSpecGloss()
  registerEngineTypeMethodForGLTFState()
  registerEngineTypeMethodForGLTFTexture()
  registerEngineTypeMethodForGeneric6DOFJoint()
  registerEngineTypeMethodForGeometryInstance()
  registerEngineTypeMethodForGradient()
  registerEngineTypeMethodForGradientTexture()
  registerEngineTypeMethodForGraphEdit()
  registerEngineTypeMethodForGraphNode()
  registerEngineTypeMethodForGridContainer()
  registerEngineTypeMethodForGridMap()
  registerEngineTypeMethodForGrooveJoint2D()
  registerEngineTypeMethodForHBoxContainer()
  registerEngineTypeMethodForHMACContext()
  registerEngineTypeMethodForHScrollBar()
  registerEngineTypeMethodForHSeparator()
  registerEngineTypeMethodForHSlider()
  registerEngineTypeMethodForHSplitContainer()
  registerEngineTypeMethodForHTTPClient()
  registerEngineTypeMethodForHTTPRequest()
  registerEngineTypeMethodForHashingContext()
  registerEngineTypeMethodForHeightMapShape()
  registerEngineTypeMethodForHingeJoint()
  registerEngineTypeMethodForIP()
  registerEngineTypeMethodForImage()
  registerEngineTypeMethodForImageTexture()
  registerEngineTypeMethodForImmediateGeometry()
  registerEngineTypeMethodForInput()
  registerEngineTypeMethodForInputEvent()
  registerEngineTypeMethodForInputEventAction()
  registerEngineTypeMethodForInputEventGesture()
  registerEngineTypeMethodForInputEventJoypadButton()
  registerEngineTypeMethodForInputEventJoypadMotion()
  registerEngineTypeMethodForInputEventKey()
  registerEngineTypeMethodForInputEventMIDI()
  registerEngineTypeMethodForInputEventMagnifyGesture()
  registerEngineTypeMethodForInputEventMouse()
  registerEngineTypeMethodForInputEventMouseButton()
  registerEngineTypeMethodForInputEventMouseMotion()
  registerEngineTypeMethodForInputEventPanGesture()
  registerEngineTypeMethodForInputEventScreenDrag()
  registerEngineTypeMethodForInputEventScreenTouch()
  registerEngineTypeMethodForInputEventWithModifiers()
  registerEngineTypeMethodForInputMap()
  registerEngineTypeMethodForInstancePlaceholder()
  registerEngineTypeMethodForInterpolatedCamera()
  registerEngineTypeMethodForItemList()
  registerEngineTypeMethodForJNISingleton()
  registerEngineTypeMethodForJSONParseResult()
  registerEngineTypeMethodForJSONRPC()
  registerEngineTypeMethodForJavaClass()
  registerEngineTypeMethodForJavaClassWrapper()
  registerEngineTypeMethodForJavaScript()
  registerEngineTypeMethodForJavaScriptObject()
  registerEngineTypeMethodForJoint()
  registerEngineTypeMethodForJoint2D()
  registerEngineTypeMethodForKinematicBody()
  registerEngineTypeMethodForKinematicBody2D()
  registerEngineTypeMethodForKinematicCollision()
  registerEngineTypeMethodForKinematicCollision2D()
  registerEngineTypeMethodForKotlinScript()
  registerEngineTypeMethodForLabel()
  registerEngineTypeMethodForLargeTexture()
  registerEngineTypeMethodForLight()
  registerEngineTypeMethodForLight2D()
  registerEngineTypeMethodForLightOccluder2D()
  registerEngineTypeMethodForLine2D()
  registerEngineTypeMethodForLineEdit()
  registerEngineTypeMethodForLineShape2D()
  registerEngineTypeMethodForLinkButton()
  registerEngineTypeMethodForListener()
  registerEngineTypeMethodForListener2D()
  registerEngineTypeMethodForMainLoop()
  registerEngineTypeMethodForMarginContainer()
  registerEngineTypeMethodForMaterial()
  registerEngineTypeMethodForMenuButton()
  registerEngineTypeMethodForMesh()
  registerEngineTypeMethodForMeshDataTool()
  registerEngineTypeMethodForMeshInstance()
  registerEngineTypeMethodForMeshInstance2D()
  registerEngineTypeMethodForMeshLibrary()
  registerEngineTypeMethodForMeshTexture()
  registerEngineTypeMethodForMobileVRInterface()
  registerEngineTypeMethodForMultiMesh()
  registerEngineTypeMethodForMultiMeshInstance()
  registerEngineTypeMethodForMultiMeshInstance2D()
  registerEngineTypeMethodForMultiplayerAPI()
  registerEngineTypeMethodForMultiplayerPeerGDNative()
  registerEngineTypeMethodForNativeScript()
  registerEngineTypeMethodForNavigation()
  registerEngineTypeMethodForNavigation2D()
  registerEngineTypeMethodForNavigationMesh()
  registerEngineTypeMethodForNavigationMeshInstance()
  registerEngineTypeMethodForNavigationPolygon()
  registerEngineTypeMethodForNavigationPolygonInstance()
  registerEngineTypeMethodForNetworkedMultiplayerENet()
  registerEngineTypeMethodForNetworkedMultiplayerPeer()
  registerEngineTypeMethodForNinePatchRect()
  registerEngineTypeMethodForNode()
  registerEngineTypeMethodForNode2D()
  registerEngineTypeMethodForNoiseTexture()
  registerEngineTypeMethodForObject()
  registerEngineTypeMethodForOccluder()
  registerEngineTypeMethodForOccluderPolygon2D()
  registerEngineTypeMethodForOccluderShape()
  registerEngineTypeMethodForOccluderShapeSphere()
  registerEngineTypeMethodForOmniLight()
  registerEngineTypeMethodForOpenSimplexNoise()
  registerEngineTypeMethodForOptionButton()
  registerEngineTypeMethodForPCKPacker()
  registerEngineTypeMethodForPHashTranslation()
  registerEngineTypeMethodForPackedDataContainer()
  registerEngineTypeMethodForPackedDataContainerRef()
  registerEngineTypeMethodForPackedScene()
  registerEngineTypeMethodForPackedSceneGLTF()
  registerEngineTypeMethodForPacketPeer()
  registerEngineTypeMethodForPacketPeerDTLS()
  registerEngineTypeMethodForPacketPeerGDNative()
  registerEngineTypeMethodForPacketPeerStream()
  registerEngineTypeMethodForPacketPeerUDP()
  registerEngineTypeMethodForPanel()
  registerEngineTypeMethodForPanelContainer()
  registerEngineTypeMethodForPanoramaSky()
  registerEngineTypeMethodForParallaxBackground()
  registerEngineTypeMethodForParallaxLayer()
  registerEngineTypeMethodForParticles()
  registerEngineTypeMethodForParticles2D()
  registerEngineTypeMethodForParticlesMaterial()
  registerEngineTypeMethodForPath()
  registerEngineTypeMethodForPath2D()
  registerEngineTypeMethodForPathFollow()
  registerEngineTypeMethodForPathFollow2D()
  registerEngineTypeMethodForPerformance()
  registerEngineTypeMethodForPhysicalBone()
  registerEngineTypeMethodForPhysics2DDirectBodyState()
  registerEngineTypeMethodForPhysics2DDirectBodyStateSW()
  registerEngineTypeMethodForPhysics2DDirectSpaceState()
  registerEngineTypeMethodForPhysics2DServer()
  registerEngineTypeMethodForPhysics2DShapeQueryParameters()
  registerEngineTypeMethodForPhysics2DTestMotionResult()
  registerEngineTypeMethodForPhysicsBody()
  registerEngineTypeMethodForPhysicsBody2D()
  registerEngineTypeMethodForPhysicsDirectBodyState()
  registerEngineTypeMethodForPhysicsDirectSpaceState()
  registerEngineTypeMethodForPhysicsMaterial()
  registerEngineTypeMethodForPhysicsServer()
  registerEngineTypeMethodForPhysicsShapeQueryParameters()
  registerEngineTypeMethodForPhysicsTestMotionResult()
  registerEngineTypeMethodForPinJoint()
  registerEngineTypeMethodForPinJoint2D()
  registerEngineTypeMethodForPlaneMesh()
  registerEngineTypeMethodForPlaneShape()
  registerEngineTypeMethodForPluginScript()
  registerEngineTypeMethodForPointMesh()
  registerEngineTypeMethodForPolygon2D()
  registerEngineTypeMethodForPolygonPathFinder()
  registerEngineTypeMethodForPopup()
  registerEngineTypeMethodForPopupDialog()
  registerEngineTypeMethodForPopupMenu()
  registerEngineTypeMethodForPopupPanel()
  registerEngineTypeMethodForPortal()
  registerEngineTypeMethodForPosition2D()
  registerEngineTypeMethodForPosition3D()
  registerEngineTypeMethodForPrimitiveMesh()
  registerEngineTypeMethodForPrismMesh()
  registerEngineTypeMethodForProceduralSky()
  registerEngineTypeMethodForProgressBar()
  registerEngineTypeMethodForProjectSettings()
  registerEngineTypeMethodForProximityGroup()
  registerEngineTypeMethodForProxyTexture()
  registerEngineTypeMethodForQuadMesh()
  registerEngineTypeMethodForRandomNumberGenerator()
  registerEngineTypeMethodForRange()
  registerEngineTypeMethodForRayCast()
  registerEngineTypeMethodForRayCast2D()
  registerEngineTypeMethodForRayShape()
  registerEngineTypeMethodForRayShape2D()
  registerEngineTypeMethodForRectangleShape2D()
  registerEngineTypeMethodForReference()
  registerEngineTypeMethodForReferenceRect()
  registerEngineTypeMethodForReflectionProbe()
  registerEngineTypeMethodForRegEx()
  registerEngineTypeMethodForRegExMatch()
  registerEngineTypeMethodForRemoteTransform()
  registerEngineTypeMethodForRemoteTransform2D()
  registerEngineTypeMethodForResource()
  registerEngineTypeMethodForResourceFormatLoader()
  registerEngineTypeMethodForResourceFormatSaver()
  registerEngineTypeMethodForResourceImporter()
  registerEngineTypeMethodForResourceInteractiveLoader()
  registerEngineTypeMethodForResourcePreloader()
  registerEngineTypeMethodForRichTextEffect()
  registerEngineTypeMethodForRichTextLabel()
  registerEngineTypeMethodForRigidBody()
  registerEngineTypeMethodForRigidBody2D()
  registerEngineTypeMethodForRoom()
  registerEngineTypeMethodForRoomGroup()
  registerEngineTypeMethodForRoomManager()
  registerEngineTypeMethodForRootMotionView()
  registerEngineTypeMethodForSceneState()
  registerEngineTypeMethodForSceneTree()
  registerEngineTypeMethodForSceneTreeTimer()
  registerEngineTypeMethodForScript()
  registerEngineTypeMethodForScriptCreateDialog()
  registerEngineTypeMethodForScriptEditor()
  registerEngineTypeMethodForScrollBar()
  registerEngineTypeMethodForScrollContainer()
  registerEngineTypeMethodForSegmentShape2D()
  registerEngineTypeMethodForSeparator()
  registerEngineTypeMethodForShader()
  registerEngineTypeMethodForShaderMaterial()
  registerEngineTypeMethodForShape()
  registerEngineTypeMethodForShape2D()
  registerEngineTypeMethodForShortCut()
  registerEngineTypeMethodForSkeleton()
  registerEngineTypeMethodForSkeleton2D()
  registerEngineTypeMethodForSkeletonIK()
  registerEngineTypeMethodForSkin()
  registerEngineTypeMethodForSkinReference()
  registerEngineTypeMethodForSky()
  registerEngineTypeMethodForSlider()
  registerEngineTypeMethodForSliderJoint()
  registerEngineTypeMethodForSoftBody()
  registerEngineTypeMethodForSpatial()
  registerEngineTypeMethodForSpatialGizmo()
  registerEngineTypeMethodForSpatialMaterial()
  registerEngineTypeMethodForSpatialVelocityTracker()
  registerEngineTypeMethodForSphereMesh()
  registerEngineTypeMethodForSphereShape()
  registerEngineTypeMethodForSpinBox()
  registerEngineTypeMethodForSplitContainer()
  registerEngineTypeMethodForSpotLight()
  registerEngineTypeMethodForSpringArm()
  registerEngineTypeMethodForSprite()
  registerEngineTypeMethodForSprite3D()
  registerEngineTypeMethodForSpriteBase3D()
  registerEngineTypeMethodForSpriteFrames()
  registerEngineTypeMethodForStaticBody()
  registerEngineTypeMethodForStaticBody2D()
  registerEngineTypeMethodForStreamPeer()
  registerEngineTypeMethodForStreamPeerBuffer()
  registerEngineTypeMethodForStreamPeerGDNative()
  registerEngineTypeMethodForStreamPeerSSL()
  registerEngineTypeMethodForStreamPeerTCP()
  registerEngineTypeMethodForStreamTexture()
  registerEngineTypeMethodForStyleBox()
  registerEngineTypeMethodForStyleBoxEmpty()
  registerEngineTypeMethodForStyleBoxFlat()
  registerEngineTypeMethodForStyleBoxLine()
  registerEngineTypeMethodForStyleBoxTexture()
  registerEngineTypeMethodForSurfaceTool()
  registerEngineTypeMethodForTCP_Server()
  registerEngineTypeMethodForTabContainer()
  registerEngineTypeMethodForTabs()
  registerEngineTypeMethodForTextEdit()
  registerEngineTypeMethodForTextFile()
  registerEngineTypeMethodForTexture()
  registerEngineTypeMethodForTexture3D()
  registerEngineTypeMethodForTextureArray()
  registerEngineTypeMethodForTextureButton()
  registerEngineTypeMethodForTextureLayered()
  registerEngineTypeMethodForTextureProgress()
  registerEngineTypeMethodForTextureRect()
  registerEngineTypeMethodForTheme()
  registerEngineTypeMethodForTileMap()
  registerEngineTypeMethodForTileSet()
  registerEngineTypeMethodForTimer()
  registerEngineTypeMethodForToolButton()
  registerEngineTypeMethodForTouchScreenButton()
  registerEngineTypeMethodForTranslation()
  registerEngineTypeMethodForTranslationServer()
  registerEngineTypeMethodForTree()
  registerEngineTypeMethodForTreeItem()
  registerEngineTypeMethodForTriangleMesh()
  registerEngineTypeMethodForTween()
  registerEngineTypeMethodForUDPServer()
  registerEngineTypeMethodForUPNP()
  registerEngineTypeMethodForUPNPDevice()
  registerEngineTypeMethodForUndoRedo()
  registerEngineTypeMethodForVBoxContainer()
  registerEngineTypeMethodForVScrollBar()
  registerEngineTypeMethodForVSeparator()
  registerEngineTypeMethodForVSlider()
  registerEngineTypeMethodForVSplitContainer()
  registerEngineTypeMethodForVehicleBody()
  registerEngineTypeMethodForVehicleWheel()
  registerEngineTypeMethodForVideoPlayer()
  registerEngineTypeMethodForVideoStream()
  registerEngineTypeMethodForVideoStreamGDNative()
  registerEngineTypeMethodForVideoStreamTheora()
  registerEngineTypeMethodForVideoStreamWebm()
  registerEngineTypeMethodForViewport()
  registerEngineTypeMethodForViewportContainer()
  registerEngineTypeMethodForViewportTexture()
  registerEngineTypeMethodForVisibilityEnabler()
  registerEngineTypeMethodForVisibilityEnabler2D()
  registerEngineTypeMethodForVisibilityNotifier()
  registerEngineTypeMethodForVisibilityNotifier2D()
  registerEngineTypeMethodForVisualInstance()
  registerEngineTypeMethodForVisualScript()
  registerEngineTypeMethodForVisualScriptBasicTypeConstant()
  registerEngineTypeMethodForVisualScriptBuiltinFunc()
  registerEngineTypeMethodForVisualScriptClassConstant()
  registerEngineTypeMethodForVisualScriptComment()
  registerEngineTypeMethodForVisualScriptComposeArray()
  registerEngineTypeMethodForVisualScriptCondition()
  registerEngineTypeMethodForVisualScriptConstant()
  registerEngineTypeMethodForVisualScriptConstructor()
  registerEngineTypeMethodForVisualScriptCustomNode()
  registerEngineTypeMethodForVisualScriptDeconstruct()
  registerEngineTypeMethodForVisualScriptEmitSignal()
  registerEngineTypeMethodForVisualScriptEngineSingleton()
  registerEngineTypeMethodForVisualScriptExpression()
  registerEngineTypeMethodForVisualScriptFunction()
  registerEngineTypeMethodForVisualScriptFunctionCall()
  registerEngineTypeMethodForVisualScriptFunctionState()
  registerEngineTypeMethodForVisualScriptGlobalConstant()
  registerEngineTypeMethodForVisualScriptIndexGet()
  registerEngineTypeMethodForVisualScriptIndexSet()
  registerEngineTypeMethodForVisualScriptInputAction()
  registerEngineTypeMethodForVisualScriptIterator()
  registerEngineTypeMethodForVisualScriptLists()
  registerEngineTypeMethodForVisualScriptLocalVar()
  registerEngineTypeMethodForVisualScriptLocalVarSet()
  registerEngineTypeMethodForVisualScriptMathConstant()
  registerEngineTypeMethodForVisualScriptNode()
  registerEngineTypeMethodForVisualScriptOperator()
  registerEngineTypeMethodForVisualScriptPreload()
  registerEngineTypeMethodForVisualScriptPropertyGet()
  registerEngineTypeMethodForVisualScriptPropertySet()
  registerEngineTypeMethodForVisualScriptResourcePath()
  registerEngineTypeMethodForVisualScriptReturn()
  registerEngineTypeMethodForVisualScriptSceneNode()
  registerEngineTypeMethodForVisualScriptSceneTree()
  registerEngineTypeMethodForVisualScriptSelect()
  registerEngineTypeMethodForVisualScriptSelf()
  registerEngineTypeMethodForVisualScriptSequence()
  registerEngineTypeMethodForVisualScriptSubCall()
  registerEngineTypeMethodForVisualScriptSwitch()
  registerEngineTypeMethodForVisualScriptTypeCast()
  registerEngineTypeMethodForVisualScriptVariableGet()
  registerEngineTypeMethodForVisualScriptVariableSet()
  registerEngineTypeMethodForVisualScriptWhile()
  registerEngineTypeMethodForVisualScriptYield()
  registerEngineTypeMethodForVisualScriptYieldSignal()
  registerEngineTypeMethodForVisualServer()
  registerEngineTypeMethodForVisualShader()
  registerEngineTypeMethodForVisualShaderNode()
  registerEngineTypeMethodForVisualShaderNodeBooleanConstant()
  registerEngineTypeMethodForVisualShaderNodeBooleanUniform()
  registerEngineTypeMethodForVisualShaderNodeColorConstant()
  registerEngineTypeMethodForVisualShaderNodeColorFunc()
  registerEngineTypeMethodForVisualShaderNodeColorOp()
  registerEngineTypeMethodForVisualShaderNodeColorUniform()
  registerEngineTypeMethodForVisualShaderNodeCompare()
  registerEngineTypeMethodForVisualShaderNodeCubeMap()
  registerEngineTypeMethodForVisualShaderNodeCubeMapUniform()
  registerEngineTypeMethodForVisualShaderNodeCustom()
  registerEngineTypeMethodForVisualShaderNodeDeterminant()
  registerEngineTypeMethodForVisualShaderNodeDotProduct()
  registerEngineTypeMethodForVisualShaderNodeExpression()
  registerEngineTypeMethodForVisualShaderNodeFaceForward()
  registerEngineTypeMethodForVisualShaderNodeFresnel()
  registerEngineTypeMethodForVisualShaderNodeGlobalExpression()
  registerEngineTypeMethodForVisualShaderNodeGroupBase()
  registerEngineTypeMethodForVisualShaderNodeIf()
  registerEngineTypeMethodForVisualShaderNodeInput()
  registerEngineTypeMethodForVisualShaderNodeIs()
  registerEngineTypeMethodForVisualShaderNodeOuterProduct()
  registerEngineTypeMethodForVisualShaderNodeOutput()
  registerEngineTypeMethodForVisualShaderNodeScalarClamp()
  registerEngineTypeMethodForVisualShaderNodeScalarConstant()
  registerEngineTypeMethodForVisualShaderNodeScalarDerivativeFunc()
  registerEngineTypeMethodForVisualShaderNodeScalarFunc()
  registerEngineTypeMethodForVisualShaderNodeScalarInterp()
  registerEngineTypeMethodForVisualShaderNodeScalarOp()
  registerEngineTypeMethodForVisualShaderNodeScalarSmoothStep()
  registerEngineTypeMethodForVisualShaderNodeScalarSwitch()
  registerEngineTypeMethodForVisualShaderNodeScalarUniform()
  registerEngineTypeMethodForVisualShaderNodeSwitch()
  registerEngineTypeMethodForVisualShaderNodeTexture()
  registerEngineTypeMethodForVisualShaderNodeTextureUniform()
  registerEngineTypeMethodForVisualShaderNodeTextureUniformTriplanar()
  registerEngineTypeMethodForVisualShaderNodeTransformCompose()
  registerEngineTypeMethodForVisualShaderNodeTransformConstant()
  registerEngineTypeMethodForVisualShaderNodeTransformDecompose()
  registerEngineTypeMethodForVisualShaderNodeTransformFunc()
  registerEngineTypeMethodForVisualShaderNodeTransformMult()
  registerEngineTypeMethodForVisualShaderNodeTransformUniform()
  registerEngineTypeMethodForVisualShaderNodeTransformVecMult()
  registerEngineTypeMethodForVisualShaderNodeUniform()
  registerEngineTypeMethodForVisualShaderNodeUniformRef()
  registerEngineTypeMethodForVisualShaderNodeVec3Constant()
  registerEngineTypeMethodForVisualShaderNodeVec3Uniform()
  registerEngineTypeMethodForVisualShaderNodeVectorClamp()
  registerEngineTypeMethodForVisualShaderNodeVectorCompose()
  registerEngineTypeMethodForVisualShaderNodeVectorDecompose()
  registerEngineTypeMethodForVisualShaderNodeVectorDerivativeFunc()
  registerEngineTypeMethodForVisualShaderNodeVectorDistance()
  registerEngineTypeMethodForVisualShaderNodeVectorFunc()
  registerEngineTypeMethodForVisualShaderNodeVectorInterp()
  registerEngineTypeMethodForVisualShaderNodeVectorLen()
  registerEngineTypeMethodForVisualShaderNodeVectorOp()
  registerEngineTypeMethodForVisualShaderNodeVectorRefract()
  registerEngineTypeMethodForVisualShaderNodeVectorScalarMix()
  registerEngineTypeMethodForVisualShaderNodeVectorScalarSmoothStep()
  registerEngineTypeMethodForVisualShaderNodeVectorScalarStep()
  registerEngineTypeMethodForVisualShaderNodeVectorSmoothStep()
  registerEngineTypeMethodForWeakRef()
  registerEngineTypeMethodForWebRTCDataChannel()
  registerEngineTypeMethodForWebRTCDataChannelGDNative()
  registerEngineTypeMethodForWebRTCMultiplayer()
  registerEngineTypeMethodForWebRTCPeerConnection()
  registerEngineTypeMethodForWebRTCPeerConnectionGDNative()
  registerEngineTypeMethodForWebSocketClient()
  registerEngineTypeMethodForWebSocketMultiplayerPeer()
  registerEngineTypeMethodForWebSocketPeer()
  registerEngineTypeMethodForWebSocketServer()
  registerEngineTypeMethodForWebXRInterface()
  registerEngineTypeMethodForWindowDialog()
  registerEngineTypeMethodForWorld()
  registerEngineTypeMethodForWorld2D()
  registerEngineTypeMethodForWorldEnvironment()
  registerEngineTypeMethodForX509Certificate()
  registerEngineTypeMethodForXMLParser()
  registerEngineTypeMethodForYSort()
  registerEngineTypeMethodForClassDB()
  registerEngineTypeMethodForDirectory()
  registerEngineTypeMethodForEngine()
  registerEngineTypeMethodForFile()
  registerEngineTypeMethodForGeometry()
  registerEngineTypeMethodForJSON()
  registerEngineTypeMethodForMarshalls()
  registerEngineTypeMethodForMutex()
  registerEngineTypeMethodForOS()
  registerEngineTypeMethodForResourceLoader()
  registerEngineTypeMethodForResourceSaver()
  registerEngineTypeMethodForSemaphore()
  registerEngineTypeMethodForThread()
  registerEngineTypeMethodForVisualScriptEditor()
}
