// THIS FILE IS GENERATED! DO NOT EDIT IT MANUALLY!
package godot

import godot.core.TypeManager
import godot.core.VariantType.OBJECT
import godot.core.variantMapper
import kotlin.Unit

private fun registerEngineTypeMethodForPerformance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "get_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "add_custom_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "remove_custom_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "has_custom_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "get_custom_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "get_monitor_modification_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PERFORMANCE to "get_custom_monitor_names")
}

private fun registerEngineTypeMethodForTextServerManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "add_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "get_interface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "remove_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "get_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "get_interfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "find_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "set_primary_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVERMANAGER to "get_primary_interface")
}

private fun registerEngineTypeMethodForPhysicsServer2DManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2DMANAGER to "register_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2DMANAGER to "set_default_server")
}

private fun registerEngineTypeMethodForPhysicsServer3DManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3DMANAGER to "register_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3DMANAGER to "set_default_server")
}

private fun registerEngineTypeMethodForNavigationMeshGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHGENERATOR to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESHGENERATOR to "clear")
}

private fun registerEngineTypeMethodForProjectSettings(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "has_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "get_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "get_setting_with_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "get_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_initial_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "add_property_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "set_restart_if_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "localize_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "globalize_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "load_resource_pack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROJECTSETTINGS to "save_custom")
}

private fun registerEngineTypeMethodForIP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "resolve_hostname_queue_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_resolve_item_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "erase_resolve_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_local_addresses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "get_local_interfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IP to "clear_cache")
}

private fun registerEngineTypeMethodForGeometry2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "is_point_in_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "segment_intersects_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "segment_intersects_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "line_intersects_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "get_closest_points_between_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "get_closest_point_to_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to
      "get_closest_point_to_segment_uncapped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "point_is_inside_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "is_polygon_clockwise")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "is_point_in_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "triangulate_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "triangulate_delaunay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "convex_hull")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "decompose_polygon_in_convex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "merge_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "clip_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "intersect_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "exclude_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "clip_polyline_with_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "intersect_polyline_with_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "offset_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "offset_polyline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY2D to "make_atlas")
}

private fun registerEngineTypeMethodForGeometry3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "build_box_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "build_cylinder_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "build_capsule_planes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "get_closest_points_between_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "get_closest_point_to_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to
      "get_closest_point_to_segment_uncapped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "ray_intersects_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "segment_intersects_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "segment_intersects_sphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "segment_intersects_cylinder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "segment_intersects_convex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRY3D to "clip_polygon")
}

private fun registerEngineTypeMethodForResourceLoader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "load_threaded_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "load_threaded_get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "load_threaded_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to
      "get_recognized_extensions_for_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "add_resource_format_loader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "remove_resource_format_loader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "set_abort_on_missing_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "get_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "has_cached")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCELOADER to "get_resource_uid")
}

private fun registerEngineTypeMethodForResourceSaver(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCESAVER to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCESAVER to "get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCESAVER to "add_resource_format_saver")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCESAVER to "remove_resource_format_saver")
}

private fun registerEngineTypeMethodForOS(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_connected_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "open_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "close_midi_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "alert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "crash")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_low_processor_usage_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_in_low_processor_usage_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_low_processor_usage_mode_sleep_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_low_processor_usage_mode_sleep_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_processor_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_processor_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_system_fonts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_system_font_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_system_font_path_for_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_executable_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "read_string_from_stdin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "create_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "create_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "kill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "shell_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_process_running")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_process_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "has_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_distribution_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_cmdline_args")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_cmdline_user_args")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_video_adapter_driver_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_restart_on_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_restart_on_exit_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_restart_on_exit_arguments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "delay_usec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "delay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_locale_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_model_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_userfs_persistent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_stdout_verbose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_debug_build")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_static_memory_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_static_memory_peak_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "move_to_trash")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_user_data_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_system_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_config_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_data_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_cache_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_keycode_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "is_keycode_unicode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "find_keycode_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_use_file_access_save_and_swap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "set_thread_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_thread_caller_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_main_thread_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "request_permission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "request_permissions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OS to "get_granted_permissions")
}

private fun registerEngineTypeMethodForEngine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_physics_ticks_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_physics_ticks_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_max_physics_steps_per_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_max_physics_steps_per_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_physics_jitter_fix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_physics_jitter_fix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_physics_interpolation_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_max_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_max_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_time_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_time_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_frames_drawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_frames_per_second")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_physics_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_process_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_main_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_version_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_author_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_copyright_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_donor_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_license_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_license_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_architecture_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "is_in_physics_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "has_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "register_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "unregister_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_singleton_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "register_script_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_script_language_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_script_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "is_editor_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "get_write_movie_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "set_print_error_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINE to "is_printing_error_messages")
}

private fun registerEngineTypeMethodForClassDB(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "get_class_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "get_inheriters_from_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "get_parent_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "is_parent_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "can_instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_has_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_set_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_has_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_integer_constant_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_has_integer_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_integer_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_has_enum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_enum_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_enum_constants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "class_get_integer_constant_enum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CLASSDB to "is_class_enabled")
}

private fun registerEngineTypeMethodForMarshalls(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "variant_to_base64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "base64_to_variant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "raw_to_base64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "base64_to_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "utf8_to_base64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARSHALLS to "base64_to_utf8")
}

private fun registerEngineTypeMethodForTranslationServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "set_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_tool_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "compare_locales")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "standardize_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_all_languages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_language_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_all_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_script_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_all_countries")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_country_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_locale_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "translate_plural")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "add_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "remove_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_translation_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "get_loaded_locales")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "is_pseudolocalization_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to
      "set_pseudolocalization_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "reload_pseudolocalization")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATIONSERVER to "pseudolocalize")
}

private fun registerEngineTypeMethodForInput(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_anything_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_key_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_physical_key_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_mouse_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_joy_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_just_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_action_just_released")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_action_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_action_raw_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "add_joy_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "remove_joy_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_joy_known")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_guid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_connected_joypads")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_vibration_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_joy_vibration_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "start_joy_vibration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "stop_joy_vibration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "vibrate_handheld")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_accelerometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_magnetometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_gyroscope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_accelerometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_magnetometer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_gyroscope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_last_mouse_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_mouse_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_mouse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_mouse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "action_press")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "action_release")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "get_current_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_custom_mouse_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "parse_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "set_use_accumulated_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "is_using_accumulated_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUT to "flush_buffered_events")
}

private fun registerEngineTypeMethodForInputMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "has_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "get_actions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "add_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "erase_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_set_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_get_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_add_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_has_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_erase_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_erase_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "action_get_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "event_is_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTMAP to "load_from_project_settings")
}

private fun registerEngineTypeMethodForEngineDebugger(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "register_profiler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "unregister_profiler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "is_profiling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "has_profiler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "profiler_add_frame_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "profiler_enable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "register_message_capture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "unregister_message_capture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "has_capture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEDEBUGGER to "send_message")
}

private fun registerEngineTypeMethodForTime(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_dict_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_date_dict_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_time_dict_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_string_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_date_string_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_time_string_from_unix_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_dict_from_datetime_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_string_from_datetime_dict")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_unix_time_from_datetime_dict")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_unix_time_from_datetime_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_offset_string_from_offset_minutes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_dict_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_date_dict_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_time_dict_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_datetime_string_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_date_string_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_time_string_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_time_zone_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_unix_time_from_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_ticks_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIME to "get_ticks_usec")
}

private fun registerEngineTypeMethodForGDExtensionManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "load_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "reload_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "unload_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "is_extension_loaded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "get_loaded_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSIONMANAGER to "get_extension")
}

private fun registerEngineTypeMethodForResourceUID(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "id_to_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "text_to_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "create_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "has_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "add_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "set_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "get_id_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEUID to "remove_id")
}

private fun registerEngineTypeMethodForWorkerThreadPool(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "add_task")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "is_task_completed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "wait_for_task_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "add_group_task")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "is_group_task_completed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to
      "get_group_processed_element_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORKERTHREADPOOL to "wait_for_group_task_completion")
}

private fun registerEngineTypeMethodForJavaClassWrapper(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVACLASSWRAPPER to "wrap")
}

private fun registerEngineTypeMethodForJavaScriptBridge(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "eval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "get_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "create_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "create_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "download_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "pwa_needs_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "pwa_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JAVASCRIPTBRIDGE to "force_fs_sync")
}

private fun registerEngineTypeMethodForThemeDB(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_default_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_project_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "set_fallback_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_fallback_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "set_fallback_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_fallback_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "set_fallback_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_fallback_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "set_fallback_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_fallback_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "set_fallback_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEMEDB to "get_fallback_stylebox")
}

private fun registerEngineTypeMethodForDisplayServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_submenu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_icon_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_add_icon_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_multistate_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_get_item_index_from_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_get_item_index_from_tag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_is_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_is_item_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_is_item_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_key_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_tag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_max_states")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_get_item_indentation_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_set_item_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_key_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_tag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_max_states")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "global_menu_set_item_indentation_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "global_menu_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_is_speaking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_get_voices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_get_voices_for_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_speak")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_resume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tts_set_utterance_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "is_dark_mode_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "is_dark_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_accent_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "mouse_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "mouse_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "mouse_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "mouse_get_button_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "clipboard_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "clipboard_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "clipboard_has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "clipboard_set_primary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "clipboard_get_primary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_display_cutouts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_display_safe_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_screen_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_primary_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_screen_from_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_usable_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_dpi")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "is_touchscreen_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_max_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_refresh_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_set_keep_on")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "screen_is_kept_on")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_window_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_window_at_screen_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_native_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_active_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_popup_safe_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_popup_safe_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_mouse_passthrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "window_get_position_with_decorations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_rect_changed_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_window_event_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_input_event_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_input_text_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_drop_files_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_attached_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_size_with_decorations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_window_buttons_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_safe_title_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_request_attention")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_move_to_foreground")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_can_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_transient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_exclusive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_ime_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_ime_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_set_vsync_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_get_vsync_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "window_is_maximize_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "window_maximize_on_title_dbl_click")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "window_minimize_on_title_dbl_click")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "ime_get_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "ime_get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "virtual_keyboard_show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "virtual_keyboard_hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "virtual_keyboard_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "cursor_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "cursor_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "cursor_set_custom_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "get_swap_cancel_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "enable_for_stealing_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "dialog_show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "dialog_input_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "keyboard_get_layout_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "keyboard_get_current_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "keyboard_set_current_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "keyboard_get_layout_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "keyboard_get_layout_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to
      "keyboard_get_keycode_from_physical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "process_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "force_process_and_drop_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "set_native_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tablet_get_driver_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tablet_get_driver_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tablet_get_current_driver")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DISPLAYSERVER to "tablet_set_current_driver")
}

private fun registerEngineTypeMethodForRenderingServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_layered_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_3d_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_proxy_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_3d_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_proxy_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_placeholder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "texture_2d_layered_placeholder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_3d_placeholder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_2d_layer_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_3d_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_replace")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_set_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "texture_set_force_redraw_if_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "texture_get_rd_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "shader_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "shader_set_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "shader_set_path_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "shader_get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_shader_parameter_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "shader_get_parameter_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "shader_set_default_texture_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "shader_get_default_texture_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_set_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_set_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "material_set_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_create_from_surfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_surface_get_format_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_get_format_vertex_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_get_format_attribute_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_get_format_skin_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_add_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_add_surface_from_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_set_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_get_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_surface_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_surface_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_get_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_surface_get_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_get_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_update_vertex_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "mesh_surface_update_attribute_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_surface_update_skin_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "mesh_set_shadow_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_allocate_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_get_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_set_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_instance_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_set_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_get_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_instance_get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "multimesh_instance_get_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_set_visible_instances")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_get_visible_instances")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_set_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "multimesh_get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_allocate_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_bone_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_bone_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_bone_set_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_bone_get_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "skeleton_set_base_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "directional_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "omni_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "spot_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_projector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "light_set_reverse_cull_face_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_set_max_sdfgi_cascade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_omni_set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "light_directional_set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "light_directional_set_blend_splits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_directional_set_sky_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "light_projectors_set_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "positional_soft_shadow_filter_set_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "directional_soft_shadow_filter_set_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "directional_shadow_atlas_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "reflection_probe_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "reflection_probe_set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_ambient_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_ambient_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_ambient_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "reflection_probe_set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_enable_box_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_enable_shadows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "reflection_probe_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "reflection_probe_set_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "reflection_probe_set_mesh_lod_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_albedo_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decal_set_normal_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "decals_set_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "gi_set_use_half_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_allocate_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_octree_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_octree_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_data_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_level_counts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_get_to_cell_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "voxel_gi_set_baked_exposure_normalization")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_use_two_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "voxel_gi_set_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_set_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_set_probe_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_set_probe_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_set_probe_capture_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "lightmap_get_probe_capture_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "lightmap_get_probe_capture_sh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "lightmap_get_probe_capture_tetrahedra")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "lightmap_get_probe_capture_bsp_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "lightmap_set_baked_exposure_normalization")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "lightmap_set_probe_capture_update_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_get_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_set_collision_base_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_transform_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_trails")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_trail_bind_poses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_is_inactive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_request_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_subemitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_emit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_get_current_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_set_emission_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "particles_collision_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_collision_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_attractor_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_attractor_directionality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_attractor_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_field_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_height_field_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "particles_collision_set_height_field_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "fog_volume_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "fog_volume_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "fog_volume_set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "fog_volume_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "visibility_notifier_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "visibility_notifier_set_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "visibility_notifier_set_callbacks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "occluder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "occluder_set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_orthogonal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_set_use_vertical_aspect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_use_xr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_parent_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_attach_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_render_direct_to_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_canvas_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_scaling_3d_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_scaling_3d_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_fsr_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_texture_mipmap_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_clear_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_disable_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_disable_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_disable_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_attach_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_attach_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_remove_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_snap_2d_transforms_to_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_snap_2d_vertices_to_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_default_canvas_item_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_default_canvas_item_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_canvas_stacking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_sdf_oversize_and_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_positional_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_positional_shadow_atlas_quadrant_subdivision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_msaa_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_msaa_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_screen_space_aa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_use_taa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_use_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_occlusion_rays_per_thread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_occlusion_culling_build_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_get_render_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_set_measure_render_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_get_measured_render_time_cpu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "viewport_get_measured_render_time_gpu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_vrs_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "viewport_set_vrs_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "sky_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "sky_set_radiance_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "sky_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "sky_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "sky_bake_panorama")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_sky_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_bg_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_ambient_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_glow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_tonemap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_adjustment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_ssr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_ssao")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_fog")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_sdfgi")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_volumetric_fog")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_glow_set_use_bicubic_upscale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_ssr_roughness_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_ssao_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_ssil_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_set_sdfgi_ray_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_sdfgi_frames_to_converge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_sdfgi_frames_to_update_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_volumetric_fog_volume_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "environment_set_volumetric_fog_filter_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "environment_bake_panorama")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "screen_space_roughness_limiter_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "sub_surface_scattering_set_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "sub_surface_scattering_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_attributes_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "camera_attributes_set_dof_blur_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "camera_attributes_set_dof_blur_bokeh_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_attributes_set_dof_blur")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "camera_attributes_set_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "camera_attributes_set_auto_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "scenario_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "scenario_set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "scenario_set_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "scenario_set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_create2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_layer_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_pivot_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_blend_shape_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_set_surface_override_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_transparency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_attach_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_set_extra_visibility_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_visibility_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_set_ignore_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_geometry_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_material_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_visibility_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_geometry_set_lightmap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instance_geometry_set_lod_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_set_shader_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_get_shader_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_get_shader_parameter_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "instance_geometry_get_shader_parameter_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instances_cull_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instances_cull_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "instances_cull_convex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "bake_render_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_set_item_mirroring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_set_disable_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_texture_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_texture_set_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_texture_set_shading_parameters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_texture_set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_texture_set_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_default_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_default_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_visibility_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_distance_field_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_custom_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_draw_behind_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_polyline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_texture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_add_msdf_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_add_lcd_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_add_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_nine_patch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_primitive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_triangle_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_particles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_clip_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_add_animation_slice")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_sort_children_by_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_z_as_relative_to_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_copy_to_backbuffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_draw_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_item_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_visibility_notifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_item_set_canvas_group_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_attach_to_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_z_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_layer_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_set_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_set_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_light_occluder_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_attach_to_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_set_as_sdf_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_light_occluder_set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_occluder_polygon_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_occluder_polygon_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "canvas_occluder_polygon_set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "canvas_set_shadow_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "global_shader_parameter_add")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "global_shader_parameter_remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "global_shader_parameter_get_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "global_shader_parameter_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "global_shader_parameter_set_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "global_shader_parameter_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to
      "global_shader_parameter_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "request_frame_drawn_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "has_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_rendering_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_video_adapter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_video_adapter_vendor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_video_adapter_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_video_adapter_api_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "make_sphere_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_test_cube")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_test_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_white_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "set_boot_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_default_clear_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "set_default_clear_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "has_os_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "set_debug_generate_wireframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "is_render_loop_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "set_render_loop_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_frame_setup_time_cpu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "force_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "force_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "get_rendering_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGSERVER to "create_local_rendering_device")
}

private fun registerEngineTypeMethodForAudioServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "remove_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "add_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "move_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_solo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_solo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_mute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_mute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_bypass_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_bypassing_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "add_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "remove_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_effect_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "swap_bus_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_effect_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "is_bus_effect_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_peak_volume_left_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_bus_peak_volume_right_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_playback_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_playback_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "unlock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_speaker_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_device_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_time_to_next_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_time_since_last_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "get_output_latency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_get_device_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "capture_set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "set_bus_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to "generate_bus_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSERVER to
      "set_enable_tagging_used_audio_streams")
}

private fun registerEngineTypeMethodForPhysicsServer2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "world_boundary_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "separation_ray_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "segment_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "circle_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "rectangle_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "capsule_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "convex_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "concave_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "shape_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "shape_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "shape_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "space_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_attach_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_get_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_area_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "area_set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "body_set_shape_as_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_attach_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "body_set_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "body_get_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_reset_mass_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_remove_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_set_omit_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "body_is_omitting_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "body_set_force_integration_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_test_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "body_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "joint_disable_collisions_between_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to
      "joint_is_disabled_collisions_between_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_make_pin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_make_groove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_make_damped_spring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "pin_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "pin_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "damped_spring_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "damped_spring_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "joint_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER2D to "get_process_info")
}

private fun registerEngineTypeMethodForPhysicsServer3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "world_boundary_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "separation_ray_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "sphere_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "box_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "capsule_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "cylinder_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "convex_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "concave_polygon_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "heightmap_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "custom_shape_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "shape_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "shape_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "shape_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "space_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_area_monitor_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "area_set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_shape_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_shape_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_attach_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_object_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "body_set_enable_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "body_is_continuous_collision_detection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_reset_mass_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_is_axis_locked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_remove_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_omit_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "body_is_omitting_force_integration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "body_set_force_integration_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_test_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "body_get_direct_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "soft_body_get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_make_pin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_set_local_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_get_local_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_set_local_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "pin_joint_get_local_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_make_hinge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "hinge_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "hinge_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "hinge_joint_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "hinge_joint_get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_make_slider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "slider_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "slider_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_make_cone_twist")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "cone_twist_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "cone_twist_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_set_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_get_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "joint_disable_collisions_between_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to
      "joint_is_disabled_collisions_between_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "joint_make_generic_6dof")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "generic_6dof_joint_set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "generic_6dof_joint_get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "generic_6dof_joint_set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "generic_6dof_joint_get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3D to "get_process_info")
}

private fun registerEngineTypeMethodForNavigationServer2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "get_maps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "map_set_edge_connection_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "map_get_edge_connection_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "map_set_link_connection_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "map_get_link_connection_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_closest_point_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_links")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_regions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_get_agents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "map_force_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "query_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_owns_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "region_set_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "region_get_connections_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "region_get_connection_pathway_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to
      "region_get_connection_pathway_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_is_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_set_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "link_get_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_target_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_is_map_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "agent_set_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER2D to "free_rid")
}

private fun registerEngineTypeMethodForNavigationServer3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "get_maps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_set_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "map_set_edge_connection_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "map_get_edge_connection_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "map_set_link_connection_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "map_get_link_connection_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "map_get_closest_point_to_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_closest_point_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_closest_point_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_links")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_regions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_get_agents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "map_force_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "query_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_owns_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_set_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_bake_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "region_get_connections_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "region_get_connection_pathway_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to
      "region_get_connection_pathway_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_is_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_set_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "link_get_owner_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_target_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_is_map_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "agent_set_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONSERVER3D to "get_process_info")
}

private fun registerEngineTypeMethodForXRServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "set_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_reference_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "center_on_hmd")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_hmd_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "add_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_interface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "remove_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_interfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "find_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "add_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "remove_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_trackers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "get_primary_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRSERVER to "set_primary_interface")
}

private fun registerEngineTypeMethodForCameraServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "get_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "get_feed_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "feeds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "add_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERASERVER to "remove_feed")
}

private fun registerEngineTypeMethodForAESContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "get_iv_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AESCONTEXT to "finish")
}

private fun registerEngineTypeMethodForAStar2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "_estimate_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "_compute_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_available_point_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "set_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "is_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "connect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "disconnect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "are_points_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_capacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "reserve_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_closest_position_in_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_point_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR2D to "get_id_path")
}

private fun registerEngineTypeMethodForAStar3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "_estimate_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "_compute_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_available_point_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "set_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "set_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "is_point_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "connect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "disconnect_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "are_points_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_capacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "reserve_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_closest_position_in_segment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_point_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTAR3D to "get_id_path")
}

private fun registerEngineTypeMethodForAStarGrid2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "_estimate_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "_compute_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "is_in_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "is_in_boundsv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "is_dirty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_jumping_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "is_jumping_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_diagonal_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_diagonal_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_default_compute_heuristic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_default_compute_heuristic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_default_estimate_heuristic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_default_estimate_heuristic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_point_solid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "is_point_solid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "set_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_point_weight_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_point_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASTARGRID2D to "get_id_path")
}

private fun registerEngineTypeMethodForAcceptDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_ok_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_hide_on_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_hide_on_ok")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_close_on_escape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_close_on_escape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "add_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "add_cancel_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "remove_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "register_text_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "has_autowrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "set_ok_button_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ACCEPTDIALOG to "get_ok_button_text")
}

private fun registerEngineTypeMethodForAnimatableBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATABLEBODY2D to "set_sync_to_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATABLEBODY2D to "is_sync_to_physics_enabled")
}

private fun registerEngineTypeMethodForAnimatableBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATABLEBODY3D to "set_sync_to_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATABLEBODY3D to "is_sync_to_physics_enabled")
}

private fun registerEngineTypeMethodForAnimatedSprite2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "get_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE2D to "get_speed_scale")
}

private fun registerEngineTypeMethodForAnimatedSprite3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_sprite_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDSPRITE3D to "get_speed_scale")
}

private fun registerEngineTypeMethodForAnimatedTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_current_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_current_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "set_frame_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATEDTEXTURE to "get_frame_duration")
}

private fun registerEngineTypeMethodForAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "add_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "remove_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_track_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "find_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_up")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_move_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_swap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_imported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_is_imported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "position_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "rotation_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "scale_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "blend_shape_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_remove_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_remove_key_at_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_key_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_key_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_find_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_interpolation_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_interpolation_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_set_interpolation_loop_wrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_get_interpolation_loop_wrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "track_is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "value_track_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "method_track_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "method_track_get_params")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_in_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_set_key_out_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_in_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_get_key_out_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "bezier_track_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_start_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_set_key_end_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_start_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "audio_track_get_key_end_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_insert_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_set_key_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "animation_track_get_key_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "set_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "copy_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATION to "compress")
}

private fun registerEngineTypeMethodForAnimationLibrary(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "add_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "remove_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "rename_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "has_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONLIBRARY to "get_animation_list")
}

private fun registerEngineTypeMethodForAnimationNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_child_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_parameter_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_child_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_parameter_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_get_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "_has_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_input_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "add_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "remove_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_filter_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "is_path_filtered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_filter_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "is_filter_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "blend_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "set_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODE to "get_parameter")
}

private fun registerEngineTypeMethodForAnimationNodeAdd2(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeAdd3(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "set_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "set_play_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEANIMATION to "get_play_mode")
}

private fun registerEngineTypeMethodForAnimationNodeBlend2(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeBlend3(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeBlendSpace1D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "remove_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_blend_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_value_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "get_value_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "set_use_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE1D to "is_using_sync")
}

private fun registerEngineTypeMethodForAnimationNodeBlendSpace2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "add_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "set_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to
      "get_blend_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "remove_blend_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "add_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_triangle_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "remove_triangle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_triangle_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_min_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_max_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_x_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_x_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_y_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_y_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_auto_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_auto_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "set_use_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDSPACE2D to "is_using_sync")
}

private fun registerEngineTypeMethodForAnimationNodeBlendTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "rename_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "connect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "disconnect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "set_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEBLENDTREE to "get_graph_offset")
}

private fun registerEngineTypeMethodForAnimationNodeOneShot(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_fadein_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_fadeout_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "has_autorestart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_autorestart_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to
      "set_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to
      "get_autorestart_random_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "set_mix_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODEONESHOT to "get_mix_mode")
}

private fun registerEngineTypeMethodForAnimationNodeOutput(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeStateMachine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "replace_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "rename_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "has_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "add_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_transition_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to
      "remove_transition_by_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "remove_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "set_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINE to "get_graph_offset")
}

private fun registerEngineTypeMethodForAnimationNodeStateMachinePlayback(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_play_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_current_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINEPLAYBACK to
      "get_travel_path")
}

private fun registerEngineTypeMethodForAnimationNodeStateMachineTransition(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_switch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_switch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_advance_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_advance_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_advance_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_advance_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_xfade_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_xfade_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "set_advance_expression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESTATEMACHINETRANSITION to
      "get_advance_expression")
}

private fun registerEngineTypeMethodForAnimationNodeSync(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESYNC to "set_use_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODESYNC to "is_using_sync")
}

private fun registerEngineTypeMethodForAnimationNodeTimeScale(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeTimeSeek(): Unit {
}

private fun registerEngineTypeMethodForAnimationNodeTransition(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_enabled_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_enabled_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "set_input_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to
      "is_input_set_as_auto_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_input_caption")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_xfade_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_xfade_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "get_xfade_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "set_from_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONNODETRANSITION to "is_from_start")
}

private fun registerEngineTypeMethodForAnimationPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "add_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "remove_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "rename_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "has_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation_library_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "has_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_animation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "animation_set_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "animation_get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_default_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_default_blend_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "play_backwards")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_current_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_assigned_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_assigned_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "clear_queue")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_playing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_reset_on_save_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_reset_on_save_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "find_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "find_animation_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "clear_caches")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "set_method_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_method_call_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to
      "set_movie_quit_on_finish_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "is_movie_quit_on_finish_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "get_current_animation_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONPLAYER to "advance")
}

private fun registerEngineTypeMethodForAnimationRootNode(): Unit {
}

private fun registerEngineTypeMethodForAnimationTrackEditPlugin(): Unit {
}

private fun registerEngineTypeMethodForAnimationTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_tree_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_tree_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_advance_expression_base_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_advance_expression_base_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "set_root_motion_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "get_root_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "rename_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ANIMATIONTREE to "advance")
}

private fun registerEngineTypeMethodForArea2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_is_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_gravity_a_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_point_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_point_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_point_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_point_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_linear_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_linear_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_angular_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_angular_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "has_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "has_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "overlaps_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "overlaps_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "get_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "set_audio_bus_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA2D to "is_overriding_audio_bus")
}

private fun registerEngineTypeMethodForArea3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_gravity_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity_is_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "is_gravity_a_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity_point_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_gravity_point_distance_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity_point_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_gravity_point_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_gravity_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_linear_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_linear_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_angular_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_angular_damp_space_override_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_wind_force_magnitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_wind_force_magnitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_wind_attenuation_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_wind_attenuation_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_wind_source_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_wind_source_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "is_monitorable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "is_monitoring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "has_overlapping_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "has_overlapping_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "overlaps_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "overlaps_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_audio_bus_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "is_overriding_audio_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_audio_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_use_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "is_using_reverb_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_reverb_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_reverb_bus_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_reverb_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_reverb_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "set_reverb_uniformity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AREA3D to "get_reverb_uniformity")
}

private fun registerEngineTypeMethodForArrayMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "add_blend_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "clear_blend_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "add_surface_from_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "clear_surfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_update_vertex_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_update_attribute_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_update_skin_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_array_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_array_index_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_find_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "surface_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "regen_normal_maps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "lightmap_unwrap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "set_shadow_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYMESH to "get_shadow_mesh")
}

private fun registerEngineTypeMethodForArrayOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYOCCLUDER3D to "set_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYOCCLUDER3D to "set_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ARRAYOCCLUDER3D to "set_indices")
}

private fun registerEngineTypeMethodForAspectRatioContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_alignment_horizontal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_alignment_horizontal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "set_alignment_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ASPECTRATIOCONTAINER to "get_alignment_vertical")
}

private fun registerEngineTypeMethodForAtlasTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "set_filter_clip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ATLASTEXTURE to "has_filter_clip")
}

private fun registerEngineTypeMethodForAudioBusLayout(): Unit {
}

private fun registerEngineTypeMethodForAudioEffect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECT to "_instantiate")
}

private fun registerEngineTypeMethodForAudioEffectAmplify(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTAMPLIFY to "set_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTAMPLIFY to "get_volume_db")
}

private fun registerEngineTypeMethodForAudioEffectBandLimitFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectBandPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectCapture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "can_get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "clear_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "set_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_frames_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_discarded_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_buffer_length_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCAPTURE to "get_pushed_frames")
}

private fun registerEngineTypeMethodForAudioEffectChorus(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_depth_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_voice_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCHORUS to "get_dry")
}

private fun registerEngineTypeMethodForAudioEffectCompressor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_attack_us")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_attack_us")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_release_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_release_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "set_sidechain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTCOMPRESSOR to "get_sidechain")
}

private fun registerEngineTypeMethodForAudioEffectDelay(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_tap1_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap1_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap1_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_tap2_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_tap2_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_tap2_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "is_feedback_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_delay_ms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_level_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "set_feedback_lowpass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDELAY to "get_feedback_lowpass")
}

private fun registerEngineTypeMethodForAudioEffectDistortion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_pre_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_pre_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_keep_hf_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_keep_hf_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "set_post_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTDISTORTION to "get_post_gain")
}

private fun registerEngineTypeMethodForAudioEffectEQ(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "set_band_gain_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "get_band_gain_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTEQ to "get_band_count")
}

private fun registerEngineTypeMethodForAudioEffectEQ10(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectEQ21(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectEQ6(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectFilter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_cutoff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_cutoff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_resonance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_resonance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "set_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTFILTER to "get_db")
}

private fun registerEngineTypeMethodForAudioEffectHighPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectHighShelfFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTINSTANCE to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTINSTANCE to "_process_silence")
}

private fun registerEngineTypeMethodForAudioEffectLimiter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_ceiling_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_ceiling_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_threshold_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_threshold_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_soft_clip_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_soft_clip_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "set_soft_clip_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTLIMITER to "get_soft_clip_ratio")
}

private fun registerEngineTypeMethodForAudioEffectLowPassFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectLowShelfFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectNotchFilter(): Unit {
}

private fun registerEngineTypeMethodForAudioEffectPanner(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPANNER to "set_pan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPANNER to "get_pan")
}

private fun registerEngineTypeMethodForAudioEffectPhaser(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_range_min_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_range_min_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_range_max_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_range_max_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_rate_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPHASER to "get_depth")
}

private fun registerEngineTypeMethodForAudioEffectPitchShift(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "set_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTPITCHSHIFT to "get_fft_size")
}

private fun registerEngineTypeMethodForAudioEffectRecord(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "set_recording_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "is_recording_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTRECORD to "get_recording")
}

private fun registerEngineTypeMethodForAudioEffectReverb(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_predelay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_predelay_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_predelay_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_predelay_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_room_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_room_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_dry")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_wet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "set_hpf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTREVERB to "get_hpf")
}

private fun registerEngineTypeMethodForAudioEffectSpectrumAnalyzer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_tap_back_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_tap_back_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "set_fft_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZER to "get_fft_size")
}

private fun registerEngineTypeMethodForAudioEffectSpectrumAnalyzerInstance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSPECTRUMANALYZERINSTANCE to
      "get_magnitude_for_frequency_range")
}

private fun registerEngineTypeMethodForAudioEffectStereoEnhance(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_pan_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_pan_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_time_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_time_pullout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "set_surround")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOEFFECTSTEREOENHANCE to "get_surround")
}

private fun registerEngineTypeMethodForAudioListener2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER2D to "make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER2D to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER2D to "is_current")
}

private fun registerEngineTypeMethodForAudioListener3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER3D to "make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER3D to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER3D to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOLISTENER3D to "get_listener_transform")
}

private fun registerEngineTypeMethodForAudioStream(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_instantiate_playback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_get_stream_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_is_monophonic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_get_bpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "_get_beat_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "is_monophonic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAM to "instantiate_playback")
}

private fun registerEngineTypeMethodForAudioStreamGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "set_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "set_buffer_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATOR to "get_buffer_length")
}

private fun registerEngineTypeMethodForAudioStreamGeneratorPlayback(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "push_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "can_push_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "push_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to
      "get_frames_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "get_skips")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMGENERATORPLAYBACK to "clear_buffer")
}

private fun registerEngineTypeMethodForAudioStreamMP3(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_bpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_bpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_beat_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_beat_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "set_bar_beats")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMMP3 to "get_bar_beats")
}

private fun registerEngineTypeMethodForAudioStreamMicrophone(): Unit {
}

private fun registerEngineTypeMethodForAudioStreamOggVorbis(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_packet_sequence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_packet_sequence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_loop_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_bpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_bpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_beat_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_beat_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "set_bar_beats")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMOGGVORBIS to "get_bar_beats")
}

private fun registerEngineTypeMethodForAudioStreamPlayback(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_get_loop_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACK to "_tag_used_streams")
}

private fun registerEngineTypeMethodForAudioStreamPlaybackOggVorbis(): Unit {
}

private fun registerEngineTypeMethodForAudioStreamPlaybackResampled(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACKRESAMPLED to "_mix_resampled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACKRESAMPLED to
      "_get_stream_sampling_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYBACKRESAMPLED to "begin_resample")
}

private fun registerEngineTypeMethodForAudioStreamPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_mix_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_mix_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "set_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER to "get_stream_playback")
}

private fun registerEngineTypeMethodForAudioStreamPlayer2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "set_panning_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_panning_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER2D to "get_stream_playback")
}

private fun registerEngineTypeMethodForAudioStreamPlayer3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_unit_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_unit_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_max_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_max_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_pitch_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_playback_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_autoplay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_area_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_emission_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_emission_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_emission_angle_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "is_emission_angle_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "set_emission_angle_filter_attenuation_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "get_emission_angle_filter_attenuation_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "set_attenuation_filter_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to
      "get_attenuation_filter_cutoff_hz")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_attenuation_filter_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_attenuation_filter_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_attenuation_model")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_attenuation_model")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_max_polyphony")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "set_panning_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_panning_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMPLAYER3D to "get_stream_playback")
}

private fun registerEngineTypeMethodForAudioStreamRandomizer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "add_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "move_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "remove_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to
      "set_stream_probability_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to
      "get_stream_probability_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "set_streams_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "get_streams_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "set_random_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "get_random_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to
      "set_random_volume_offset_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to
      "get_random_volume_offset_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "set_playback_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMRANDOMIZER to "get_playback_mode")
}

private fun registerEngineTypeMethodForAudioStreamWAV(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_loop_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_loop_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_loop_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_loop_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_loop_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "get_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "set_stereo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "is_stereo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_AUDIOSTREAMWAV to "save_to_wav")
}

private fun registerEngineTypeMethodForBackBufferCopy(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "set_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "set_copy_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BACKBUFFERCOPY to "get_copy_mode")
}

private fun registerEngineTypeMethodForBaseButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "_toggled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_pressed_no_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_hovered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_shortcut_in_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_shortcut_in_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_action_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_action_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_keep_pressed_outside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_keep_pressed_outside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_shortcut_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "is_shortcut_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "set_button_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEBUTTON to "get_button_group")
}

private fun registerEngineTypeMethodForBaseMaterial3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_transparency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_transparency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_alpha_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_alpha_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_alpha_antialiasing_edge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_alpha_antialiasing_edge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_shading_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_shading_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_specular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_specular")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_metallic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_metallic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_emission_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_emission_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_emission_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_emission_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_normal_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_normal_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_rim")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_rim")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_rim_tint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_rim_tint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_clearcoat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_clearcoat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_clearcoat_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_clearcoat_roughness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_heightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_heightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_subsurface_scattering_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_subsurface_scattering_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_transmittance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_transmittance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_transmittance_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_transmittance_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_transmittance_boost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_transmittance_boost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_backlight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_backlight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_refraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_refraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_point_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_point_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_detail_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_detail_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_depth_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_depth_draw_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_diffuse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_diffuse_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_specular_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_specular_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_detail_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_detail_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_uv1_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_uv1_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_uv1_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_uv1_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_uv1_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_uv1_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_uv2_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_uv2_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_uv2_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_uv2_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_uv2_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_uv2_triplanar_blend_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_heightmap_deep_parallax")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "is_heightmap_deep_parallax_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_heightmap_deep_parallax_min_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_heightmap_deep_parallax_min_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_heightmap_deep_parallax_max_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_heightmap_deep_parallax_max_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_heightmap_deep_parallax_flip_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_heightmap_deep_parallax_flip_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "set_heightmap_deep_parallax_flip_binormal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to
      "get_heightmap_deep_parallax_flip_binormal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_grow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_grow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_emission_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_emission_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_ao_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_ao_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_alpha_hash_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_alpha_hash_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_grow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "is_grow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_metallic_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_metallic_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_roughness_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_roughness_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_ao_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_ao_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_refraction_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_refraction_texture_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_proximity_fade_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "is_proximity_fade_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_proximity_fade_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_proximity_fade_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_msdf_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_msdf_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_distance_fade_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_distance_fade_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "set_distance_fade_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BASEMATERIAL3D to "get_distance_fade_min_distance")
}

private fun registerEngineTypeMethodForBitMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "create_from_image_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "set_bitv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "set_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_bitv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "set_bit_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_true_bit_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "resize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "grow_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "convert_to_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BITMAP to "opaque_to_polygons")
}

private fun registerEngineTypeMethodForBone2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "apply_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_skeleton_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_index_in_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_default_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_default_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_autocalculate_length_and_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_autocalculate_length_and_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "set_bone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONE2D to "get_bone_angle")
}

private fun registerEngineTypeMethodForBoneAttachment3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "set_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "get_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "set_bone_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "get_bone_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "on_bone_pose_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "set_override_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "get_override_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "set_use_external_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "get_use_external_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "set_external_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEATTACHMENT3D to "get_external_skeleton")
}

private fun registerEngineTypeMethodForBoneMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEMAP to "get_profile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEMAP to "set_profile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEMAP to "get_skeleton_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEMAP to "set_skeleton_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BONEMAP to "find_profile_bone_name")
}

private fun registerEngineTypeMethodForBoxContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "add_spacer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "set_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "get_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "set_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXCONTAINER to "is_vertical")
}

private fun registerEngineTypeMethodForBoxMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "set_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "set_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "get_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXMESH to "get_subdivide_depth")
}

private fun registerEngineTypeMethodForBoxOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXOCCLUDER3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXOCCLUDER3D to "get_size")
}

private fun registerEngineTypeMethodForBoxShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXSHAPE3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BOXSHAPE3D to "get_size")
}

private fun registerEngineTypeMethodForButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_text_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_text_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_icon_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "get_icon_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "set_expand_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTON to "is_expand_icon")
}

private fun registerEngineTypeMethodForButtonGroup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTONGROUP to "get_pressed_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_BUTTONGROUP to "get_buttons")
}

private fun registerEngineTypeMethodForCPUParticles2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_rect_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_rect_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_split_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_split_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_scale_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_scale_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "get_scale_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "set_scale_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES2D to "convert_from_particles")
}

private fun registerEngineTypeMethodForCPUParticles3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_param_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_split_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_split_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_scale_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_scale_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_scale_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_scale_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "get_scale_curve_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "set_scale_curve_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CPUPARTICLES3D to "convert_from_particles")
}

private fun registerEngineTypeMethodForCSGBox3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX3D to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGBOX3D to "get_material")
}

private fun registerEngineTypeMethodForCSGCombiner3D(): Unit {
}

private fun registerEngineTypeMethodForCSGCylinder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "get_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_cone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "is_cone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "set_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGCYLINDER3D to "get_smooth_faces")
}

private fun registerEngineTypeMethodForCSGMesh3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH3D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH3D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGMESH3D to "get_material")
}

private fun registerEngineTypeMethodForCSGPolygon3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_spin_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_spin_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_spin_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_spin_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_interval_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_interval_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_simplify_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_simplify_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "is_path_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_continuous_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "is_path_continuous_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_u_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_path_u_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_path_joined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "is_path_joined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "set_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPOLYGON3D to "get_smooth_faces")
}

private fun registerEngineTypeMethodForCSGPrimitive3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPRIMITIVE3D to "set_flip_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGPRIMITIVE3D to "get_flip_faces")
}

private fun registerEngineTypeMethodForCSGShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "is_root_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_use_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "is_using_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "set_calculate_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "is_calculating_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSHAPE3D to "get_meshes")
}

private fun registerEngineTypeMethodForCSGSphere3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "set_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "get_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGSPHERE3D to "get_material")
}

private fun registerEngineTypeMethodForCSGTorus3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_ring_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_ring_sides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "set_smooth_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CSGTORUS3D to "get_smooth_faces")
}

private fun registerEngineTypeMethodForCallbackTweener(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CALLBACKTWEENER to "set_delay")
}

private fun registerEngineTypeMethodForCamera2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_anchor_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_anchor_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_ignore_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_ignoring_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_limit_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_vertical_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_drag_vertical_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_horizontal_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_drag_horizontal_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_vertical_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_vertical_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_horizontal_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_horizontal_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_drag_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_screen_center_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_position_smoothing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_position_smoothing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_position_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_position_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_rotation_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_rotation_smoothing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_rotation_smoothing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "get_rotation_smoothing_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "force_update_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "reset_smoothing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_screen_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_screen_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_limit_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_limit_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "set_margin_drawing_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA2D to "is_margin_drawing_enabled")
}

private fun registerEngineTypeMethodForCamera3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "project_ray_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "project_local_ray_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "project_ray_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "unproject_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "is_position_behind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "project_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_orthogonal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "make_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "clear_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "is_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_camera_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_frustum_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_frustum_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_keep_aspect_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_keep_aspect_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_doppler_tracking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "is_position_in_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_camera_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_pyramid_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "set_cull_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERA3D to "get_cull_mask_value")
}

private fun registerEngineTypeMethodForCameraAttributes(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "set_exposure_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "get_exposure_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "set_exposure_sensitivity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "get_exposure_sensitivity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "set_auto_exposure_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "is_auto_exposure_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "set_auto_exposure_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "get_auto_exposure_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "set_auto_exposure_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTES to "get_auto_exposure_scale")
}

private fun registerEngineTypeMethodForCameraAttributesPhysical(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_aperture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_aperture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_shutter_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_shutter_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_focal_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_focal_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_focus_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_focus_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "set_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to "get_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to
      "set_auto_exposure_max_exposure_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to
      "get_auto_exposure_max_exposure_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to
      "set_auto_exposure_min_exposure_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPHYSICAL to
      "get_auto_exposure_min_exposure_value")
}

private fun registerEngineTypeMethodForCameraAttributesPractical(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_far_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "is_dof_blur_far_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_far_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_dof_blur_far_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_far_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_dof_blur_far_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_near_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "is_dof_blur_near_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_near_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_dof_blur_near_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_dof_blur_near_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_dof_blur_near_transition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to "set_dof_blur_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to "get_dof_blur_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_auto_exposure_max_sensitivity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_auto_exposure_max_sensitivity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "set_auto_exposure_min_sensitivity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAATTRIBUTESPRACTICAL to
      "get_auto_exposure_min_sensitivity")
}

private fun registerEngineTypeMethodForCameraFeed(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "set_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERAFEED to "get_datatype")
}

private fun registerEngineTypeMethodForCameraTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_which_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_which_feed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "set_camera_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAMERATEXTURE to "get_camera_active")
}

private fun registerEngineTypeMethodForCanvasGroup(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "set_fit_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "get_fit_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "set_clear_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "get_clear_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "set_use_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASGROUP to "is_using_mipmaps")
}

private fun registerEngineTypeMethodForCanvasItem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_visible_in_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "queue_redraw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "move_to_front")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_as_top_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_set_as_top_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_self_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_z_as_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_z_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_y_sort_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_y_sort_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_draw_behind_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_draw_behind_parent_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_dashed_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polyline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polyline_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_arc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_circle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_msdf_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_lcd_texture_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_style_box")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_primitive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_colored_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_string_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multiline_string_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_char_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_set_transform_matrix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_animation_slice")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "draw_end_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_transform_with_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_viewport_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_viewport_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_screen_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_local_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_global_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_use_parent_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_notify_local_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to
      "is_local_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_notify_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "is_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "force_update_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "make_canvas_position_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "make_input_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_visibility_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_visibility_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_visibility_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_visibility_layer_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "set_clip_children_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEM to "get_clip_children_mode")
}

private fun registerEngineTypeMethodForCanvasItemMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_light_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_light_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_h_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_v_frames")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "set_particles_anim_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASITEMMATERIAL to "get_particles_anim_loop")
}

private fun registerEngineTypeMethodForCanvasLayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_final_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_follow_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "is_following_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_follow_viewport_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_follow_viewport_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "set_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_custom_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASLAYER to "get_canvas")
}

private fun registerEngineTypeMethodForCanvasModulate(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASMODULATE to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASMODULATE to "get_color")
}

private fun registerEngineTypeMethodForCanvasTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_diffuse_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_diffuse_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_specular_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_specular_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_specular_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_specular_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_specular_shininess")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_specular_shininess")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "set_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CANVASTEXTURE to "get_texture_repeat")
}

private fun registerEngineTypeMethodForCapsuleMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULEMESH to "get_rings")
}

private fun registerEngineTypeMethodForCapsuleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE2D to "get_height")
}

private fun registerEngineTypeMethodForCapsuleShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE3D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CAPSULESHAPE3D to "get_height")
}

private fun registerEngineTypeMethodForCenterContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CENTERCONTAINER to "set_use_top_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CENTERCONTAINER to "is_using_top_left")
}

private fun registerEngineTypeMethodForCharFXTransform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_elapsed_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_elapsed_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "is_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_glyph_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_glyph_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_relative_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_relative_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_glyph_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_glyph_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARFXTRANSFORM to "set_font")
}

private fun registerEngineTypeMethodForCharacterBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "move_and_slide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_floor_stop_on_slope_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_floor_stop_on_slope_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to
      "set_floor_constant_speed_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_floor_constant_speed_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_floor_block_on_wall_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_floor_block_on_wall_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_slide_on_ceiling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_slide_on_ceiling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_platform_floor_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_platform_floor_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_platform_wall_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_platform_wall_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_max_slides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_max_slides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_floor_max_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_floor_max_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_floor_snap_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_floor_snap_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_wall_min_slide_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_wall_min_slide_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_up_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_up_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_motion_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_motion_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "set_platform_on_leave")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_platform_on_leave")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_floor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_floor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_ceiling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_ceiling_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_wall")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "is_on_wall_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_floor_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_wall_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_last_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_position_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_real_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_floor_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_platform_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_slide_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY2D to "get_last_slide_collision")
}

private fun registerEngineTypeMethodForCharacterBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "move_and_slide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_safe_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_floor_stop_on_slope_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_floor_stop_on_slope_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to
      "set_floor_constant_speed_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_floor_constant_speed_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_floor_block_on_wall_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_floor_block_on_wall_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_slide_on_ceiling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_slide_on_ceiling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_platform_floor_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_platform_floor_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_platform_wall_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_platform_wall_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_max_slides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_max_slides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_floor_max_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_floor_max_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_floor_snap_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_floor_snap_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_wall_min_slide_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_wall_min_slide_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_up_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_up_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_motion_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_motion_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "set_platform_on_leave")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_platform_on_leave")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_floor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_floor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_ceiling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_ceiling_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_wall")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "is_on_wall_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_floor_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_wall_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_last_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_position_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_real_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_floor_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_platform_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_platform_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_slide_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_slide_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CHARACTERBODY3D to "get_last_slide_collision")
}

private fun registerEngineTypeMethodForCheckBox(): Unit {
}

private fun registerEngineTypeMethodForCheckButton(): Unit {
}

private fun registerEngineTypeMethodForCircleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CIRCLESHAPE2D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CIRCLESHAPE2D to "get_radius")
}

private fun registerEngineTypeMethodForCodeEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "_confirm_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "_request_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "_filter_code_completion_candidates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_indent_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_indent_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_indent_using_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_indent_using_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_auto_indent_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_auto_indent_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_auto_indent_prefixes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_auto_indent_prefixes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "do_indent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "do_unindent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "indent_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "unindent_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_auto_brace_completion_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_auto_brace_completion_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_highlight_matching_braces_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_highlight_matching_braces_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "add_auto_brace_completion_pair")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_auto_brace_completion_pairs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_auto_brace_completion_pairs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "has_auto_brace_completion_open_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "has_auto_brace_completion_close_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_auto_brace_completion_close_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_draw_breakpoints_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_drawing_breakpoints_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_draw_bookmarks_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_drawing_bookmarks_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_draw_executing_lines_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_drawing_executing_lines_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_as_breakpoint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_breakpointed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "clear_breakpointed_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_breakpointed_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_as_bookmarked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_bookmarked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "clear_bookmarked_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_bookmarked_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_as_executing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_executing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "clear_executing_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_executing_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_draw_line_numbers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_draw_line_numbers_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_numbers_zero_padded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_numbers_zero_padded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_draw_fold_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_drawing_fold_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_folding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_folding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "can_fold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "fold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "unfold_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "fold_all_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "unfold_all_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "toggle_foldable_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_line_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_folded_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "add_string_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "remove_string_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "has_string_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_string_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "clear_string_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_string_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_in_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "add_comment_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "remove_comment_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "has_comment_delimiter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_comment_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "clear_comment_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_comment_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_in_comment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_delimiter_start_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_delimiter_end_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_delimiter_start_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_delimiter_end_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_code_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_code_hint_draw_below")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_text_for_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "request_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "add_code_completion_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "update_code_completion_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_code_completion_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_code_completion_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_code_completion_selected_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_code_completion_selected_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "confirm_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "cancel_code_completion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_code_completion_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_code_completion_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_code_completion_prefixes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_code_completion_prefixes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_line_length_guidelines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_line_length_guidelines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_symbol_lookup_on_click_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "is_symbol_lookup_on_click_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "get_text_for_symbol_lookup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEEDIT to "set_symbol_lookup_word_as_valid")
}

private fun registerEngineTypeMethodForCodeHighlighter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "add_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "remove_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "has_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "clear_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "add_member_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "remove_member_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "has_member_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_member_keyword_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_member_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "clear_member_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_member_keyword_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "add_color_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "remove_color_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "has_color_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_color_regions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "clear_color_regions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_color_regions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_function_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_function_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_number_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_number_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_symbol_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_symbol_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "set_member_variable_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CODEHIGHLIGHTER to "get_member_variable_color")
}

private fun registerEngineTypeMethodForCollisionObject2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_mouse_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_mouse_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_mouse_shape_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "_mouse_shape_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "set_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "is_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "create_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "remove_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "get_shape_owners")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "is_shape_owner_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "shape_owner_set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "is_shape_owner_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "shape_owner_set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to
      "get_shape_owner_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_get_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_owner_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT2D to "shape_find_owner")
}

private fun registerEngineTypeMethodForCollisionObject3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "_input_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "_mouse_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "_mouse_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "is_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "set_capture_input_on_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_capture_input_on_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "create_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "remove_shape_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "get_shape_owners")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "is_shape_owner_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_add_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_get_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_get_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_remove_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_owner_clear_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONOBJECT3D to "shape_find_owner")
}

private fun registerEngineTypeMethodForCollisionPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_build_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_build_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "is_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON2D to "get_one_way_collision_margin")
}

private fun registerEngineTypeMethodForCollisionPolygon3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONPOLYGON3D to "get_margin")
}

private fun registerEngineTypeMethodForCollisionShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_one_way_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "is_one_way_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "get_one_way_collision_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "set_debug_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE2D to "get_debug_color")
}

private fun registerEngineTypeMethodForCollisionShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "set_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "is_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLLISIONSHAPE3D to "make_convex_from_siblings")
}

private fun registerEngineTypeMethodForColorPicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_deferred_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_deferred_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_color_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_color_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_edit_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_editing_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_can_add_swatches")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_swatches_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_presets_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_presets_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_modes_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_modes_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_sampler_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_sampler_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_sliders_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "are_sliders_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_hex_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "is_hex_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "add_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "erase_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_presets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "add_recent_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "erase_recent_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_recent_presets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "set_picker_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKER to "get_picker_shape")
}

private fun registerEngineTypeMethodForColorPickerButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "set_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_pick_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_picker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "set_edit_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORPICKERBUTTON to "is_editing_alpha")
}

private fun registerEngineTypeMethodForColorRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORRECT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COLORRECT to "get_color")
}

private fun registerEngineTypeMethodForCompressedCubemap(): Unit {
}

private fun registerEngineTypeMethodForCompressedCubemapArray(): Unit {
}

private fun registerEngineTypeMethodForCompressedTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURE2D to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURE2D to "get_load_path")
}

private fun registerEngineTypeMethodForCompressedTexture2DArray(): Unit {
}

private fun registerEngineTypeMethodForCompressedTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURE3D to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURE3D to "get_load_path")
}

private fun registerEngineTypeMethodForCompressedTextureLayered(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURELAYERED to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_COMPRESSEDTEXTURELAYERED to "get_load_path")
}

private fun registerEngineTypeMethodForConcavePolygonShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE2D to "set_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE2D to "get_segments")
}

private fun registerEngineTypeMethodForConcavePolygonShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE3D to "set_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE3D to "get_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE3D to
      "set_backface_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONCAVEPOLYGONSHAPE3D to
      "is_backface_collision_enabled")
}

private fun registerEngineTypeMethodForConeTwistJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT3D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONETWISTJOINT3D to "get_param")
}

private fun registerEngineTypeMethodForConfigFile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "set_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "has_section")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "has_section_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "get_section_keys")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "erase_section")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "erase_section_key")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "encode_to_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "load_encrypted_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "save_encrypted_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIGFILE to "clear")
}

private fun registerEngineTypeMethodForConfirmationDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIRMATIONDIALOG to "get_cancel_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIRMATIONDIALOG to "set_cancel_button_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONFIRMATIONDIALOG to "get_cancel_button_text")
}

private fun registerEngineTypeMethodForContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "_get_allowed_size_flags_horizontal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "_get_allowed_size_flags_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "queue_sort")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTAINER to "fit_child_in_rect")
}

private fun registerEngineTypeMethodForControl(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_has_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_structured_text_parser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_get_drag_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_can_drop_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_drop_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_make_custom_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "accept_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_combined_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchors_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_offsets_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchors_and_offsets_preset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_anchor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_anchor_and_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "reset_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_custom_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_pivot_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_pivot_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_custom_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_parent_area_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_screen_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_global_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "grab_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "release_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "find_prev_valid_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "find_next_valid_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_h_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_h_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_stretch_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_stretch_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_v_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_v_size_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_theme_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "begin_bulk_theme_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "end_bulk_theme_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "add_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "remove_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "has_theme_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_default_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_theme_default_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_parent_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_h_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_h_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_v_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_v_grow_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_default_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_cursor_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_neighbor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_neighbor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_focus_previous")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_focus_previous")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "force_drag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_mouse_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_mouse_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_force_pass_scroll_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_force_pass_scroll_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_clip_contents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_clipping_contents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "grab_click_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_drag_forwarding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_drag_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_drag_successful")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_shortcut_context")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_shortcut_context")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "update_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_layout_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "get_layout_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_layout_rtl")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_auto_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_auto_translating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "set_localize_numeral_system")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONTROL to "is_localizing_numeral_system")
}

private fun registerEngineTypeMethodForConvexPolygonShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "set_point_cloud")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE2D to "get_points")
}

private fun registerEngineTypeMethodForConvexPolygonShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE3D to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CONVEXPOLYGONSHAPE3D to "get_points")
}

private fun registerEngineTypeMethodForCrypto(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_random_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_rsa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "generate_self_signed_certificate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "sign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "verify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "encrypt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "decrypt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "hmac_digest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTO to "constant_time_compare")
}

private fun registerEngineTypeMethodForCryptoKey(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "is_public_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "save_to_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CRYPTOKEY to "load_from_string")
}

private fun registerEngineTypeMethodForCubemap(): Unit {
}

private fun registerEngineTypeMethodForCubemapArray(): Unit {
}

private fun registerEngineTypeMethodForCurve(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "sample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "sample_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_left_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_right_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_left_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_point_right_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_left_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_right_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_left_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_point_right_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_min_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_min_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_max_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_max_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "clean_dupes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "get_bake_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE to "set_bake_resolution")
}

private fun registerEngineTypeMethodForCurve2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "sample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "samplef")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "set_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_baked_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "sample_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "sample_baked_with_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_baked_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "get_closest_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "tessellate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE2D to "tessellate_even_length")
}

private fun registerEngineTypeMethodForCurve3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_point_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "sample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "samplef")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_bake_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "set_up_vector_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "is_up_vector_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "sample_baked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "sample_baked_with_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "sample_baked_up_vector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_tilts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_baked_up_vectors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "get_closest_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "tessellate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVE3D to "tessellate_even_length")
}

private fun registerEngineTypeMethodForCurveTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "set_texture_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVETEXTURE to "get_texture_mode")
}

private fun registerEngineTypeMethodForCurveXYZTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "set_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "get_curve_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "set_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "get_curve_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "set_curve_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CURVEXYZTEXTURE to "get_curve_z")
}

private fun registerEngineTypeMethodForCylinderMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_top_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_top_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_bottom_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_bottom_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_cap_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "is_cap_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "set_cap_bottom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERMESH to "is_cap_bottom")
}

private fun registerEngineTypeMethodForCylinderShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE3D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_CYLINDERSHAPE3D to "get_height")
}

private fun registerEngineTypeMethodForDTLSServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DTLSSERVER to "setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DTLSSERVER to "take_connection")
}

private fun registerEngineTypeMethodForDampedSpringJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "set_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DAMPEDSPRINGJOINT2D to "get_damping")
}

private fun registerEngineTypeMethodForDecal(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_albedo_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_albedo_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_upper_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_upper_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_lower_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_lower_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_normal_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_normal_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_enable_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "is_distance_fade_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_distance_fade_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_distance_fade_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_distance_fade_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_distance_fade_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DECAL to "get_cull_mask")
}

private fun registerEngineTypeMethodForDirAccess(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_open_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "list_dir_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "current_is_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "list_dir_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_files_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_directories")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_directories_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_drive_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_drive_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_current_drive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "change_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "make_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "make_dir_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "make_dir_recursive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "make_dir_recursive_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "file_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "dir_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "dir_exists_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_space_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "copy_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "rename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "rename_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "remove_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "set_include_navigational")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_include_navigational")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "set_include_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRACCESS to "get_include_hidden")
}

private fun registerEngineTypeMethodForDirectionalLight2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT2D to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT2D to "get_max_distance")
}

private fun registerEngineTypeMethodForDirectionalLight3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "get_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "set_blend_splits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "is_blend_splits_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "set_sky_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_DIRECTIONALLIGHT3D to "get_sky_mode")
}

private fun registerEngineTypeMethodForENetConnection(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "create_host_bound")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "create_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "destroy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "service")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "flush")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "bandwidth_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "channel_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "broadcast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "dtls_server_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "dtls_client_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "refuse_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "pop_statistic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "get_max_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "get_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETCONNECTION to "get_peers")
}

private fun registerEngineTypeMethodForENetMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "create_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "create_client")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "create_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "add_mesh_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "set_bind_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "get_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETMULTIPLAYERPEER to "get_peer")
}

private fun registerEngineTypeMethodForENetPacketPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "peer_disconnect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "peer_disconnect_later")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "peer_disconnect_now")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "ping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "ping_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "reset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "throttle_configure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "set_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "get_remote_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "get_remote_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "get_statistic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "get_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENETPACKETPEER to "is_active")
}

private fun registerEngineTypeMethodForEditorCommandPalette(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORCOMMANDPALETTE to "add_command")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORCOMMANDPALETTE to "remove_command")
}

private fun registerEngineTypeMethodForEditorDebuggerPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERPLUGIN to "_setup_session")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERPLUGIN to "_has_capture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERPLUGIN to "_capture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERPLUGIN to "get_session")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERPLUGIN to "get_sessions")
}

private fun registerEngineTypeMethodForEditorDebuggerSession(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "send_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "toggle_profiler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "is_breaked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "is_debuggable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "add_session_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORDEBUGGERSESSION to "remove_session_tab")
}

private fun registerEngineTypeMethodForEditorExportPlatform(): Unit {
}

private fun registerEngineTypeMethodForEditorExportPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_export_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_begin_customize_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_customize_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_begin_customize_scenes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_customize_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to
      "_get_customization_configuration_hash")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_end_customize_scenes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_end_customize_resources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_shared_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_project_static_lib")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_framework")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_embedded_framework")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_plist_content")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_linker_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_bundle_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_ios_cpp_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "add_macos_plugin_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITOREXPORTPLUGIN to "skip")
}

private fun registerEngineTypeMethodForEditorFeatureProfile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_editor_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_class_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_class_property_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "set_disable_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "is_feature_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "get_feature_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "save_to_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFEATUREPROFILE to "load_from_file")
}

private fun registerEngineTypeMethodForEditorFileDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "clear_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "add_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_file_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_file_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_vbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_show_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "is_showing_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_display_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "get_display_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "set_disable_overwrite_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "is_overwrite_warning_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILEDIALOG to "invalidate")
}

private fun registerEngineTypeMethodForEditorFileSystem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_filesystem")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "is_scanning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_scanning_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "scan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "scan_sources")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "update_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_filesystem_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "get_file_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "update_script_classes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEM to "reimport_files")
}

private fun registerEngineTypeMethodForEditorFileSystemDirectory(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_subdir_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_subdir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_file_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_script_class_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_script_class_extends")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to
      "get_file_import_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "find_file_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMDIRECTORY to "find_dir_index")
}

private fun registerEngineTypeMethodForEditorFileSystemImportFormatSupportQuery(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMIMPORTFORMATSUPPORTQUERY to
      "_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMIMPORTFORMATSUPPORTQUERY to
      "_get_file_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORFILESYSTEMIMPORTFORMATSUPPORTQUERY to "_query")
}

private fun registerEngineTypeMethodForEditorImportPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_importer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_visible_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_preset_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_preset_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_import_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_save_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_resource_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_import_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_get_option_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORIMPORTPLUGIN to "_import")
}

private fun registerEngineTypeMethodForEditorInspector(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTOR to "get_selected_path")
}

private fun registerEngineTypeMethodForEditorInspectorPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_can_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_parse_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_parse_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_parse_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_parse_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "_parse_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "add_custom_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to "add_property_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINSPECTORPLUGIN to
      "add_property_editor_for_multiple_properties")
}

private fun registerEngineTypeMethodForEditorInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "inspect_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_settings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_script_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_base_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "edit_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "edit_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "edit_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "open_scene_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "reload_scene_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_main_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "play_custom_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "stop_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "is_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_playing_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_open_scenes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_resource_previewer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_resource_filesystem")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_main_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "make_mesh_previews")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "select_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_selected_paths")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_current_directory")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_file_system_dock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_editor_paths")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_command_palette")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_plugin_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "is_plugin_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_movie_maker_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "is_movie_maker_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "get_inspector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "save_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "save_scene_as")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "restart_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_main_screen_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to "set_distraction_free_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORINTERFACE to
      "is_distraction_free_mode_enabled")
}

private fun registerEngineTypeMethodForEditorNode3DGizmo(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_redraw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_get_handle_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_is_handle_highlighted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_get_handle_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_set_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_commit_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_subgizmos_intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_subgizmos_intersect_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_set_subgizmo_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_get_subgizmo_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "_commit_subgizmos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_collision_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_collision_triangles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_unscaled_billboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "add_handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "set_node_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "get_node_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "get_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "set_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "is_subgizmo_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMO to "get_subgizmo_selection")
}

private fun registerEngineTypeMethodForEditorNode3DGizmoPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_has_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_create_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_get_gizmo_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_get_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_can_be_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to
      "_is_selectable_when_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_redraw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_get_handle_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_is_handle_highlighted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_get_handle_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_set_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_commit_handle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to
      "_subgizmos_intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to
      "_subgizmos_intersect_frustum")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_get_subgizmo_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_set_subgizmo_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "_commit_subgizmos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "create_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "create_icon_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "create_handle_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "add_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORNODE3DGIZMOPLUGIN to "get_material")
}

private fun registerEngineTypeMethodForEditorPaths(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "get_data_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "get_config_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "get_cache_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "is_self_contained")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "get_self_contained_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPATHS to "get_project_settings_dir")
}

private fun registerEngineTypeMethodForEditorPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_forward_canvas_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_forward_canvas_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "_forward_canvas_force_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_forward_3d_gui_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_forward_3d_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "_forward_3d_force_draw_over_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_get_plugin_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_get_plugin_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_has_main_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_make_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_save_external_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_apply_changes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_get_breakpoints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_set_window_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_get_window_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_build")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_enable_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "_disable_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_container")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_control_to_dock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_docks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_control_from_container")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_tool_menu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_tool_submenu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_tool_menu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_export_as_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_custom_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_custom_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_autoload_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_autoload_singleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "update_overlays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "make_bottom_panel_item_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "hide_bottom_panel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_undo_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "add_undo_redo_inspector_hook_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "remove_undo_redo_inspector_hook_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "queue_save_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_translation_parser_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_translation_parser_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_scene_format_importer_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "remove_scene_format_importer_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_scene_post_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_scene_post_import_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_export_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_export_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_node_3d_gizmo_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_node_3d_gizmo_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_inspector_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_inspector_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "set_input_event_forwarding_always_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to
      "set_force_draw_over_forwarding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_editor_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "get_script_create_dialog")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "add_debugger_plugin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPLUGIN to "remove_debugger_plugin")
}

private fun registerEngineTypeMethodForEditorProperty(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "_update_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "_set_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_draw_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_draw_warning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_keying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_keying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_deletable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "is_deletable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_edited_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "get_edited_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "update_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "add_focusable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "set_bottom_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORPROPERTY to "emit_changed")
}

private fun registerEngineTypeMethodForEditorResourceConversionPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCECONVERSIONPLUGIN to "_converts_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCECONVERSIONPLUGIN to "_handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCECONVERSIONPLUGIN to "_convert")
}

private fun registerEngineTypeMethodForEditorResourcePicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_set_create_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "_handle_menu_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_allowed_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_edited_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "get_edited_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "is_toggle_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_toggle_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPICKER to "is_editable")
}

private fun registerEngineTypeMethodForEditorResourcePreview(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "queue_resource_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to
      "queue_edited_resource_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "add_preview_generator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "remove_preview_generator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEW to "check_for_invalidation")
}

private fun registerEngineTypeMethodForEditorResourcePreviewGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to "_handles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to "_generate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "_generate_from_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "_generate_small_preview_automatically")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORRESOURCEPREVIEWGENERATOR to
      "_can_generate_small_preview")
}

private fun registerEngineTypeMethodForEditorSceneFormatImporter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEFORMATIMPORTER to "_get_import_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEFORMATIMPORTER to "_get_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEFORMATIMPORTER to "_import_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEFORMATIMPORTER to "_get_import_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEFORMATIMPORTER to
      "_get_option_visibility")
}

private fun registerEngineTypeMethodForEditorSceneFormatImporterBlend(): Unit {
}

private fun registerEngineTypeMethodForEditorSceneFormatImporterFBX(): Unit {
}

private fun registerEngineTypeMethodForEditorSceneFormatImporterGLTF(): Unit {
}

private fun registerEngineTypeMethodForEditorScenePostImport(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORT to "_post_import")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORT to "get_source_file")
}

private fun registerEngineTypeMethodForEditorScenePostImportPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to
      "_get_internal_import_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to
      "_get_internal_option_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to
      "_get_internal_option_update_view_required")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "_internal_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "_get_import_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to
      "_get_option_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "_pre_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "_post_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "get_option_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to "add_import_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCENEPOSTIMPORTPLUGIN to
      "add_import_option_advanced")
}

private fun registerEngineTypeMethodForEditorScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "_run")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "add_root_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "get_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPT to "get_editor_interface")
}

private fun registerEngineTypeMethodForEditorScriptPicker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPTPICKER to "set_script_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSCRIPTPICKER to "get_script_owner")
}

private fun registerEngineTypeMethodForEditorSelection(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to "get_selected_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSELECTION to
      "get_transformable_selected_nodes")
}

private fun registerEngineTypeMethodForEditorSettings(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "has_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "erase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_initial_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "add_property_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_project_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_project_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_favorites")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_favorites")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_recent_dirs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_recent_dirs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "set_builtin_action_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "check_changed_settings_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "get_changed_settings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSETTINGS to "mark_setting_changed")
}

private fun registerEngineTypeMethodForEditorSpinSlider(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "get_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "is_read_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "set_hide_slider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSPINSLIDER to "is_hiding_slider")
}

private fun registerEngineTypeMethodForEditorSyntaxHighlighter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSYNTAXHIGHLIGHTER to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORSYNTAXHIGHLIGHTER to
      "_get_supported_languages")
}

private fun registerEngineTypeMethodForEditorTranslationParserPlugin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORTRANSLATIONPARSERPLUGIN to "_parse_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORTRANSLATIONPARSERPLUGIN to
      "_get_recognized_extensions")
}

private fun registerEngineTypeMethodForEditorUndoRedoManager(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "create_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "commit_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "is_committing_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_do_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_undo_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_do_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_undo_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_do_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "add_undo_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "get_object_history_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORUNDOREDOMANAGER to "get_history_undo_redo")
}

private fun registerEngineTypeMethodForEditorVCSInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_set_credentials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_modified_files_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_stage_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_unstage_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_discard_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_diff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_shut_down")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_vcs_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_previous_commits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_branch_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_remotes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_create_branch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_remove_branch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_create_remote")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_remove_remote")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_current_branch_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_checkout_branch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_pull")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_push")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_fetch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "_get_line_diff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "create_diff_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "create_diff_hunk")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "create_diff_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "create_commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "create_status_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to
      "add_diff_hunks_into_diff_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to
      "add_line_diffs_into_diff_hunk")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EDITORVCSINTERFACE to "popup_error")
}

private fun registerEngineTypeMethodForEncodedObjectAsID(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENCODEDOBJECTASID to "set_object_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENCODEDOBJECTASID to "get_object_id")
}

private fun registerEngineTypeMethodForEngineProfiler(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEPROFILER to "_toggle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEPROFILER to "_add_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENGINEPROFILER to "_tick")
}

private fun registerEngineTypeMethodForEnvironment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_custom_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sky_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sky_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_bg_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_bg_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_bg_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_bg_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_canvas_max_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ambient_light_sky_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ambient_light_sky_contribution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_reflection_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_reflection_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemapper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemapper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_exposure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_tonemap_white")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_tonemap_white")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssr_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_max_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_max_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_fade_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_fade_in")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_fade_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_fade_out")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssr_depth_tolerance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssr_depth_tolerance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssao_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_power")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_power")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_direct_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_direct_light_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssao_ao_channel_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssao_ao_channel_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssil_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_ssil_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssil_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssil_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssil_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssil_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssil_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssil_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_ssil_normal_rejection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_ssil_normal_rejection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_sdfgi_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_cascades")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_cascades")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_min_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_min_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_cascade0_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_cascade0_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_y_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_y_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_use_occlusion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_sdfgi_using_occlusion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_bounce_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_bounce_feedback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_read_sky_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_sdfgi_reading_sky_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_sdfgi_probe_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_sdfgi_probe_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_glow_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_bloom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_bloom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_bleed_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_bleed_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_bleed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_bleed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_hdr_luminance_cap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_hdr_luminance_cap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_map_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_map_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_glow_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_glow_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_light_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_light_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_sun_scatter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_sun_scatter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_height_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_height_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_aerial_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_aerial_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_fog_sky_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_fog_sky_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_volumetric_fog_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_emission_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_detail_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_detail_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_gi_inject")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_gi_inject")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_ambient_inject")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_ambient_inject")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_volumetric_fog_sky_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_volumetric_fog_sky_affect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to
      "set_volumetric_fog_temporal_reprojection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to
      "is_volumetric_fog_temporal_reprojection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to
      "set_volumetric_fog_temporal_reprojection_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to
      "get_volumetric_fog_temporal_reprojection_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "is_adjustment_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_brightness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_brightness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_contrast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_contrast")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_saturation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_saturation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "set_adjustment_color_correction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ENVIRONMENT to "get_adjustment_color_correction")
}

private fun registerEngineTypeMethodForExpression(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "has_execute_failed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_EXPRESSION to "get_error_text")
}

private fun registerEngineTypeMethodForFastNoiseLite(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_noise_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_noise_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_weighted_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_weighted_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_fractal_ping_pong_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_fractal_ping_pong_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_cellular_distance_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_cellular_distance_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_cellular_jitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_cellular_jitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_cellular_return_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_cellular_return_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "is_domain_warp_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_amplitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_amplitude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_fractal_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_fractal_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_fractal_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_fractal_octaves")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to
      "set_domain_warp_fractal_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to
      "get_domain_warp_fractal_lacunarity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "set_domain_warp_fractal_gain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FASTNOISELITE to "get_domain_warp_fractal_gain")
}

private fun registerEngineTypeMethodForFileAccess(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "open_encrypted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "open_encrypted_with_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "open_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_open_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_file_as_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_file_as_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "flush")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_path_absolute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "is_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "seek_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "eof_reached")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_real")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_csv_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_as_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_md5")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_sha256")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "is_big_endian")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "set_big_endian")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_real")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_csv_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "store_pascal_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_pascal_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "file_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEACCESS to "get_modified_time")
}

private fun registerEngineTypeMethodForFileDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "clear_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "add_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_filters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_dir")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_current_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_mode_overrides_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "is_mode_overriding_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_file_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_file_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_vbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_line_edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_access")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_root_subfolder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "get_root_subfolder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "set_show_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "is_showing_hidden_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "deselect_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILEDIALOG to "invalidate")
}

private fun registerEngineTypeMethodForFileSystemDock(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FILESYSTEMDOCK to "navigate_to_path")
}

private fun registerEngineTypeMethodForFlowContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FLOWCONTAINER to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FLOWCONTAINER to "set_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FLOWCONTAINER to "get_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FLOWCONTAINER to "set_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FLOWCONTAINER to "is_vertical")
}

private fun registerEngineTypeMethodForFogMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_density")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_albedo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_emission")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_height_falloff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_height_falloff")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_edge_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_edge_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "set_density_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGMATERIAL to "get_density_texture")
}

private fun registerEngineTypeMethodForFogVolume(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FOGVOLUME to "get_material")
}

private fun registerEngineTypeMethodForFont(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "set_fallbacks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_fallbacks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "find_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_rids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_font_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_font_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_font_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_font_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_font_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_opentype_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "set_cache_capacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_string_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_multiline_string_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_multiline_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_string_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_multiline_string_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_char_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "draw_char_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "has_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_supported_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "is_language_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "is_script_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_supported_feature_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_supported_variation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONT to "get_face_count")
}

private fun registerEngineTypeMethodForFontFile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "load_bitmap_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "load_dynamic_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_font_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_font_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_font_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_font_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_font_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "is_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "is_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "is_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "clear_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_size_cache_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "clear_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_cache_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_cache_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_cache_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_cache_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_cache_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_cache_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_texture_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "clear_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "clear_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_kerning_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "clear_kerning_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "render_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "render_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_language_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "remove_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_script_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "set_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTFILE to "get_glyph_index")
}

private fun registerEngineTypeMethodForFontVariation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_base_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "get_base_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_variation_opentype")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "get_variation_opentype")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_variation_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "get_variation_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_variation_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "get_variation_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_variation_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "get_variation_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_opentype_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_FONTVARIATION to "set_spacing")
}

private fun registerEngineTypeMethodForFramebufferCacheRD(): Unit {
}

private fun registerEngineTypeMethodForGDExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSION to "open_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSION to "close_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSION to "is_library_open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSION to
      "get_minimum_library_initialization_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDEXTENSION to "initialize_library")
}

private fun registerEngineTypeMethodForGDScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPT to "new")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPT to "get_as_byte_code")
}

private fun registerEngineTypeMethodForGDScriptEditorTranslationParserPlugin(): Unit {
}

private fun registerEngineTypeMethodForGDScriptNativeClass(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GDSCRIPTNATIVECLASS to "new")
}

private fun registerEngineTypeMethodForGLTFAccessor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_normalized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_indices_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_indices_component_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_values_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_values_buffer_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "get_sparse_values_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFACCESSOR to "set_sparse_values_byte_offset")
}

private fun registerEngineTypeMethodForGLTFAnimation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFANIMATION to "get_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFANIMATION to "set_loop")
}

private fun registerEngineTypeMethodForGLTFBufferView(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_byte_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_byte_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "get_indices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFBUFFERVIEW to "set_indices")
}

private fun registerEngineTypeMethodForGLTFCamera(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "from_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "from_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "to_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_perspective")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_fov")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_size_mag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_size_mag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_depth_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_depth_far")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "get_depth_near")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFCAMERA to "set_depth_near")
}

private fun registerEngineTypeMethodForGLTFDocument(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "append_from_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "append_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "append_from_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "generate_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "generate_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "write_to_filesystem")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "register_gltf_document_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENT to "unregister_gltf_document_extension")
}

private fun registerEngineTypeMethodForGLTFDocumentExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_import_preflight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_get_supported_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_parse_node_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_generate_scene_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_import_post_parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_import_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_import_post")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_export_preflight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_convert_scene_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_export_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFDOCUMENTEXTENSION to "_export_post")
}

private fun registerEngineTypeMethodForGLTFDocumentExtensionConvertImporterMesh(): Unit {
}

private fun registerEngineTypeMethodForGLTFLight(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "from_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "from_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "to_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_light_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_light_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_inner_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_inner_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "get_outer_cone_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFLIGHT to "set_outer_cone_angle")
}

private fun registerEngineTypeMethodForGLTFMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_blend_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_blend_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "get_instance_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFMESH to "set_instance_materials")
}

private fun registerEngineTypeMethodForGLTFNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_camera")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_light")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "get_additional_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFNODE to "set_additional_data")
}

private fun registerEngineTypeMethodForGLTFSkeleton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_godot_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_godot_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "set_godot_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_bone_attachment_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKELETON to "get_bone_attachment")
}

private fun registerEngineTypeMethodForGLTFSkin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_skin_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_skin_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joints_original")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joints_original")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_inverse_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_inverse_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_non_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_non_joints")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_roots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joint_i_to_bone_i")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joint_i_to_bone_i")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_joint_i_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_joint_i_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "get_godot_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSKIN to "set_godot_skin")
}

private fun registerEngineTypeMethodForGLTFSpecGloss(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_diffuse_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_diffuse_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_diffuse_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_diffuse_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_gloss_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_gloss_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_specular_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_specular_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "get_spec_gloss_img")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSPECGLOSS to "set_spec_gloss_img")
}

private fun registerEngineTypeMethodForGLTFState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "add_used_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_json")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_json")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_major_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_major_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_minor_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_minor_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_glb_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_glb_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_use_named_skin_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_use_named_skin_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_buffers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_buffers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_buffer_views")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_buffer_views")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_accessors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_accessors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animation_players_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animation_player")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_materials")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_scene_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_scene_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_base_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_root_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_root_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_texture_samplers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_texture_samplers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_cameras")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_cameras")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_lights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_lights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_unique_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_unique_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_unique_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skeletons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skeletons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_skeleton_to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_skeleton_to_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_create_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_create_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_animations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_scene_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "get_additional_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFSTATE to "set_additional_data")
}

private fun registerEngineTypeMethodForGLTFTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "get_src_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "set_src_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "get_sampler")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURE to "set_sampler")
}

private fun registerEngineTypeMethodForGLTFTextureSampler(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "get_mag_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "set_mag_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "get_min_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "set_min_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "get_wrap_s")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "set_wrap_s")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "get_wrap_t")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GLTFTEXTURESAMPLER to "set_wrap_t")
}

private fun registerEngineTypeMethodForGPUParticles2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_visibility_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_collision_base_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_visibility_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_collision_base_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "capture_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_sub_emitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_sub_emitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "emit_particle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_trail_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_trail_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "is_trail_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_trail_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_trail_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_trail_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "set_trail_section_subdivisions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES2D to "get_trail_section_subdivisions")
}

private fun registerEngineTypeMethodForGPUParticles3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_visibility_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_collision_base_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "is_emitting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_pre_process_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_explosiveness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_randomness_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_visibility_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_use_local_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_fixed_fps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_fractional_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_interpolate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_process_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_collision_base_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_draw_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_draw_passes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_draw_pass_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "restart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "capture_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_sub_emitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_sub_emitter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "emit_particle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_trail_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_trail_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "is_trail_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_trail_lifetime")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "set_transform_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLES3D to "get_transform_align")
}

private fun registerEngineTypeMethodForGPUParticlesAttractor3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "set_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "get_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "set_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "get_attenuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "set_directionality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTOR3D to "get_directionality")
}

private fun registerEngineTypeMethodForGPUParticlesAttractorBox3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORBOX3D to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORBOX3D to "get_extents")
}

private fun registerEngineTypeMethodForGPUParticlesAttractorSphere3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORSPHERE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORSPHERE3D to "get_radius")
}

private fun registerEngineTypeMethodForGPUParticlesAttractorVectorField3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORVECTORFIELD3D to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORVECTORFIELD3D to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORVECTORFIELD3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESATTRACTORVECTORFIELD3D to "get_texture")
}

private fun registerEngineTypeMethodForGPUParticlesCollision3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISION3D to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISION3D to "get_cull_mask")
}

private fun registerEngineTypeMethodForGPUParticlesCollisionBox3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONBOX3D to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONBOX3D to "get_extents")
}

private fun registerEngineTypeMethodForGPUParticlesCollisionHeightField3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "set_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "get_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "set_follow_camera_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONHEIGHTFIELD3D to
      "is_follow_camera_enabled")
}

private fun registerEngineTypeMethodForGPUParticlesCollisionSDF3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_resolution")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_bake_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_bake_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "set_bake_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSDF3D to "get_bake_mask_value")
}

private fun registerEngineTypeMethodForGPUParticlesCollisionSphere3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSPHERE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GPUPARTICLESCOLLISIONSPHERE3D to "get_radius")
}

private fun registerEngineTypeMethodForGeneric6DOFJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_param_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_param_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_param_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_flag_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_flag_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "set_flag_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GENERIC6DOFJOINT3D to "get_flag_z")
}

private fun registerEngineTypeMethodForGeometryInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_material_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_material_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_cast_shadows_setting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_lod_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_lod_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_transparency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_transparency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "set_visibility_range_end_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "get_visibility_range_end_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_visibility_range_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_visibility_range_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "set_visibility_range_begin_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "get_visibility_range_begin_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_visibility_range_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_visibility_range_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "set_visibility_range_fade_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "get_visibility_range_fade_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "set_instance_shader_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "get_instance_shader_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_extra_cull_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_extra_cull_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_lightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_lightmap_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_gi_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_gi_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_ignore_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to
      "is_ignoring_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GEOMETRYINSTANCE3D to "get_custom_aabb")
}

private fun registerEngineTypeMethodForGradient(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "reverse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "sample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "set_interpolation_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENT to "get_interpolation_mode")
}

private fun registerEngineTypeMethodForGradientTexture1D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE1D to "set_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE1D to "get_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE1D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE1D to "set_use_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE1D to "is_using_hdr")
}

private fun registerEngineTypeMethodForGradientTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "get_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_use_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "is_using_hdr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_fill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "get_fill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_fill_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "get_fill_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_fill_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "get_fill_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "set_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRADIENTTEXTURE2D to "get_repeat")
}

private fun registerEngineTypeMethodForGraphEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_is_in_input_hotzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_is_in_output_hotzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_get_connection_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "_is_node_hover_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "connect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_node_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "disconnect_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_connection_activity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_connection_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "clear_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "force_connection_drag_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_scroll_ofs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_scroll_ofs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_right_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_right_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_left_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_left_disconnect_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "add_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "remove_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_valid_connection_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_connection_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_panning_scheme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_panning_scheme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_zoom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_show_zoom_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_showing_zoom_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_use_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_using_snap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_connection_lines_curvature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_connection_lines_curvature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_connection_lines_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_connection_lines_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_connection_lines_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_connection_lines_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_minimap_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_minimap_opacity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_minimap_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_minimap_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_arrange_nodes_button_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_arrange_nodes_button_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_right_disconnects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "is_right_disconnects_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "get_zoom_hbox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "arrange_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHEDIT to "set_selected")
}

private fun registerEngineTypeMethodForGraphNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "clear_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "clear_all_slots")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_enabled_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_slot_enabled_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_type_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_type_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_color_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_color_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_enabled_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_slot_enabled_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_type_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_type_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_color_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_slot_color_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_slot_draw_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_slot_draw_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_position_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_position_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_comment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_comment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_resizable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_draggable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_draggable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_input_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_connection_output_slot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_show_close_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "is_close_button_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "set_overlay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRAPHNODE to "get_overlay")
}

private fun registerEngineTypeMethodForGridContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDCONTAINER to "set_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDCONTAINER to "get_columns")
}

private fun registerEngineTypeMethodForGridMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_collision_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_physics_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_physics_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_bake_navigation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "is_baking_navigation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_mesh_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_mesh_library")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_octant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_octant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_cell_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_item_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_cell_item_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_basis_with_orthogonal_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_orthogonal_index_from_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "local_to_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "map_to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "set_center_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_center_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_used_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_used_cells_by_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_bake_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "get_bake_mesh_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "clear_baked_meshes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GRIDMAP to "make_baked_meshes")
}

private fun registerEngineTypeMethodForGrooveJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "set_initial_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_GROOVEJOINT2D to "get_initial_offset")
}

private fun registerEngineTypeMethodForHBoxContainer(): Unit {
}

private fun registerEngineTypeMethodForHFlowContainer(): Unit {
}

private fun registerEngineTypeMethodForHMACContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HMACCONTEXT to "finish")
}

private fun registerEngineTypeMethodForHScrollBar(): Unit {
}

private fun registerEngineTypeMethodForHSeparator(): Unit {
}

private fun registerEngineTypeMethodForHSlider(): Unit {
}

private fun registerEngineTypeMethodForHSplitContainer(): Unit {
}

private fun registerEngineTypeMethodForHTTPClient(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "request_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "has_response")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "is_response_chunked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_headers_as_dictionary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_response_body_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "read_response_body_chunk")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_read_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_read_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_blocking_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "is_blocking_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_http_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "set_https_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPCLIENT to "query_string_from_dict")
}

private fun registerEngineTypeMethodForHTTPRequest(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "request_raw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "cancel_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_http_client_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_use_threads")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "is_using_threads")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_accept_gzip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "is_accepting_gzip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_body_size_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_body_size_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_max_redirects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_max_redirects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_download_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_download_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_downloaded_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_body_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_download_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "get_download_chunk_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_http_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HTTPREQUEST to "set_https_proxy")
}

private fun registerEngineTypeMethodForHashingContext(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HASHINGCONTEXT to "finish")
}

private fun registerEngineTypeMethodForHeightMapShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "set_map_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "get_map_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "set_map_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "get_map_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "set_map_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HEIGHTMAPSHAPE3D to "get_map_data")
}

private fun registerEngineTypeMethodForHingeJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT3D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT3D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT3D to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_HINGEJOINT3D to "get_flag")
}

private fun registerEngineTypeMethodForImage(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "convert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_mipmap_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "resize_to_po2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "resize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "shrink_x2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "crop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "flip_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "flip_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "clear_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "create_from_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_from_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_png")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_png_to_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_jpg")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_jpg_to_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_exr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_exr_to_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_webp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "save_webp_to_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "detect_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_invisible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "detect_used_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "compress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "compress_from_channels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "decompress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "is_compressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "rotate_90")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "rotate_180")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "fix_alpha_edges")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "premultiply_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "srgb_to_linear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "normal_map_to_xy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "rgbe_to_srgb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "bump_map_to_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "compute_image_metrics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blit_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blit_rect_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blend_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "blend_rect_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "fill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "fill_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_used_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "copy_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_pixelv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "get_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "set_pixelv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "set_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "adjust_bcs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_png_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_jpg_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_webp_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_tga_from_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGE to "load_bmp_from_buffer")
}

private fun registerEngineTypeMethodForImageFormatLoader(): Unit {
}

private fun registerEngineTypeMethodForImageFormatLoaderExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGEFORMATLOADEREXTENSION to
      "_get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGEFORMATLOADEREXTENSION to "_load_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGEFORMATLOADEREXTENSION to "add_format_loader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGEFORMATLOADEREXTENSION to "remove_format_loader")
}

private fun registerEngineTypeMethodForImageTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "create_from_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE to "set_size_override")
}

private fun registerEngineTypeMethodForImageTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE3D to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURE3D to "update")
}

private fun registerEngineTypeMethodForImageTextureLayered(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURELAYERED to "create_from_images")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMAGETEXTURELAYERED to "update_layer")
}

private fun registerEngineTypeMethodForImmediateMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_set_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_set_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_set_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_set_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_add_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_add_vertex_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "surface_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMMEDIATEMESH to "clear_surfaces")
}

private fun registerEngineTypeMethodForImporterMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "add_blend_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "set_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_blend_shape_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "add_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_lod_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_lod_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_lod_indices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_surface_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "set_surface_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "set_surface_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "generate_lods")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "set_lightmap_size_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESH to "get_lightmap_size_hint")
}

private fun registerEngineTypeMethodForImporterMeshInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "set_skeleton_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_IMPORTERMESHINSTANCE3D to "get_skeleton_path")
}

private fun registerEngineTypeMethodForInputEvent(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_released")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "get_action_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_echo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "as_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_match")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "is_action_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "accumulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENT to "xformed_by")
}

private fun registerEngineTypeMethodForInputEventAction(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "get_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "set_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTACTION to "get_strength")
}

private fun registerEngineTypeMethodForInputEventFromWindow(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTFROMWINDOW to "set_window_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTFROMWINDOW to "get_window_id")
}

private fun registerEngineTypeMethodForInputEventGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTGESTURE to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTGESTURE to "get_position")
}

private fun registerEngineTypeMethodForInputEventJoypadButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "get_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADBUTTON to "set_pressed")
}

private fun registerEngineTypeMethodForInputEventJoypadMotion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "set_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "set_axis_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTJOYPADMOTION to "get_axis_value")
}

private fun registerEngineTypeMethodForInputEventKey(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_keycode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_keycode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_physical_keycode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_physical_keycode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_unicode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_unicode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "set_echo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to "get_keycode_with_modifiers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTKEY to
      "get_physical_keycode_with_modifiers")
}

private fun registerEngineTypeMethodForInputEventMIDI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_pitch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_instrument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_instrument")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_controller_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_controller_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "set_controller_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMIDI to "get_controller_value")
}

private fun registerEngineTypeMethodForInputEventMagnifyGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMAGNIFYGESTURE to "set_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMAGNIFYGESTURE to "get_factor")
}

private fun registerEngineTypeMethodForInputEventMouse(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_button_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSE to "get_global_position")
}

private fun registerEngineTypeMethodForInputEventMouseButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "get_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "get_button_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "set_double_click")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEBUTTON to "is_double_click")
}

private fun registerEngineTypeMethodForInputEventMouseMotion(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_pen_inverted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_pen_inverted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTMOUSEMOTION to "get_velocity")
}

private fun registerEngineTypeMethodForInputEventPanGesture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTPANGESTURE to "set_delta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTPANGESTURE to "get_delta")
}

private fun registerEngineTypeMethodForInputEventScreenDrag(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_tilt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_pressure")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_pen_inverted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_pen_inverted")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENDRAG to "get_velocity")
}

private fun registerEngineTypeMethodForInputEventScreenTouch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "set_double_tap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSCREENTOUCH to "is_double_tap")
}

private fun registerEngineTypeMethodForInputEventShortcut(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSHORTCUT to "set_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTSHORTCUT to "get_shortcut")
}

private fun registerEngineTypeMethodForInputEventWithModifiers(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to
      "set_command_or_control_autoremap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to
      "is_command_or_control_autoremap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to
      "is_command_or_control_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_alt_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "is_alt_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_shift_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "is_shift_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_ctrl_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "is_ctrl_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "set_meta_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INPUTEVENTWITHMODIFIERS to "is_meta_pressed")
}

private fun registerEngineTypeMethodForInstancePlaceholder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "get_stored_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "create_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_INSTANCEPLACEHOLDER to "get_instance_path")
}

private fun registerEngineTypeMethodForIntervalTweener(): Unit {
}

private fun registerEngineTypeMethodForItemList(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_transposed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_icon_transposed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_custom_fg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_custom_fg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_item_tooltip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "deselect_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_selected_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "move_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "sort_items_by_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_fixed_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_fixed_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_same_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_same_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_max_text_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_max_text_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_max_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_max_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_icon_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_icon_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_fixed_icon_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_fixed_icon_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_icon_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_icon_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_auto_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "has_auto_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "is_anything_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_item_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "ensure_current_is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_v_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "set_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ITEMLIST to "get_text_overrun_behavior")
}

private fun registerEngineTypeMethodForJNISingleton(): Unit {
}

private fun registerEngineTypeMethodForJSON(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "stringify")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "parse_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "parse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "get_error_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSON to "get_error_message")
}

private fun registerEngineTypeMethodForJSONRPC(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "set_scope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "process_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "process_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_request")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_response")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JSONRPC to "make_response_error")
}

private fun registerEngineTypeMethodForJavaClass(): Unit {
}

private fun registerEngineTypeMethodForJavaScriptObject(): Unit {
}

private fun registerEngineTypeMethodForJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "set_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT2D to "get_exclude_nodes_from_collision")
}

private fun registerEngineTypeMethodForJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "set_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "get_node_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "set_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "get_node_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "set_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "get_solver_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "set_exclude_nodes_from_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_JOINT3D to "get_exclude_nodes_from_collision")
}

private fun registerEngineTypeMethodForKinematicCollision2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION2D to "get_collider_velocity")
}

private fun registerEngineTypeMethodForKinematicCollision3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider_shape_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_KINEMATICCOLLISION3D to "get_collider_velocity")
}

private fun registerEngineTypeMethodForKotlinScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_KOTLINSCRIPT to "new")
}

private fun registerEngineTypeMethodForLabel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_label_settings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_label_settings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_clip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "is_clipping_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "is_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_line_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_total_character_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_characters_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_visible_characters_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_visible_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_visible_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_lines_skipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_lines_skipped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL to "get_structured_text_bidi_override_options")
}

private fun registerEngineTypeMethodForLabel3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_outline_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_outline_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "is_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_outline_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_outline_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_alpha_scissor_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABEL3D to "generate_triangle_mesh")
}

private fun registerEngineTypeMethodForLabelSettings(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_font_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_outline_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_outline_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_shadow_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_shadow_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "set_shadow_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LABELSETTINGS to "get_shadow_offset")
}

private fun registerEngineTypeMethodForLight2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_z_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_z_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_z_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_z_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_layer_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_layer_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_layer_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_layer_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_item_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_item_shadow_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "is_shadow_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_smooth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_blend_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT2D to "get_height")
}

private fun registerEngineTypeMethodForLight3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "is_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "has_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "is_negative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_enable_distance_fade")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "is_distance_fade_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_distance_fade_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_distance_fade_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_distance_fade_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_distance_fade_shadow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_distance_fade_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_distance_fade_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_shadow_reverse_cull_face")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_shadow_reverse_cull_face")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_bake_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_projector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_projector")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "set_temperature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_temperature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHT3D to "get_correlated_color")
}

private fun registerEngineTypeMethodForLightOccluder2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "set_occluder_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "get_occluder_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "set_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "get_occluder_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "set_as_sdf_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTOCCLUDER2D to "is_set_as_sdf_collision")
}

private fun registerEngineTypeMethodForLightmapGI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_light_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_light_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_bake_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_bake_quality")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_generate_probes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_generate_probes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_environment_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_environment_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_environment_custom_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_environment_custom_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_environment_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_environment_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_environment_custom_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_environment_custom_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_max_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_max_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_use_denoiser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "is_using_denoiser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_directional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "is_directional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGI to "get_camera_attributes")
}

private fun registerEngineTypeMethodForLightmapGIData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "set_light_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "get_light_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "set_uses_spherical_harmonics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "is_using_spherical_harmonics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "add_user")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "get_user_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "get_user_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LIGHTMAPGIDATA to "clear_users")
}

private fun registerEngineTypeMethodForLightmapProbe(): Unit {
}

private fun registerEngineTypeMethodForLightmapper(): Unit {
}

private fun registerEngineTypeMethodForLightmapperRD(): Unit {
}

private fun registerEngineTypeMethodForLine2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_point_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "add_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "remove_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "clear_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_default_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_default_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_gradient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_texture_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_texture_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_joint_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_joint_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_begin_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_begin_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_end_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_end_cap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_sharp_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_sharp_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_round_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_round_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "set_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINE2D to "get_antialiased")
}

private fun registerEngineTypeMethodForLineEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "select_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "has_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_selection_from_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_selection_to_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_draw_control_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_draw_control_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_caret_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_caret_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_expand_to_text_length_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_expand_to_text_length_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_caret_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_caret_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_caret_mid_grapheme_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_caret_mid_grapheme_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_caret_force_displayed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_caret_force_displayed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_caret_blink_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_caret_blink_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "insert_text_at_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "delete_char_at_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "delete_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_secret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_secret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_secret_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_secret_character")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "menu_option")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_menu_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_virtual_keyboard_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_virtual_keyboard_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_clear_button_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_clear_button_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_middle_mouse_paste_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_middle_mouse_paste_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_right_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "get_right_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "set_select_all_on_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINEEDIT to "is_select_all_on_focus")
}

private fun registerEngineTypeMethodForLinkButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_uri")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_uri")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_underline_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_underline_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_LINKBUTTON to
      "get_structured_text_bidi_override_options")
}

private fun registerEngineTypeMethodForMainLoop(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_physics_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MAINLOOP to "_finalize")
}

private fun registerEngineTypeMethodForMarginContainer(): Unit {
}

private fun registerEngineTypeMethodForMarker2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARKER2D to "set_gizmo_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARKER2D to "get_gizmo_extents")
}

private fun registerEngineTypeMethodForMarker3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARKER3D to "set_gizmo_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MARKER3D to "get_gizmo_extents")
}

private fun registerEngineTypeMethodForMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "_get_shader_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "_get_shader_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "_can_do_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "_can_use_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "set_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "get_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "set_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "get_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MATERIAL to "inspect_native_shader_code")
}

private fun registerEngineTypeMethodForMenuBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_switch_on_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_switch_on_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_disable_shortcuts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_prefer_global_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_prefer_global_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_native_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_menu_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_flat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_start_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_start_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_menu_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_menu_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_menu_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_menu_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_menu_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_menu_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "set_menu_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "is_menu_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBAR to "get_menu_popup")
}

private fun registerEngineTypeMethodForMenuButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "show_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "set_switch_on_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "is_switch_on_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "set_disable_shortcuts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "set_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MENUBUTTON to "get_item_count")
}

private fun registerEngineTypeMethodForMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_array_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_array_index_len")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_lods")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_surface_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_get_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_set_blend_shape_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "_get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "set_lightmap_size_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_lightmap_size_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_surface_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_blend_shape_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "surface_get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_trimesh_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_convex_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "create_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "get_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESH to "generate_triangle_mesh")
}

private fun registerEngineTypeMethodForMeshDataTool(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "create_from_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "commit_to_surface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_vertex_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_edges")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_vertex_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_edge_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_edge_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_edge")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_face_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_face_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHDATATOOL to "get_material")
}

private fun registerEngineTypeMethodForMeshInstance2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE2D to "get_texture")
}

private fun registerEngineTypeMethodForMeshInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "set_skeleton_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_skeleton_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "set_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to
      "get_surface_override_material_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "set_surface_override_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_surface_override_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_active_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "create_trimesh_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "create_convex_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to
      "create_multiple_convex_collisions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_blend_shape_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "find_blend_shape_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "get_blend_shape_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "set_blend_shape_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHINSTANCE3D to "create_debug_tangents")
}

private fun registerEngineTypeMethodForMeshLibrary(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "create_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_navigation_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "set_item_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_navigation_mesh_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_shapes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "find_item_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_item_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHLIBRARY to "get_last_unused_item_id")
}

private fun registerEngineTypeMethodForMeshTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_image_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_image_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "set_base_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MESHTEXTURE to "get_base_texture")
}

private fun registerEngineTypeMethodForMethodTweener(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_METHODTWEENER to "set_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_METHODTWEENER to "set_trans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_METHODTWEENER to "set_ease")
}

private fun registerEngineTypeMethodForMissingNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGNODE to "set_original_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGNODE to "get_original_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGNODE to "set_recording_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGNODE to "is_recording_properties")
}

private fun registerEngineTypeMethodForMissingResource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGRESOURCE to "set_original_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGRESOURCE to "get_original_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGRESOURCE to "set_recording_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MISSINGRESOURCE to "is_recording_properties")
}

private fun registerEngineTypeMethodForMobileVRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_eye_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_eye_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_iod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_iod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_display_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_display_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_display_to_lens")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_display_to_lens")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_oversample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_oversample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_k1")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_k1")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "set_k2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOBILEVRINTERFACE to "get_k2")
}

private fun registerEngineTypeMethodForMovieWriter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_get_audio_mix_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_get_audio_speaker_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_handles_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_write_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_write_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "_write_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MOVIEWRITER to "add_writer")
}

private fun registerEngineTypeMethodForMovieWriterMJPEG(): Unit {
}

private fun registerEngineTypeMethodForMovieWriterPNGWAV(): Unit {
}

private fun registerEngineTypeMethodForMultiMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_use_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "is_using_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_use_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "is_using_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_transform_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_transform_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_visible_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_visible_instance_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_transform_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_instance_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_instance_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "get_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESH to "set_buffer")
}

private fun registerEngineTypeMethodForMultiMeshInstance2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "set_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "get_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE2D to "get_texture")
}

private fun registerEngineTypeMethodForMultiMeshInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE3D to "set_multimesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIMESHINSTANCE3D to "get_multimesh")
}

private fun registerEngineTypeMethodForMultiplayerAPI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "has_multiplayer_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_multiplayer_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "set_multiplayer_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "is_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_remote_sender_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "rpc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "object_configuration_add")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "object_configuration_remove")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_peers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "set_default_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "get_default_interface")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPI to "create_default_interface")
}

private fun registerEngineTypeMethodForMultiplayerAPIExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_set_multiplayer_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_get_multiplayer_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_get_peer_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_rpc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to "_get_remote_sender_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to
      "_object_configuration_add")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERAPIEXTENSION to
      "_object_configuration_remove")
}

private fun registerEngineTypeMethodForMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "set_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "set_transfer_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_transfer_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "set_target_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_packet_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_packet_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_packet_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "disconnect_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_connection_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "generate_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "set_refuse_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "is_refusing_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEER to "is_server_relay_supported")
}

private fun registerEngineTypeMethodForMultiplayerPeerExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_put_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to
      "_get_available_packet_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_max_packet_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_packet_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_put_packet_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_set_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_transfer_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_set_transfer_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_transfer_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_set_target_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_packet_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_is_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_disconnect_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_unique_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to
      "_set_refuse_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to
      "_is_refusing_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERPEEREXTENSION to "_get_connection_status")
}

private fun registerEngineTypeMethodForMultiplayerSpawner(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "add_spawnable_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "get_spawnable_scene_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "get_spawnable_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "clear_spawnable_scenes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "spawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "get_spawn_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "set_spawn_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "get_spawn_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "set_spawn_limit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "get_spawn_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSPAWNER to "set_spawn_function")
}

private fun registerEngineTypeMethodForMultiplayerSynchronizer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "set_root_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "get_root_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to
      "set_replication_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to
      "get_replication_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "set_replication_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "get_replication_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to
      "set_visibility_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to
      "get_visibility_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "update_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "set_visibility_public")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "is_visibility_public")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "add_visibility_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to
      "remove_visibility_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "set_visibility_for")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MULTIPLAYERSYNCHRONIZER to "get_visibility_for")
}

private fun registerEngineTypeMethodForMutex(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_MUTEX to "lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MUTEX to "try_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_MUTEX to "unlock")
}

private fun registerEngineTypeMethodForNavigationAgent2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_avoidance_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_avoidance_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_path_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_path_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_target_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_target_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_path_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_path_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_path_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_path_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_target_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_target_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_next_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "distance_to_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_current_navigation_result")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_current_navigation_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to
      "get_current_navigation_path_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "is_target_reached")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "is_target_reachable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "is_navigation_finished")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT2D to "get_final_location")
}

private fun registerEngineTypeMethodForNavigationAgent3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_avoidance_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_avoidance_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_path_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_path_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_target_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_target_desired_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_agent_height_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_agent_height_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_ignore_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_ignore_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_neighbor_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_max_neighbors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_time_horizon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_max_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_path_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_path_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_path_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_path_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_target_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_target_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_next_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "distance_to_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "set_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_current_navigation_result")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_current_navigation_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to
      "get_current_navigation_path_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "is_target_reached")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "is_target_reachable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "is_navigation_finished")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONAGENT3D to "get_final_location")
}

private fun registerEngineTypeMethodForNavigationLink2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "is_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK2D to "get_travel_cost")
}

private fun registerEngineTypeMethodForNavigationLink3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "is_bidirectional")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_start_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_end_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONLINK3D to "get_travel_cost")
}

private fun registerEngineTypeMethodForNavigationMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_sample_partition_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_sample_partition_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_parsed_geometry_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_parsed_geometry_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_source_geometry_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_source_geometry_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_source_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_source_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_cell_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_cell_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_max_climb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_max_climb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_agent_max_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_agent_max_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_region_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_region_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_region_merge_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_region_merge_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_edge_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_edge_max_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_edge_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_edge_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_vertices_per_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_vertices_per_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_detail_sample_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_detail_sample_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_detail_sample_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_detail_sample_max_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_low_hanging_obstacles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_low_hanging_obstacles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_ledge_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_ledge_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to
      "set_filter_walkable_low_height_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to
      "get_filter_walkable_low_height_spans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_baking_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_baking_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_filter_baking_aabb_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_filter_baking_aabb_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "set_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_polygon_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "clear_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONMESH to "create_from_mesh")
}

private fun registerEngineTypeMethodForNavigationObstacle2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "set_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "set_estimate_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "is_radius_estimated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE2D to "get_radius")
}

private fun registerEngineTypeMethodForNavigationObstacle3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "set_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "set_estimate_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "is_radius_estimated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONOBSTACLE3D to "get_radius")
}

private fun registerEngineTypeMethodForNavigationPathQueryParameters2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_pathfinding_algorithm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_pathfinding_algorithm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_path_postprocessing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_path_postprocessing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to "set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to "get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_start_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_start_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "set_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS2D to
      "get_metadata_flags")
}

private fun registerEngineTypeMethodForNavigationPathQueryParameters3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_pathfinding_algorithm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_pathfinding_algorithm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_path_postprocessing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_path_postprocessing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to "set_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to "get_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_start_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_start_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "set_metadata_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYPARAMETERS3D to
      "get_metadata_flags")
}

private fun registerEngineTypeMethodForNavigationPathQueryResult2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "set_path_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "get_path_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "set_path_rids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "get_path_rids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "set_path_owner_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "get_path_owner_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT2D to "reset")
}

private fun registerEngineTypeMethodForNavigationPathQueryResult3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "set_path_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "get_path_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "set_path_rids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "get_path_rids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "set_path_owner_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "get_path_owner_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPATHQUERYRESULT3D to "reset")
}

private fun registerEngineTypeMethodForNavigationPolygon(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "set_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_polygon_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "clear_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "add_outline_at_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_outline_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "set_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "get_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "remove_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "clear_outlines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONPOLYGON to "make_polygons_from_outlines")
}

private fun registerEngineTypeMethodForNavigationRegion2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_region_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION2D to "get_travel_cost")
}

private fun registerEngineTypeMethodForNavigationRegion3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_navigation_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_navigation_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_navigation_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_region_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_enter_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "set_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "get_travel_cost")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NAVIGATIONREGION3D to "bake_navigation_mesh")
}

private fun registerEngineTypeMethodForNinePatchRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_patch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "set_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NINEPATCHRECT to "get_v_axis_stretch_mode")
}

private fun registerEngineTypeMethodForNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_physics_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_enter_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_exit_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_get_configuration_warnings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_shortcut_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_orphan_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_sibling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "remove_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "reparent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_child_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "has_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node_or_null")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "find_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "find_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "find_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "has_node_and_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_node_and_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_inside_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_ancestor_of")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_greater_than")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_path_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "add_to_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "remove_from_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "move_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_groups")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "print_tree_pretty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_scene_file_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_scene_file_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "propagate_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "propagate_call")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_physics_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_physics_process_delta_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_physics_processing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_process_delta_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_process_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_shortcut_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_shortcut_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_unhandled_key_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "can_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_display_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_displayed_folded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_process_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_processing_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_physics_process_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_physics_processing_internal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_window")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "create_tween")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "duplicate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "replace_by")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_scene_instance_load_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_scene_instance_load_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_editable_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_editable_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "queue_free")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "request_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_multiplayer_authority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_multiplayer_authority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_multiplayer_authority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_editor_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "get_editor_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "set_unique_name_in_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "is_unique_name_in_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "rpc_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE to "update_configuration_warnings")
}

private fun registerEngineTypeMethodForNode2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "move_local_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "move_local_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "global_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "apply_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "set_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "look_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_angle_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "to_global")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE2D to "get_relative_transform_to_parent")
}

private fun registerEngineTypeMethodForNode3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_rotation_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_rotation_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_rotation_edit_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_rotation_edit_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_quaternion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_quaternion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_global_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_global_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_global_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_global_rotation_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_parent_node_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_ignore_transform_notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_as_top_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_set_as_top_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_disable_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_scale_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "force_update_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_visibility_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_visibility_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "update_gizmos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "add_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "get_gizmos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "clear_gizmos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_subgizmo_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "clear_subgizmo_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_visible_in_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_notify_local_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_local_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_notify_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "is_transform_notification_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "global_rotate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "global_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "global_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "rotate_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "scale_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "translate_object_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "rotate_x")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "rotate_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "rotate_z")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "orthonormalize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "set_identity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "look_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "look_at_from_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NODE3D to "to_global")
}

private fun registerEngineTypeMethodForNode3DGizmo(): Unit {
}

private fun registerEngineTypeMethodForNoise(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_noise_1d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_noise_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_noise_2dv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_noise_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_noise_3dv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISE to "get_seamless_image")
}

private fun registerEngineTypeMethodForNoiseTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_in_3d_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "is_in_3d_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "is_generating_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_seamless")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_seamless")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_seamless_blend_skirt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_seamless_blend_skirt")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_as_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "is_normal_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_bump_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_bump_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "set_noise")
  TypeManager.engineTypeMethod.add(ENGINECLASS_NOISETEXTURE2D to "get_noise")
}

private fun registerEngineTypeMethodForORMMaterial3D(): Unit {
}

private fun registerEngineTypeMethodForObject(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_class")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_indexed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_indexed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "property_can_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "property_get_revert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "notification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "to_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "remove_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_meta_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "add_user_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_user_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "emit_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "call")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "call_deferred")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_deferred")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "callv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "has_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_signal_connection_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "get_incoming_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "connect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "disconnect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_block_signals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_blocking_signals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "notify_property_list_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "set_message_translation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "can_translate_messages")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "tr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "tr_n")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OBJECT to "is_queued_for_deletion")
}

private fun registerEngineTypeMethodForOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDER3D to "get_vertices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDER3D to "get_indices")
}

private fun registerEngineTypeMethodForOccluderInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "set_bake_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "get_bake_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "set_bake_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "get_bake_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to
      "set_bake_simplification_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to
      "get_bake_simplification_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "set_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERINSTANCE3D to "get_occluder")
}

private fun registerEngineTypeMethodForOccluderPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "is_closed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "get_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OCCLUDERPOLYGON2D to "get_polygon")
}

private fun registerEngineTypeMethodForOfflineMultiplayerPeer(): Unit {
}

private fun registerEngineTypeMethodForOggPacketSequence(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "set_packet_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "get_packet_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "set_packet_granule_positions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "get_packet_granule_positions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "set_sampling_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "get_sampling_rate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OGGPACKETSEQUENCE to "get_length")
}

private fun registerEngineTypeMethodForOggPacketSequencePlayback(): Unit {
}

private fun registerEngineTypeMethodForOmniLight3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT3D to "set_shadow_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OMNILIGHT3D to "get_shadow_mode")
}

private fun registerEngineTypeMethodForOptimizedTranslation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIMIZEDTRANSLATION to "generate")
}

private fun registerEngineTypeMethodForOptionButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "is_item_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selected_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "show_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "has_selectable_items")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "get_selectable_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "set_fit_to_longest_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_OPTIONBUTTON to "is_fit_to_longest_item")
}

private fun registerEngineTypeMethodForPCKPacker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "pck_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "add_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PCKPACKER to "flush")
}

private fun registerEngineTypeMethodForPackedDataContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "pack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINER to "size")
}

private fun registerEngineTypeMethodForPackedDataContainerRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDDATACONTAINERREF to "size")
}

private fun registerEngineTypeMethodForPackedScene(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "pack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "can_instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKEDSCENE to "get_state")
}

private fun registerEngineTypeMethodForPacketPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "put_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "put_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_packet_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_available_packet_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "get_encode_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEER to "set_encode_buffer_max_size")
}

private fun registerEngineTypeMethodForPacketPeerDTLS(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "connect_to_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERDTLS to "disconnect_from_peer")
}

private fun registerEngineTypeMethodForPacketPeerExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEEREXTENSION to "_get_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEEREXTENSION to "_put_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEEREXTENSION to "_get_available_packet_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEEREXTENSION to "_get_max_packet_size")
}

private fun registerEngineTypeMethodForPacketPeerStream(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_stream_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_stream_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_input_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "set_output_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_input_buffer_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERSTREAM to "get_output_buffer_max_size")
}

private fun registerEngineTypeMethodForPacketPeerUDP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "wait")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "is_bound")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "is_socket_connected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "get_packet_ip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "get_packet_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "get_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "set_dest_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "set_broadcast_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "join_multicast_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PACKETPEERUDP to "leave_multicast_group")
}

private fun registerEngineTypeMethodForPanel(): Unit {
}

private fun registerEngineTypeMethodForPanelContainer(): Unit {
}

private fun registerEngineTypeMethodForPanoramaSkyMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKYMATERIAL to "set_panorama")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKYMATERIAL to "get_panorama")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKYMATERIAL to "set_filtering_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PANORAMASKYMATERIAL to "is_filtering_enabled")
}

private fun registerEngineTypeMethodForParallaxBackground(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_base_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_base_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_scroll_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_scroll_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_limit_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_limit_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_limit_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "get_limit_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "set_ignore_camera_zoom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXBACKGROUND to "is_ignore_camera_zoom")
}

private fun registerEngineTypeMethodForParallaxLayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_motion_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_motion_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "set_mirroring")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARALLAXLAYER to "get_mirroring")
}

private fun registerEngineTypeMethodForParticleProcessMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_spread")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_flatness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_param_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_param_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_param_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_color_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_color_initial_ramp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_particle_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_emission_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_sphere_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_box_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_point_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_point_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_normal_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_point_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_emission_ring_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_ring_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_ring_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_emission_ring_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_turbulence_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_turbulence_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_turbulence_noise_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_turbulence_noise_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_turbulence_noise_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_turbulence_noise_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_turbulence_noise_speed_random")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_turbulence_noise_speed_random")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_turbulence_noise_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_turbulence_noise_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_lifetime_randomness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_sub_emitter_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_sub_emitter_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_sub_emitter_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_sub_emitter_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_sub_emitter_amount_at_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_sub_emitter_amount_at_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_sub_emitter_amount_at_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_sub_emitter_amount_at_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "get_sub_emitter_keep_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_sub_emitter_keep_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "set_attractor_interaction_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "is_attractor_interaction_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_collision_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_collision_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_collision_use_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to
      "is_collision_using_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_collision_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_collision_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "set_collision_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PARTICLEPROCESSMATERIAL to "get_collision_bounce")
}

private fun registerEngineTypeMethodForPath2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH2D to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH2D to "get_curve")
}

private fun registerEngineTypeMethodForPath3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH3D to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATH3D to "get_curve")
}

private fun registerEngineTypeMethodForPathFollow2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_progress_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_progress_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_rotates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "is_rotating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "set_lookahead")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW2D to "get_lookahead")
}

private fun registerEngineTypeMethodForPathFollow3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_h_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_v_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_progress_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_progress_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_rotation_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_rotation_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "get_cubic_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "has_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "set_tilt_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "is_tilt_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PATHFOLLOW3D to "correct_posture")
}

private fun registerEngineTypeMethodForPhysicalBone2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_auto_configure_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "set_auto_configure_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "set_simulate_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_simulate_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "is_simulating_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "set_bone2d_nodepath")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_bone2d_nodepath")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "set_bone2d_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_bone2d_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "set_follow_bone_when_simulating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE2D to "get_follow_bone_when_simulating")
}

private fun registerEngineTypeMethodForPhysicalBone3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_joint_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_joint_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_joint_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_joint_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_joint_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_joint_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_body_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_body_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_simulate_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "is_simulating_physics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_bone_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_use_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "is_using_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "set_can_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALBONE3D to "is_able_to_sleep")
}

private fun registerEngineTypeMethodForPhysicalSkyMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_rayleigh_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_rayleigh_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_rayleigh_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_rayleigh_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_mie_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_mie_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_mie_eccentricity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_mie_eccentricity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_mie_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_mie_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_turbidity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_turbidity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_sun_disk_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_sun_disk_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_ground_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_ground_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "set_night_sky")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICALSKYMATERIAL to "get_night_sky")
}

private fun registerEngineTypeMethodForPhysicsBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "move_and_collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "test_move")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY2D to "remove_collision_exception_with")
}

private fun registerEngineTypeMethodForPhysicsBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "move_and_collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "test_move")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "set_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "get_axis_lock")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSBODY3D to "remove_collision_exception_with")
}

private fun registerEngineTypeMethodForPhysicsDirectBodyState2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_center_of_mass_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to
      "get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_contact_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2D to "get_space_state")
}

private fun registerEngineTypeMethodForPhysicsDirectBodyState2DExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_center_of_mass_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to "_apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to "_apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to "_is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_contact_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to "_get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE2DEXTENSION to
      "_get_space_state")
}

private fun registerEngineTypeMethodForPhysicsDirectBodyState3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_center_of_mass_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_principal_inertia_axes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_inverse_inertia_tensor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_contact_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to
      "get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3D to "get_space_state")
}

private fun registerEngineTypeMethodForPhysicsDirectBodyState3DExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_total_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_total_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_total_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_center_of_mass_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_principal_inertia_axes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_inverse_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_inverse_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_inverse_inertia_tensor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_velocity_at_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to "_apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to "_apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_set_sleep_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to "_is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_local_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_local_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_contact_collider_velocity_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to "_get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTBODYSTATE3DEXTENSION to
      "_get_space_state")
}

private fun registerEngineTypeMethodForPhysicsDirectSpaceState2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "intersect_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "intersect_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2D to "get_rest_info")
}

private fun registerEngineTypeMethodForPhysicsDirectSpaceState2DExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to
      "_intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to
      "_intersect_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to
      "_intersect_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to "_cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to
      "_collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to "_rest_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE2DEXTENSION to
      "is_body_excluded_from_query")
}

private fun registerEngineTypeMethodForPhysicsDirectSpaceState3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "intersect_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "intersect_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3D to "get_rest_info")
}

private fun registerEngineTypeMethodForPhysicsDirectSpaceState3DExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "_intersect_ray")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "_intersect_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "_intersect_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to "_cast_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "_collide_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to "_rest_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "_get_closest_point_to_object_volume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSDIRECTSPACESTATE3DEXTENSION to
      "is_body_excluded_from_query")
}

private fun registerEngineTypeMethodForPhysicsMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "get_friction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_rough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "is_rough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "get_bounce")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "set_absorbent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSMATERIAL to "is_absorbent")
}

private fun registerEngineTypeMethodForPhysicsPointQueryParameters2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "set_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "get_canvas_instance_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS2D to
      "is_collide_with_areas_enabled")
}

private fun registerEngineTypeMethodForPhysicsPointQueryParameters3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSPOINTQUERYPARAMETERS3D to
      "is_collide_with_areas_enabled")
}

private fun registerEngineTypeMethodForPhysicsRayQueryParameters2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "set_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "get_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "set_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "get_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to
      "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to "set_hit_from_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS2D to
      "is_hit_from_inside_enabled")
}

private fun registerEngineTypeMethodForPhysicsRayQueryParameters3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "get_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "get_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_hit_from_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "is_hit_from_inside_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to "set_hit_back_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSRAYQUERYPARAMETERS3D to
      "is_hit_back_faces_enabled")
}

private fun registerEngineTypeMethodForPhysicsServer3DRenderingServerHandler(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3DRENDERINGSERVERHANDLER to
      "_set_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3DRENDERINGSERVERHANDLER to
      "_set_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSERVER3DRENDERINGSERVERHANDLER to "_set_aabb")
}

private fun registerEngineTypeMethodForPhysicsShapeQueryParameters2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS2D to
      "is_collide_with_areas_enabled")
}

private fun registerEngineTypeMethodForPhysicsShapeQueryParameters3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_shape_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "set_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to "get_exclude")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSSHAPEQUERYPARAMETERS3D to
      "is_collide_with_areas_enabled")
}

private fun registerEngineTypeMethodForPhysicsTestMotionParameters2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "get_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "set_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "set_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "is_collide_separation_ray_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "set_collide_separation_ray_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "get_exclude_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "set_exclude_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "get_exclude_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "set_exclude_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "is_recovery_as_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS2D to
      "set_recovery_as_collision_enabled")
}

private fun registerEngineTypeMethodForPhysicsTestMotionParameters3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "get_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "set_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "get_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "set_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "get_max_collisions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "set_max_collisions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "is_collide_separation_ray_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "set_collide_separation_ray_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "get_exclude_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "set_exclude_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "get_exclude_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "set_exclude_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "is_recovery_as_collision_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONPARAMETERS3D to
      "set_recovery_as_collision_enabled")
}

private fun registerEngineTypeMethodForPhysicsTestMotionResult2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to
      "get_collision_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to "get_collision_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to
      "get_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT2D to
      "get_collision_unsafe_fraction")
}

private fun registerEngineTypeMethodForPhysicsTestMotionResult3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_remainder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to
      "get_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to
      "get_collision_unsafe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collider_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collider_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to
      "get_collision_local_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PHYSICSTESTMOTIONRESULT3D to "get_collision_depth")
}

private fun registerEngineTypeMethodForPinJoint2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT2D to "set_softness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT2D to "get_softness")
}

private fun registerEngineTypeMethodForPinJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT3D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PINJOINT3D to "get_param")
}

private fun registerEngineTypeMethodForPlaceholderCubemap(): Unit {
}

private fun registerEngineTypeMethodForPlaceholderCubemapArray(): Unit {
}

private fun registerEngineTypeMethodForPlaceholderMaterial(): Unit {
}

private fun registerEngineTypeMethodForPlaceholderMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERMESH to "set_aabb")
}

private fun registerEngineTypeMethodForPlaceholderTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURE2D to "set_size")
}

private fun registerEngineTypeMethodForPlaceholderTexture2DArray(): Unit {
}

private fun registerEngineTypeMethodForPlaceholderTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURE3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURE3D to "get_size")
}

private fun registerEngineTypeMethodForPlaceholderTextureLayered(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURELAYERED to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURELAYERED to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLACEHOLDERTEXTURELAYERED to "set_layers")
}

private fun registerEngineTypeMethodForPlaneMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PLANEMESH to "get_orientation")
}

private fun registerEngineTypeMethodForPointLight2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "set_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POINTLIGHT2D to "get_texture_scale")
}

private fun registerEngineTypeMethodForPointMesh(): Unit {
}

private fun registerEngineTypeMethodForPolygon2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_polygons")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_vertex_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_vertex_colors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_texture_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_invert_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_invert_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_antialiased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_invert_border")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_invert_border")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "add_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_bone_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "erase_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "clear_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_bone_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_bone_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "set_internal_vertex_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGON2D to "get_internal_vertex_count")
}

private fun registerEngineTypeMethodForPolygonOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONOCCLUDER3D to "set_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONOCCLUDER3D to "get_polygon")
}

private fun registerEngineTypeMethodForPolygonPathFinder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "find_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_intersections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_closest_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "is_point_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "set_point_penalty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_point_penalty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POLYGONPATHFINDER to "get_bounds")
}

private fun registerEngineTypeMethodForPopup(): Unit {
}

private fun registerEngineTypeMethodForPopupMenu(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_radio_check_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_multistate_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_radio_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_icon_radio_check_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_submenu_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_as_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_indent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_multistate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_shortcut_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "toggle_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "toggle_item_multistate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_accelerator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_submenu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_radio_checkable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_item_shortcut_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_tooltip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_shortcut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_indent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_focused_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_focused_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_item_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "scroll_to_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "remove_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "add_separator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_checkable_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_checkable_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_hide_on_state_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "is_hide_on_state_item_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_submenu_popup_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_submenu_popup_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "set_allow_search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_POPUPMENU to "get_allow_search")
}

private fun registerEngineTypeMethodForPopupPanel(): Unit {
}

private fun registerEngineTypeMethodForPortableCompressedTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to "create_from_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to
      "get_compression_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to "set_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to "get_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to
      "set_keep_compressed_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to
      "is_keeping_compressed_buffer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to
      "set_keep_all_compressed_buffers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PORTABLECOMPRESSEDTEXTURE2D to
      "is_keeping_all_compressed_buffers")
}

private fun registerEngineTypeMethodForPrimitiveMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "_create_mesh_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_mesh_arrays")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_custom_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_flip_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_flip_faces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_add_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_add_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "set_uv2_padding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRIMITIVEMESH to "get_uv2_padding")
}

private fun registerEngineTypeMethodForPrismMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_left_to_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_left_to_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "set_subdivide_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PRISMMESH to "get_subdivide_depth")
}

private fun registerEngineTypeMethodForProceduralSkyMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_top_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_top_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_cover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_cover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sky_cover_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sky_cover_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_ground_bottom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_ground_bottom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_ground_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_ground_horizon_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_ground_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_ground_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to
      "set_ground_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to
      "get_ground_energy_multiplier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sun_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sun_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_sun_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_sun_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROCEDURALSKYMATERIAL to "get_use_debanding")
}

private fun registerEngineTypeMethodForProgressBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "set_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "get_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "set_show_percentage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROGRESSBAR to "is_percentage_shown")
}

private fun registerEngineTypeMethodForPropertyTweener(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "from_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "as_relative")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "set_trans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "set_ease")
  TypeManager.engineTypeMethod.add(ENGINECLASS_PROPERTYTWEENER to "set_delay")
}

private fun registerEngineTypeMethodForQuadMesh(): Unit {
}

private fun registerEngineTypeMethodForQuadOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADOCCLUDER3D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_QUADOCCLUDER3D to "get_size")
}

private fun registerEngineTypeMethodForRDAttachmentFormat(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "set_samples")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "get_samples")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "set_usage_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDATTACHMENTFORMAT to "get_usage_flags")
}

private fun registerEngineTypeMethodForRDFramebufferPass(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "set_color_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "get_color_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "set_input_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "get_input_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "set_resolve_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "get_resolve_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "set_preserve_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "get_preserve_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "set_depth_attachment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDFRAMEBUFFERPASS to "get_depth_attachment")
}

private fun registerEngineTypeMethodForRDPipelineColorBlendState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "set_enable_logic_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "get_enable_logic_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "set_logic_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "get_logic_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "set_blend_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "get_blend_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "set_attachments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATE to "get_attachments")
}

private fun registerEngineTypeMethodForRDPipelineColorBlendStateAttachment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "set_as_mix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_enable_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_enable_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_src_color_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_src_color_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_dst_color_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_dst_color_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_color_blend_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_color_blend_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_src_alpha_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_src_alpha_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_dst_alpha_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_dst_alpha_blend_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "set_alpha_blend_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to
      "get_alpha_blend_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "set_write_r")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "get_write_r")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "set_write_g")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "get_write_g")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "set_write_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "get_write_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "set_write_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINECOLORBLENDSTATEATTACHMENT to "get_write_a")
}

private fun registerEngineTypeMethodForRDPipelineDepthStencilState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_enable_depth_test")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_enable_depth_test")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_enable_depth_write")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_enable_depth_write")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_depth_compare_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_depth_compare_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_enable_depth_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_enable_depth_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_depth_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_depth_range_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_depth_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_depth_range_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_enable_stencil")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_enable_stencil")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_front_op_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_front_op_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_front_op_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_front_op_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_front_op_depth_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_front_op_depth_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_front_op_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_front_op_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_front_op_compare_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_front_op_compare_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_front_op_write_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_front_op_write_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_front_op_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_front_op_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_back_op_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_back_op_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_back_op_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_back_op_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_back_op_depth_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_back_op_depth_fail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "set_back_op_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to "get_back_op_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_back_op_compare_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_back_op_compare_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_back_op_write_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_back_op_write_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "set_back_op_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEDEPTHSTENCILSTATE to
      "get_back_op_reference")
}

private fun registerEngineTypeMethodForRDPipelineMultisampleState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to "set_sample_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to "get_sample_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "set_enable_sample_shading")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "get_enable_sample_shading")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "set_min_sample_shading")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "get_min_sample_shading")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "set_enable_alpha_to_coverage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "get_enable_alpha_to_coverage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "set_enable_alpha_to_one")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to
      "get_enable_alpha_to_one")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to "set_sample_masks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINEMULTISAMPLESTATE to "get_sample_masks")
}

private fun registerEngineTypeMethodForRDPipelineRasterizationState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_enable_depth_clamp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_enable_depth_clamp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_discard_primitives")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_discard_primitives")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "set_wireframe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "get_wireframe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "set_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "get_cull_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "set_front_face")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "get_front_face")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_depth_bias_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_depth_bias_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_depth_bias_constant_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_depth_bias_constant_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_depth_bias_clamp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_depth_bias_clamp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_depth_bias_slope_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_depth_bias_slope_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "set_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to "get_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "set_patch_control_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINERASTERIZATIONSTATE to
      "get_patch_control_points")
}

private fun registerEngineTypeMethodForRDPipelineSpecializationConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINESPECIALIZATIONCONSTANT to "set_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINESPECIALIZATIONCONSTANT to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINESPECIALIZATIONCONSTANT to
      "set_constant_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDPIPELINESPECIALIZATIONCONSTANT to
      "get_constant_id")
}

private fun registerEngineTypeMethodForRDSamplerState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_mag_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_mag_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_min_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_min_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_mip_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_mip_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_repeat_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_repeat_u")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_repeat_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_repeat_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_repeat_w")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_repeat_w")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_lod_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_lod_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_use_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_use_anisotropy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_anisotropy_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_anisotropy_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_enable_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_enable_compare")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_compare_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_compare_op")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_min_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_min_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_max_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_max_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "set_unnormalized_uvw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSAMPLERSTATE to "get_unnormalized_uvw")
}

private fun registerEngineTypeMethodForRDShaderFile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERFILE to "set_bytecode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERFILE to "get_spirv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERFILE to "get_version_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERFILE to "set_base_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERFILE to "get_base_error")
}

private fun registerEngineTypeMethodForRDShaderSPIRV(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSPIRV to "set_stage_bytecode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSPIRV to "get_stage_bytecode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSPIRV to "set_stage_compile_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSPIRV to "get_stage_compile_error")
}

private fun registerEngineTypeMethodForRDShaderSource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSOURCE to "set_stage_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSOURCE to "get_stage_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSOURCE to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDSHADERSOURCE to "get_language")
}

private fun registerEngineTypeMethodForRDTextureFormat(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_array_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_array_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_samples")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_samples")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "set_usage_bits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "get_usage_bits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "add_shareable_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREFORMAT to "remove_shareable_format")
}

private fun registerEngineTypeMethodForRDTextureView(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "set_format_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "get_format_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "set_swizzle_r")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "get_swizzle_r")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "set_swizzle_g")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "get_swizzle_g")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "set_swizzle_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "get_swizzle_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "set_swizzle_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDTEXTUREVIEW to "get_swizzle_a")
}

private fun registerEngineTypeMethodForRDUniform(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "set_uniform_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "get_uniform_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "set_binding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "get_binding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "add_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "clear_ids")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDUNIFORM to "get_ids")
}

private fun registerEngineTypeMethodForRDVertexAttribute(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "set_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "get_location")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "set_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "set_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "get_stride")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "set_frequency")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RDVERTEXATTRIBUTE to "get_frequency")
}

private fun registerEngineTypeMethodForRandomNumberGenerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "set_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "get_seed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "set_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "get_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randi")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randf")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randfn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randf_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randi_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANDOMNUMBERGENERATOR to "randomize")
}

private fun registerEngineTypeMethodForRange(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "_value_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_page")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "get_as_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_value_no_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_page")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_as_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_use_rounded_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_using_rounded_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_exp_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_ratio_exp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_allow_greater")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_greater_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "set_allow_lesser")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "is_lesser_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "share")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RANGE to "unshare")
}

private fun registerEngineTypeMethodForRayCast2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "force_raycast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "set_hit_from_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST2D to "is_hit_from_inside_enabled")
}

private fun registerEngineTypeMethodForRayCast3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "force_raycast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_hit_from_inside")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "is_hit_from_inside_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_debug_shape_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_debug_shape_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "set_debug_shape_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RAYCAST3D to "get_debug_shape_thickness")
}

private fun registerEngineTypeMethodForRectangleShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RECTANGLESHAPE2D to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RECTANGLESHAPE2D to "get_size")
}

private fun registerEngineTypeMethodForRefCounted(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFCOUNTED to "init_ref")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFCOUNTED to "reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFCOUNTED to "unreference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFCOUNTED to "get_reference_count")
}

private fun registerEngineTypeMethodForReferenceRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "get_editor_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFERENCERECT to "set_editor_only")
}

private fun registerEngineTypeMethodForReflectionProbe(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_intensity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_ambient_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_ambient_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_ambient_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_ambient_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_ambient_color_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_ambient_color_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_max_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_mesh_lod_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_mesh_lod_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_origin_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "is_set_as_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_enable_box_projection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "is_box_projection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_enable_shadows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "are_shadows_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REFLECTIONPROBE to "get_update_mode")
}

private fun registerEngineTypeMethodForRegEx(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "create_from_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "compile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "search_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "sub")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_group_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEX to "get_names")
}

private fun registerEngineTypeMethodForRegExMatch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_subject")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_group_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_strings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REGEXMATCH to "get_end")
}

private fun registerEngineTypeMethodForRemoteTransform2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "force_update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "set_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM2D to "get_update_scale")
}

private fun registerEngineTypeMethodForRemoteTransform3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "set_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "get_remote_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "force_update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "set_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "get_use_global_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "set_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "get_update_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "set_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "get_update_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "set_update_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_REMOTETRANSFORM3D to "get_update_scale")
}

private fun registerEngineTypeMethodForRenderingDevice(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_create_shared")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "texture_create_shared_from_slice")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "texture_is_format_supported_for_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_is_shared")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_resolve_multisample")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_format_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "framebuffer_format_create_multipass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_format_create_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "framebuffer_format_get_texture_samples")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_create_multipass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_create_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "framebuffer_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "sampler_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "vertex_buffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "vertex_format_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "vertex_array_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "index_buffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "index_array_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "shader_compile_spirv_from_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "shader_compile_binary_from_spirv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "shader_create_from_spirv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "shader_create_from_bytecode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "shader_get_vertex_input_attribute_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "uniform_buffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "storage_buffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "texture_buffer_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "uniform_set_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "uniform_set_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "buffer_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "buffer_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "buffer_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "render_pipeline_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "render_pipeline_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_pipeline_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_pipeline_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "screen_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "screen_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "screen_get_framebuffer_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_begin_for_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_begin_split")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_set_blend_constants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_bind_render_pipeline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_bind_uniform_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_bind_vertex_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_bind_index_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_set_push_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_enable_scissor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_disable_scissor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_switch_to_next_pass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "draw_list_switch_to_next_pass_split")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_list_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to
      "compute_list_bind_compute_pipeline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_set_push_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_bind_uniform_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_dispatch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_add_barrier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "compute_list_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "capture_timestamp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_captured_timestamps_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_captured_timestamps_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_captured_timestamp_gpu_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_captured_timestamp_cpu_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_captured_timestamp_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "limit_get")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_frame_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "submit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "barrier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "full_barrier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "create_local_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "set_resource_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_command_begin_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_command_insert_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "draw_command_end_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_device_vendor_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_device_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_device_pipeline_cache_uuid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_memory_usage")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RENDERINGDEVICE to "get_driver_resource")
}

private fun registerEngineTypeMethodForResource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "take_over_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "set_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "is_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "get_local_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "setup_local_to_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "emit_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCE to "duplicate")
}

private fun registerEngineTypeMethodForResourceFormatImporterSaver(): Unit {
}

private fun registerEngineTypeMethodForResourceFormatLoader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_recognize_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_handles_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_get_resource_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_get_resource_uid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_get_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_rename_dependencies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_exists")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_get_classes_used")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATLOADER to "_load")
}

private fun registerEngineTypeMethodForResourceFormatSaver(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "_save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "_set_uid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "_recognize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "_get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEFORMATSAVER to "_recognize_path")
}

private fun registerEngineTypeMethodForResourceImporter(): Unit {
}

private fun registerEngineTypeMethodForResourcePreloader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "add_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "remove_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "rename_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "has_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "get_resource")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RESOURCEPRELOADER to "get_resource_list")
}

private fun registerEngineTypeMethodForRibbonTrailMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_section_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_section_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_section_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_section_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIBBONTRAILMESH to "get_shape")
}

private fun registerEngineTypeMethodForRichTextEffect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTEFFECT to "_process_custom_fx")
}

private fun registerEngineTypeMethodForRichTextLabel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_parsed_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "add_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "add_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "newline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "remove_paragraph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_bold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_bold_italics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_italics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_mono")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_outline_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_outline_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_paragraph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_indent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_underline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_strikethrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_table")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_dropcap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_table_column_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_cell_row_background_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_cell_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_cell_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_cell_padding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_fgcolor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "push_bgcolor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "pop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_meta_underline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_meta_underlined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_hint_underline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_hint_underlined")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_scroll_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_scroll_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_scroll_follow")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_scroll_following")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_v_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "scroll_to_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "scroll_to_paragraph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "scroll_to_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_fit_content_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_fit_content_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to
      "set_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_selection_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_selection_to")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "select_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_selected_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "parse_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "append_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_threaded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_threaded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_progress_bar_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_progress_bar_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_characters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_characters_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_visible_characters_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_visible_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_character_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_character_paragraph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_total_character_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_use_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_using_bbcode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_paragraph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_visible_paragraph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_content_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_content_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_line_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_paragraph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "parse_expressions_for_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "set_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_effects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "install_effect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "get_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RICHTEXTLABEL to "is_menu_visible")
}

private fun registerEngineTypeMethodForRigidBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_center_of_mass_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_center_of_mass_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_use_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_using_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_contact_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_contact_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to
      "set_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to
      "get_continuous_collision_detection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_can_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_able_to_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_lock_rotation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_lock_rotation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_freeze_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "is_freeze_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "set_freeze_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_freeze_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY2D to "get_colliding_bodies")
}

private fun registerEngineTypeMethodForRigidBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "_integrate_forces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_inertia")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_center_of_mass_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_center_of_mass_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_center_of_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_inverse_inertia_tensor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_gravity_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_linear_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_angular_damp_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_linear_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_angular_damp")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_max_contacts_reported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_contact_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_use_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_using_custom_integrator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_contact_monitor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_contact_monitor_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to
      "set_use_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to
      "is_using_continuous_collision_detection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_axis_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_central_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_torque_impulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "apply_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "add_constant_central_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "add_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "add_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_constant_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_constant_torque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_sleeping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_can_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_able_to_sleep")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_lock_rotation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_lock_rotation_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_freeze_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "is_freeze_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "set_freeze_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_freeze_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_RIGIDBODY3D to "get_colliding_bodies")
}

private fun registerEngineTypeMethodForRootMotionView(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "set_animation_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "get_animation_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "set_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "get_cell_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "set_zero_y")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ROOTMOTIONVIEW to "get_zero_y")
}

private fun registerEngineTypeMethodForSceneMultiplayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_root_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "get_root_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "disconnect_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "get_authenticating_peers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "send_auth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "complete_auth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_auth_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "get_auth_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_auth_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "get_auth_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_refuse_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "is_refusing_new_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_allow_object_decoding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "is_object_decoding_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "set_server_relay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "is_server_relay_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEMULTIPLAYER to "send_bytes")
}

private fun registerEngineTypeMethodForSceneReplicationConfig(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "get_properties")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "add_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "has_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "remove_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "property_get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "property_get_spawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "property_set_spawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "property_get_sync")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENEREPLICATIONCONFIG to "property_set_sync")
}

private fun registerEngineTypeMethodForSceneState(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_owner_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "is_node_instance_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_instance_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_groups")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_node_property_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_target")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_binds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENESTATE to "get_connection_unbinds")
}

private fun registerEngineTypeMethodForSceneTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "has_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_auto_accept_quit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_auto_accept_quit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_quit_on_go_back")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_quit_on_go_back")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_debug_collisions_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_debugging_collisions_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_debug_paths_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_debugging_paths_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_debug_navigation_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_debugging_navigation_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_edited_scene_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "create_timer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "create_tween")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_processed_tweens")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_node_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "quit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "queue_delete")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "call_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "notify_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_group_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "call_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "notify_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_nodes_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_first_node_in_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "change_scene_to_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "change_scene_to_packed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "reload_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "unload_current_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "get_multiplayer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "set_multiplayer_poll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREE to "is_multiplayer_poll_enabled")
}

private fun registerEngineTypeMethodForSceneTreeTimer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREETIMER to "set_time_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCENETREETIMER to "get_time_left")
}

private fun registerEngineTypeMethodForScript(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "can_instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "instance_has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "has_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "set_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "reload")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_instance_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "has_script_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_script_constant_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "get_property_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPT to "is_tool")
}

private fun registerEngineTypeMethodForScriptCreateDialog(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTCREATEDIALOG to "config")
}

private fun registerEngineTypeMethodForScriptEditor(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_current_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_open_script_editors")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "register_syntax_highlighter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "unregister_syntax_highlighter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "goto_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_current_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "get_open_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITOR to "open_script_create_dialog")
}

private fun registerEngineTypeMethodForScriptEditorBase(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITORBASE to "get_base_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEDITORBASE to "add_syntax_highlighter")
}

private fun registerEngineTypeMethodForScriptExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_editor_can_reload_from_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_placeholder_erased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_can_instantiate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_base_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_inherits_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_instance_base_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_instance_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_placeholder_instance_create")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_instance_has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_has_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_set_source_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_reload")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_has_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_method_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_is_tool")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_has_script_signal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_script_signal_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_has_property_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_property_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_update_exports")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_script_method_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_script_property_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_member_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_constants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_members")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to
      "_is_placeholder_fallback_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTEXTENSION to "_get_rpc_config")
}

private fun registerEngineTypeMethodForScriptLanguage(): Unit {
}

private fun registerEngineTypeMethodForScriptLanguageExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_init")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_execute_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_reserved_words")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_is_control_flow_keyword")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_comment_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_string_delimiters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_make_template")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_built_in_templates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_is_using_templates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_validate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_validate_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_create_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_has_named_classes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_supports_builtin_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_supports_documentation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_can_inherit_from_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_find_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_make_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_open_in_external_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_overrides_external_editor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_complete_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_lookup_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_auto_indent_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_add_global_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_add_named_global_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_remove_named_global_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_thread_enter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_thread_exit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_debug_get_error")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_locals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_members")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_stack_level_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_debug_get_globals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_parse_stack_level_expression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_debug_get_current_stack_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_reload_all_scripts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_reload_tool_script")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_get_recognized_extensions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_public_functions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_public_constants")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_public_annotations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_profiling_start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_profiling_stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_profiling_get_accumulated_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_profiling_get_frame_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_alloc_instance_binding_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_free_instance_binding_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_refcount_incremented_instance_binding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_refcount_decremented_instance_binding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to
      "_handles_global_class_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCRIPTLANGUAGEEXTENSION to "_get_global_class_name")
}

private fun registerEngineTypeMethodForScrollBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "set_custom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLBAR to "get_custom_step")
}

private fun registerEngineTypeMethodForScrollContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_horizontal_scroll_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_horizontal_scroll_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_vertical_scroll_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_vertical_scroll_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_deadzone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "set_follow_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "is_following_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_h_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "get_v_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SCROLLCONTAINER to "ensure_control_visible")
}

private fun registerEngineTypeMethodForSegmentShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "set_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "get_a")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "set_b")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEGMENTSHAPE2D to "get_b")
}

private fun registerEngineTypeMethodForSemaphore(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEMAPHORE to "wait")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEMAPHORE to "try_wait")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEMAPHORE to "post")
}

private fun registerEngineTypeMethodForSeparationRayShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE2D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE2D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE2D to "set_slide_on_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE2D to "get_slide_on_slope")
}

private fun registerEngineTypeMethodForSeparationRayShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE3D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE3D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE3D to "set_slide_on_slope")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SEPARATIONRAYSHAPE3D to "get_slide_on_slope")
}

private fun registerEngineTypeMethodForSeparator(): Unit {
}

private fun registerEngineTypeMethodForShader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "set_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "set_default_texture_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "get_default_texture_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADER to "has_parameter")
}

private fun registerEngineTypeMethodForShaderGlobalsOverride(): Unit {
}

private fun registerEngineTypeMethodForShaderInclude(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERINCLUDE to "set_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERINCLUDE to "get_code")
}

private fun registerEngineTypeMethodForShaderMaterial(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "set_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "get_shader")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "set_shader_parameter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHADERMATERIAL to "get_shader_parameter")
}

private fun registerEngineTypeMethodForShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "set_custom_solver_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "get_custom_solver_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_with_motion")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_and_get_contacts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "collide_with_motion_and_get_contacts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE2D to "get_rect")
}

private fun registerEngineTypeMethodForShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE3D to "set_custom_solver_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE3D to "get_custom_solver_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE3D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPE3D to "get_debug_mesh")
}

private fun registerEngineTypeMethodForShapeCast2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_max_results")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_max_results")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "force_shapecast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_closest_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to
      "get_closest_collision_unsafe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST2D to "is_collide_with_bodies_enabled")
}

private fun registerEngineTypeMethodForShapeCast3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "resource_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_target_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_max_results")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_max_results")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "is_colliding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collision_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "force_shapecast_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collider")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collider_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collider_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collision_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collision_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_closest_collision_safe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to
      "get_closest_collision_unsafe_fraction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "add_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "add_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "remove_exception_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "remove_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "clear_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_exclude_parent_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_collide_with_areas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "is_collide_with_areas_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_collide_with_bodies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "is_collide_with_bodies_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "set_debug_shape_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHAPECAST3D to "get_debug_shape_custom_color")
}

private fun registerEngineTypeMethodForShortcut(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "set_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "get_events")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "has_valid_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "matches_event")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SHORTCUT to "get_as_text")
}

private fun registerEngineTypeMethodForSkeleton2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "set_modification_stack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_modification_stack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "execute_modifications")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "set_bone_local_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON2D to "get_bone_local_pose_override")
}

private fun registerEngineTypeMethodForSkeleton3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "add_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "find_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "unparent_bone_and_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_parentless_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_global_rest")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "create_skin_from_rest_transforms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "register_skin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "localize_rests")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "clear_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_pose_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_pose_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_pose_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_pose_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_pose_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_pose_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "reset_bone_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "reset_bone_poses")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "is_bone_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "clear_bones_global_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_bone_global_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_global_pose_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_global_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_bone_global_pose_no_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "force_update_all_bone_transforms")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "force_update_bone_child_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_motion_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_show_rest_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "is_show_rest_only")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "set_animate_physical_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "get_animate_physical_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "physical_bones_stop_simulation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to "physical_bones_start_simulation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to
      "physical_bones_add_collision_exception")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETON3D to
      "physical_bones_remove_collision_exception")
}

private fun registerEngineTypeMethodForSkeletonIK3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_tip_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_tip_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_interpolation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_target_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_target_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_override_tip_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "is_override_tip_basis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_use_magnet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "is_using_magnet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_parent_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "is_running")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_min_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "set_max_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "get_max_iterations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONIK3D to "stop")
}

private fun registerEngineTypeMethodForSkeletonModification2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "_execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "_setup_modification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "_draw_editor_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "get_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "get_modification_stack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "set_is_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "get_is_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "set_execution_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "get_execution_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "clamp_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "set_editor_draw_gizmo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2D to "get_editor_draw_gizmo")
}

private fun registerEngineTypeMethodForSkeletonModification2DCCDIK(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to "set_tip_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to "get_tip_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_rotate_from_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_rotate_from_joint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_enable_constraint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_enable_constraint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_constraint_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_constraint_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_constraint_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_constraint_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "set_ccdik_joint_constraint_angle_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DCCDIK to
      "get_ccdik_joint_constraint_angle_invert")
}

private fun registerEngineTypeMethodForSkeletonModification2DFABRIK(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "set_fabrik_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "get_fabrik_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "set_fabrik_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "get_fabrik_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "set_fabrik_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "get_fabrik_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "set_fabrik_joint_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "get_fabrik_joint_magnet_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "set_fabrik_joint_use_target_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DFABRIK to
      "get_fabrik_joint_use_target_rotation")
}

private fun registerEngineTypeMethodForSkeletonModification2DJiggle(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_data_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_use_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_use_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_use_colliders")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_use_colliders")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_damping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_use_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_use_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "set_jiggle_joint_gravity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DJIGGLE to
      "get_jiggle_joint_gravity")
}

private fun registerEngineTypeMethodForSkeletonModification2DLookAt(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "set_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "get_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "set_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "get_bone_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "set_additional_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "get_additional_rotation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "set_enable_constraint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "get_enable_constraint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "set_constraint_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "get_constraint_angle_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "set_constraint_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "get_constraint_angle_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "set_constraint_angle_invert")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DLOOKAT to
      "get_constraint_angle_invert")
}

private fun registerEngineTypeMethodForSkeletonModification2DPhysicalBones(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "set_physical_bone_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "get_physical_bone_chain_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "set_physical_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "get_physical_bone_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "fetch_physical_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "start_simulation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DPHYSICALBONES to
      "stop_simulation")
}

private fun registerEngineTypeMethodForSkeletonModification2DStackHolder(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DSTACKHOLDER to
      "set_held_modification_stack")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DSTACKHOLDER to
      "get_held_modification_stack")
}

private fun registerEngineTypeMethodForSkeletonModification2DTwoBoneIK(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to "set_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to "get_target_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_target_minimum_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_target_minimum_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_target_maximum_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_target_maximum_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_flip_bend_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_flip_bend_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_joint_one_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_joint_one_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_joint_one_bone_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_joint_one_bone_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_joint_two_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_joint_two_bone2d_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "set_joint_two_bone_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATION2DTWOBONEIK to
      "get_joint_two_bone_idx")
}

private fun registerEngineTypeMethodForSkeletonModificationStack2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "execute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to
      "enable_all_modifications")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "get_modification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "add_modification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "delete_modification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "set_modification")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to
      "set_modification_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to
      "get_modification_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "get_is_setup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "set_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "get_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "set_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "get_strength")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONMODIFICATIONSTACK2D to "get_skeleton")
}

private fun registerEngineTypeMethodForSkeletonProfile(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_root_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_scale_base_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_scale_base_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_group_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_group_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_group_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_bone_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_bone_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "find_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_bone_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_bone_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_tail_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_tail_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_bone_tail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_bone_tail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_reference_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_reference_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_handle_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_handle_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "get_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKELETONPROFILE to "set_group")
}

private fun registerEngineTypeMethodForSkeletonProfileHumanoid(): Unit {
}

private fun registerEngineTypeMethodForSkin(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "add_bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "add_named_bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "set_bind_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "get_bind_bone")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKIN to "clear_binds")
}

private fun registerEngineTypeMethodForSkinReference(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKINREFERENCE to "get_skeleton")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKINREFERENCE to "get_skin")
}

private fun registerEngineTypeMethodForSky(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "set_radiance_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "get_radiance_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "set_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "get_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SKY to "get_material")
}

private fun registerEngineTypeMethodForSlider(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_ticks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "get_ticks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "get_ticks_on_borders")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_ticks_on_borders")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "set_scrollable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDER to "is_scrollable")
}

private fun registerEngineTypeMethodForSliderJoint3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT3D to "set_param")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SLIDERJOINT3D to "get_param")
}

private fun registerEngineTypeMethodForSoftBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_physics_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_collision_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_collision_layer_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_parent_collision_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_parent_collision_ignore")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_disable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_collision_exceptions")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "add_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "remove_collision_exception_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_simulation_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_simulation_precision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_total_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_total_mass")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_linear_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_linear_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_pressure_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_pressure_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_damping_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_damping_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_drag_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_drag_coefficient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "get_point_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_point_pinned")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "is_point_pinned")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "set_ray_pickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SOFTBODY3D to "is_ray_pickable")
}

private fun registerEngineTypeMethodForSphereMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_radial_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "set_is_hemisphere")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREMESH to "get_is_hemisphere")
}

private fun registerEngineTypeMethodForSphereOccluder3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREOCCLUDER3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHEREOCCLUDER3D to "get_radius")
}

private fun registerEngineTypeMethodForSphereShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHERESHAPE3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPHERESHAPE3D to "get_radius")
}

private fun registerEngineTypeMethodForSpinBox(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_prefix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_prefix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_custom_arrow_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_custom_arrow_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_update_on_text_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_update_on_text_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "set_select_all_on_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "is_select_all_on_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "apply")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPINBOX to "get_line_edit")
}

private fun registerEngineTypeMethodForSplitContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_split_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "get_split_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "clamp_split_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "is_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_dragger_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "get_dragger_visibility")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "set_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPLITCONTAINER to "is_vertical")
}

private fun registerEngineTypeMethodForSpotLight3D(): Unit {
}

private fun registerEngineTypeMethodForSpringArm3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "get_hit_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "set_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "get_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "add_excluded_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "remove_excluded_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "clear_excluded_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "set_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "get_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "set_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRINGARM3D to "get_margin")
}

private fun registerEngineTypeMethodForSprite2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_region_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_region_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_pixel_opaque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_region_filter_clip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "is_region_filter_clip_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "set_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE2D to "get_rect")
}

private fun registerEngineTypeMethodForSprite3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_region_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "is_region_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_frame_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_vframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "set_hframes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITE3D to "get_hframes")
}

private fun registerEngineTypeMethodForSpriteBase3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_render_priority")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_draw_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_alpha_cut_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_billboard_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "get_item_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEBASE3D to "generate_triangle_mesh")
}

private fun registerEngineTypeMethodForSpriteFrames(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "add_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "has_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "remove_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "rename_animation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_animation_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_animation_loop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "add_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "set_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "remove_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_frame_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_frame_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "get_frame_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SPRITEFRAMES to "clear_all")
}

private fun registerEngineTypeMethodForStandardMaterial3D(): Unit {
}

private fun registerEngineTypeMethodForStaticBody2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY2D to "get_physics_material_override")
}

private fun registerEngineTypeMethodForStaticBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "set_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "set_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "get_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "get_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "set_physics_material_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STATICBODY3D to "get_physics_material_override")
}

private fun registerEngineTypeMethodForStreamPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_available_bytes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "set_big_endian")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "is_big_endian_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_u64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_utf8_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "put_var")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u8")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u16")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u32")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_u64")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_float")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_double")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_utf8_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEER to "get_var")
}

private fun registerEngineTypeMethodForStreamPeerBuffer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "resize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "set_data_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "get_data_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERBUFFER to "duplicate")
}

private fun registerEngineTypeMethodForStreamPeerExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEEREXTENSION to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEEREXTENSION to "_get_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEEREXTENSION to "_put_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEEREXTENSION to "_put_partial_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEEREXTENSION to "_get_available_bytes")
}

private fun registerEngineTypeMethodForStreamPeerGZIP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERGZIP to "start_compression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERGZIP to "start_decompression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERGZIP to "finish")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERGZIP to "clear")
}

private fun registerEngineTypeMethodForStreamPeerTCP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "bind")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "connect_to_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_connected_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_connected_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "get_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "disconnect_from_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTCP to "set_no_delay")
}

private fun registerEngineTypeMethodForStreamPeerTLS(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "accept_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "connect_to_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "get_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "disconnect_from_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "set_blocking_handshake_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STREAMPEERTLS to "is_blocking_handshake_enabled")
}

private fun registerEngineTypeMethodForStyleBox(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "_get_style_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "_test_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "_get_center_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "_get_draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "test_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "set_default_margin_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_default_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_center_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "get_current_item_drawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOX to "draw")
}

private fun registerEngineTypeMethodForStyleBoxEmpty(): Unit {
}

private fun registerEngineTypeMethodForStyleBoxFlat(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_border_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_border_blend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_expand_margin_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_expand_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_skew")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_shadow_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_shadow_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_anti_aliased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "is_anti_aliased")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_aa_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_aa_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "set_corner_detail")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXFLAT to "get_corner_detail")
}

private fun registerEngineTypeMethodForStyleBoxLine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_grow_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_grow_begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_grow_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "get_grow_end")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "set_vertical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXLINE to "is_vertical")
}

private fun registerEngineTypeMethodForStyleBoxTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_margin_size_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_expand_margin_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_expand_margin_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_region_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_draw_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "is_draw_center_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_h_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "set_v_axis_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_STYLEBOXTEXTURE to "get_v_axis_stretch_mode")
}

private fun registerEngineTypeMethodForSubViewport(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "set_size_2d_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "get_size_2d_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "set_size_2d_override_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "is_size_2d_override_stretch_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "set_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "get_update_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "set_clear_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORT to "get_clear_mode")
}

private fun registerEngineTypeMethodForSubViewportContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORTCONTAINER to "set_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORTCONTAINER to "is_stretch_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORTCONTAINER to "set_stretch_shrink")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SUBVIEWPORTCONTAINER to "get_stretch_shrink")
}

private fun registerEngineTypeMethodForSurfaceTool(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_skin_weight_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "get_skin_weight_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_custom_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "get_custom_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "begin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_vertex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_tangent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_uv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_uv2")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_bones")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_weights")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_custom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_smooth_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_triangle_fan")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "add_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "deindex")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "generate_normals")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "generate_tangents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "optimize_indices_for_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "generate_lod")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "get_primitive_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "create_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "create_from_blend_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "append_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "commit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SURFACETOOL to "commit_to_arrays")
}

private fun registerEngineTypeMethodForSyntaxHighlighter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "_get_line_syntax_highlighting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "_clear_highlighting_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "_update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "get_line_syntax_highlighting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "update_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "clear_highlighting_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYNTAXHIGHLIGHTER to "get_text_edit")
}

private fun registerEngineTypeMethodForSystemFont(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "is_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "is_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to
      "set_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to
      "is_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_font_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_font_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "get_font_italic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_font_italic")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_font_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_SYSTEMFONT to "set_font_stretch")
}

private fun registerEngineTypeMethodForTCPServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "is_connection_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "get_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "take_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TCPSERVER to "stop")
}

private fun registerEngineTypeMethodForTabBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_previous_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "is_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "is_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "remove_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "add_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_idx_at_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_clip_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_clip_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_offset_buttons_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "ensure_tab_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "move_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tab_close_display_policy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tab_close_display_policy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_max_tab_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_max_tab_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_scrolling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_scrolling_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_scroll_to_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_scroll_to_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "set_select_with_rmb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "get_select_with_rmb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABBAR to "clear_tabs")
}

private fun registerEngineTypeMethodForTabContainer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_current_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_previous_tab")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_current_tab_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_clip_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_clip_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tabs_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "are_tabs_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_all_tabs_in_front")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "is_all_tabs_in_front")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "is_tab_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "is_tab_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tab_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_button_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_idx_at_point")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tab_idx_from_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_drag_to_rearrange_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_tabs_rearrange_group")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "set_use_hidden_tabs_for_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TABCONTAINER to "get_use_hidden_tabs_for_min_size")
}

private fun registerEngineTypeMethodForTextEdit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_handle_unicode_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_backspace")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_cut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_paste")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "_paste_primary_clipboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_ime_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_tab_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_overtype_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_overtype_mode_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_context_menu_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_shortcut_keys_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_virtual_keyboard_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_middle_mouse_paste_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_middle_mouse_paste_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_indent_level")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_first_non_whitespace_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "swap_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "insert_line_at")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "insert_text_at_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "remove_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_last_unhidden_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_next_visible_line_offset_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to
      "get_next_visible_line_index_offset_from")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "backspace")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "cut")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "copy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "paste")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "paste_primary_clipboard")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "start_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "end_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "begin_complex_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "end_complex_operation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "clear_undo_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "tag_saved_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_saved_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_search_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_search_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "search")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_tooltip_request_func")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_local_mouse_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_word_at_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_column_at_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_pos_at_line_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_rect_at_line_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_minimap_line_at_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_dragging_cursor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_mouse_over_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_caret_blink_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_blink_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_blink_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_move_caret_on_right_click_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_move_caret_on_right_click_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_mid_grapheme_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_caret_mid_grapheme_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_multiple_carets_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_multiple_carets_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "remove_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "remove_secondary_carets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "merge_overlapping_carets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_caret_at_carets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_index_edit_order")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "adjust_carets_after_edit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_caret_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_draw_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_caret_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_caret_wrap_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_word_under_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_selecting_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_deselect_on_focus_loss_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_drag_and_drop_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drag_and_drop_selection_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_selection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "select_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "select_word_under_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_selection_for_next_occurrence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "has_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selected_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_from_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_from_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_to_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_selection_to_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "delete_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_wrapping_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_wrapping_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_wrapped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_wrap_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_wrap_index_at_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_wrapped_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_smooth_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_smooth_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_v_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_h_scroll_bar")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_v_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_h_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_scroll_past_end_of_file_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_scroll_past_end_of_file_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_v_scroll_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_v_scroll_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_fit_content_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_fit_content_height_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_scroll_pos_for_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_first_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_first_visible_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_center_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_as_last_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_last_full_visible_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_last_full_visible_line_wrap_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_visible_line_count_in_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_total_visible_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "adjust_viewport_to_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "center_viewport_to_caret")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_minimap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_minimap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_minimap_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_minimap_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_minimap_visible_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "add_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "remove_gutter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_gutter_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_gutter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_gutter_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_gutter_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_gutter_drawn")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_clickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_gutter_clickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_overwritable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_gutter_overwritable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "merge_gutters")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_gutter_custom_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_total_gutter_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_gutter_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_gutter_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_gutter_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_gutter_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_gutter_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_gutter_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_gutter_item_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_gutter_item_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_gutter_clickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_line_gutter_clickable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_line_background_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_line_background_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_syntax_highlighter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_syntax_highlighter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_highlight_current_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_highlight_current_line_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_highlight_all_occurrences")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_highlight_all_occurrences_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_draw_control_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_control_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_tabs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "set_draw_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_drawing_spaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "get_menu")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "is_menu_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTEDIT to "menu_option")
}

private fun registerEngineTypeMethodForTextLine(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "add_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "add_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "resize_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "set_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_object_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_line_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_line_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_line_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "get_line_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "draw_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTLINE to "hit_test")
}

private fun registerEngineTypeMethodForTextMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_horizontal_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_vertical_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_line_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_autowrap_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_pixel_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_curve_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_curve_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "set_uppercase")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTMESH to "is_uppercase")
}

private fun registerEngineTypeMethodForTextParagraph(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_dropcap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "clear_dropcap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "add_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "add_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "resize_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_break_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_break_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_justification_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_justification_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_text_overrun_behavior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_non_wrapped_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_dropcap_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "set_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_max_lines_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_object_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_line_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_dropcap_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "get_dropcap_lines")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw_line_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw_dropcap")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "draw_dropcap_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTPARAGRAPH to "hit_test")
}

private fun registerEngineTypeMethodForTextServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "get_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "load_support_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "get_support_data_filename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "get_support_data_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "save_support_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "is_locale_right_to_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "name_to_tag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "tag_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "create_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_face_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to
      "font_set_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to
      "font_is_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_is_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_is_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_size_cache_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_clear_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_remove_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_texture_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_clear_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_remove_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_clear_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_remove_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_texture_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_contours")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_kerning_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_clear_kerning_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_remove_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_glyph_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_has_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_supported_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_render_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_render_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_draw_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_draw_glyph_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_is_language_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to
      "font_remove_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_language_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_is_script_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_remove_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_script_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_supported_feature_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_supported_variation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_get_global_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "font_set_global_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "get_hex_code_box_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "draw_hex_code_box")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "create_shaped_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_inferred_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_add_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_add_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_resize_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_get_span_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_get_span_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_set_span_update_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_substr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_fit_to_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_is_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_sort_logical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_line_breaks_adv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_line_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_word_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_trim_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_ellipsis_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_ellipsis_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_ellipsis_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_overrun_trim_to_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_object_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_carets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_hit_test_grapheme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_hit_test_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_get_grapheme_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_next_grapheme_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_prev_grapheme_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "shaped_text_draw_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to
      "shaped_text_get_dominant_direction_in_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "format_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "parse_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "percent_sign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "string_get_word_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "is_confusable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "spoof_check")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "strip_diacritics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "is_valid_identifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "string_to_upper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "string_to_lower")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVER to "parse_structured_text")
}

private fun registerEngineTypeMethodForTextServerAdvanced(): Unit {
}

private fun registerEngineTypeMethodForTextServerDummy(): Unit {
}

private fun registerEngineTypeMethodForTextServerExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_has_feature")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_get_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_free_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_has")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_load_support_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_get_support_data_filename")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_get_support_data_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_save_support_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_is_locale_right_to_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_name_to_tag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_tag_to_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_create_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_data_ptr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_face_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_face_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_style")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_style_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_weight")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_antialiasing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_generate_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_is_multichannel_signed_distance_field")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_msdf_pixel_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_msdf_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_fixed_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_is_allow_system_fallback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_is_force_autohinter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_hinting")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_subpixel_positioning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_embolden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_variation_coordinates")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_size_cache_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_clear_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_remove_size_cache")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_texture_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_clear_textures")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_remove_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_texture_image")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_texture_offsets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_clear_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_remove_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_glyph_advance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_glyph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_glyph_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_glyph_uv_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_glyph_texture_idx")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_texture_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_glyph_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_contours")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_kerning_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_clear_kerning_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_remove_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_set_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_kerning")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_glyph_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_has_char")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_get_supported_chars")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_render_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_render_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_draw_glyph")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_draw_glyph_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_is_language_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_remove_language_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_language_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_font_is_script_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_remove_script_support_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_script_support_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_opentype_feature_overrides")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_supported_feature_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_supported_variation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_get_global_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_font_set_global_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_get_hex_code_box_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_draw_hex_code_box")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_create_shaped_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_set_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_inferred_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_set_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_set_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_custom_punctuation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_set_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_orientation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_set_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_preserve_invalid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_set_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_preserve_control")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_set_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_spacing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_add_string")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_add_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_resize_object")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_get_span_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_get_span_meta")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_set_span_update_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_substr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_fit_to_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_tab_align")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_update_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_update_justification_ops")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_is_ready")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_sort_logical")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_line_breaks_adv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_line_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_word_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_trim_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_ellipsis_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_ellipsis_glyph_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_ellipsis_glyphs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_overrun_trim_to_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_objects")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_object_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_ascent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_descent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_underline_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_underline_thickness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_dominant_direction_in_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_carets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_get_selection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_hit_test_grapheme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_hit_test_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_shaped_text_draw_outline")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_get_grapheme_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_next_grapheme_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to
      "_shaped_text_prev_grapheme_pos")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_format_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_parse_number")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_percent_sign")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_strip_diacritics")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_is_valid_identifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_string_get_word_breaks")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_is_confusable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_spoof_check")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_string_to_upper")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_string_to_lower")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_parse_structured_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTSERVEREXTENSION to "_cleanup")
}

private fun registerEngineTypeMethodForTexture(): Unit {
}

private fun registerEngineTypeMethodForTexture2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_is_pixel_opaque")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_has_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "_draw_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "has_alpha")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "draw_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "draw_rect_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE2D to "get_image")
}

private fun registerEngineTypeMethodForTexture2DArray(): Unit {
}

private fun registerEngineTypeMethodForTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "_get_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "get_depth")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURE3D to "get_data")
}

private fun registerEngineTypeMethodForTextureButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_texture_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_texture_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_texture_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_texture_focused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_click_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_ignore_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_texture_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_texture_hover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_texture_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_texture_focused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_click_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_ignore_texture_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREBUTTON to "get_stretch_mode")
}

private fun registerEngineTypeMethodForTextureLayered(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_layered_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "_get_layer_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_format")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_layered_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "has_mipmaps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURELAYERED to "get_layer_data")
}

private fun registerEngineTypeMethodForTextureProgressBar(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_under_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_under_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_progress_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_progress_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_over_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_over_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_fill_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_tint_under")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_tint_under")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_tint_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_tint_progress")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_tint_over")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_tint_over")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_texture_progress_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_texture_progress_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_radial_initial_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_radial_initial_angle")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_radial_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_radial_center_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_fill_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_fill_degrees")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_stretch_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "set_nine_patch_stretch")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTUREPROGRESSBAR to "get_nine_patch_stretch")
}

private fun registerEngineTypeMethodForTextureRect(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_expand_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "get_expand_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "is_flipped_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "is_flipped_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "set_stretch_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TEXTURERECT to "get_stretch_mode")
}

private fun registerEngineTypeMethodForTheme(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_icon_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_stylebox_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_size_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_font_size_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_color_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_constant_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_default_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_default_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_default_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_default_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_default_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_default_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "has_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "rename_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_theme_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_theme_item_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "set_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "is_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_type_variation_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_type_variation_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "add_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "remove_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "get_type_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "merge_with")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THEME to "clear")
}

private fun registerEngineTypeMethodForThread(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_THREAD to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THREAD to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THREAD to "is_started")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THREAD to "is_alive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_THREAD to "wait_to_finish")
}

private fun registerEngineTypeMethodForTileData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_flip_h")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_flip_v")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_transpose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_transpose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_texture_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_y_sort_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_y_sort_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_occluder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_constant_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_constant_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_collision_polygons_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_collision_polygons_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "add_collision_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "remove_collision_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_collision_polygon_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_collision_polygon_points")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_collision_polygon_one_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "is_collision_polygon_one_way")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_collision_polygon_one_way_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_collision_polygon_one_way_margin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_terrain_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_terrain_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_terrain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_terrain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_terrain_peering_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_terrain_peering_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_navigation_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_probability")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_probability")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_custom_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "set_custom_data_by_layer_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEDATA to "get_custom_data_by_layer_id")
}

private fun registerEngineTypeMethodForTileMap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_use_tile_data_runtime_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "_tile_data_runtime_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_tileset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_tileset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_quadrant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_quadrant_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_layers_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "add_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "move_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "remove_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_layer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_layer_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_layer_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_y_sort_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_layer_y_sort_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_y_sort_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_layer_y_sort_origin")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_layer_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_layer_z_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_animatable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "is_collision_animatable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_collision_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_collision_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_navigation_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_navigation_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "erase_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_source_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_atlas_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_alternative_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_cell_tile_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_coords_for_body_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "map_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cells_terrain_connect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "set_cells_terrain_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "fix_invalid_tiles")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "clear_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "force_update")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_surrounding_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_used_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_used_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "map_to_local")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "local_to_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAP to "get_neighbor_cell")
}

private fun registerEngineTypeMethodForTileMapPattern(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "set_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "has_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "remove_cell")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "get_cell_source_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "get_cell_atlas_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "get_cell_alternative_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "get_used_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILEMAPPATTERN to "is_empty")
}

private fun registerEngineTypeMethodForTileSet(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_next_source_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_source_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_source_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_source_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "has_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_tile_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_tile_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_tile_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_tile_layout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_tile_offset_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_tile_offset_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_tile_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_tile_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_uv_clipping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "is_uv_clipping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_occlusion_layers_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_occlusion_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_occlusion_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_occlusion_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_occlusion_layer_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_occlusion_layer_light_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_occlusion_layer_sdf_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_occlusion_layer_sdf_collision")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_physics_layers_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_physics_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_physics_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_physics_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_physics_layer_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_physics_layer_collision_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_physics_layer_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_physics_layer_collision_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_physics_layer_physics_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_physics_layer_physics_material")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_terrain_sets_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_terrain_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_terrain_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_terrain_set")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_terrain_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_terrain_set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_terrains_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_terrain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_terrain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_terrain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_terrain_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_terrain_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_terrain_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_terrain_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_navigation_layers_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_navigation_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_navigation_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_navigation_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_navigation_layer_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_navigation_layer_layers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_custom_data_layers_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_custom_data_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "move_custom_data_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_custom_data_layer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_custom_data_layer_by_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_custom_data_layer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_custom_data_layer_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_custom_data_layer_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_custom_data_layer_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_source_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_source_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "has_source_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_source_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_coords_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_coords_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "has_coords_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_coords_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "set_alternative_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_alternative_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "has_alternative_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_alternative_level_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "map_tile_proxy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "cleanup_invalid_tile_proxies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "clear_tile_proxies")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "add_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "remove_pattern")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESET to "get_patterns_count")
}

private fun registerEngineTypeMethodForTileSetAtlasSource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_margins")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_separation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_separation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_texture_region_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_texture_region_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_use_texture_padding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_use_texture_padding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "create_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "remove_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "move_tile_in_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_size_in_atlas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "has_room_for_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_tiles_to_be_removed_on_change")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_at_coords")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_tile_animation_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_animation_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "set_tile_animation_separation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_tile_animation_separation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_tile_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_animation_speed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "set_tile_animation_frames_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_tile_animation_frames_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "set_tile_animation_frame_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_tile_animation_frame_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_tile_animation_total_duration")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "create_alternative_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "remove_alternative_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "set_alternative_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_next_alternative_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_atlas_grid_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_tile_texture_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to "get_runtime_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETATLASSOURCE to
      "get_runtime_tile_texture_region")
}

private fun registerEngineTypeMethodForTileSetScenesCollectionSource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "get_scene_tiles_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to "get_scene_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to "has_scene_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to "create_scene_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to "set_scene_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "set_scene_tile_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "get_scene_tile_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "set_scene_tile_display_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "get_scene_tile_display_placeholder")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to "remove_scene_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSCENESCOLLECTIONSOURCE to
      "get_next_scene_tile_id")
}

private fun registerEngineTypeMethodForTileSetSource(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "get_tiles_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "get_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "has_tile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "get_alternative_tiles_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "get_alternative_tile_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TILESETSOURCE to "has_alternative_tile")
}

private fun registerEngineTypeMethodForTimer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_wait_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_wait_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_one_shot")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_autostart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "has_autostart")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "start")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "is_stopped")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_time_left")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "set_timer_process_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TIMER to "get_timer_process_callback")
}

private fun registerEngineTypeMethodForTorusMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "set_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "get_inner_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "set_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "get_outer_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "set_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "get_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "set_ring_segments")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TORUSMESH to "get_ring_segments")
}

private fun registerEngineTypeMethodForTouchScreenButton(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_texture_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_texture_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_texture_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_bitmask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_shape")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_shape_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_shape_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_shape_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "get_visibility_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "set_passby_press")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_passby_press_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TOUCHSCREENBUTTON to "is_pressed")
}

private fun registerEngineTypeMethodForTranslation(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "_get_plural_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "_get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "set_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_locale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "add_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "add_plural_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_plural_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "erase_message")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_translated_message_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TRANSLATION to "get_message_count")
}

private fun registerEngineTypeMethodForTree(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "clear")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "create_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_custom_minimum_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_expand_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_clip_content")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_column_expanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_column_clipping_content")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_expand_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_hide_root")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_root_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_next_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_selected_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_pressed_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_select_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "deselect_all")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_columns")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_edited")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_edited_column")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "edit_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_custom_popup_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_item_area_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_item_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_drop_section_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_button_id_at_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "ensure_cursor_is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_titles_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "are_column_titles_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_title_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_title_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_column_title_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_column_title_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_scroll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "scroll_to_item")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_h_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_h_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_v_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_v_scroll_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_hide_folding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_folding_hidden")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_enable_recursive_folding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "is_recursive_folding_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_drop_mode_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_drop_mode_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_allow_rmb_select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "set_allow_reselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREE to "get_allow_reselect")
}

private fun registerEngineTypeMethodForTreeItem(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_cell_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_cell_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_indeterminate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_checked")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_indeterminate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "propagate_check")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_text_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_structured_text_bidi_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to
      "set_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to
      "get_structured_text_bidi_override_options")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_language")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_suffix")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_region")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_max_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_max_width")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_icon_modulate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_range_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_range_config")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_metadata")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_collapsed_recursive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_any_collapsed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "uncollapse_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_minimum_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_minimum_height")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_selectable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_selected")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "select")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "deselect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_editable")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "clear_custom_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "clear_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_custom_bg_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_custom_as_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_custom_set_as_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "add_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button_by_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "erase_button")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_button_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_button_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_button_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_tooltip_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_text_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_text_alignment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_expand_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_expand_right")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "set_disable_folding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "is_folding_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "create_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_tree")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_next")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_prev")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_first_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_next_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_prev_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_child_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_children")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "get_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "move_before")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "move_after")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "remove_child")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TREEITEM to "call_recursive")
}

private fun registerEngineTypeMethodForTriangleMesh(): Unit {
}

private fun registerEngineTypeMethodForTubeTrailMesh(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_radial_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_radial_steps")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_sections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_section_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_section_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_section_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_section_rings")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_cap_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "is_cap_top")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_cap_bottom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "is_cap_bottom")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "set_curve")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TUBETRAILMESH to "get_curve")
}

private fun registerEngineTypeMethodForTween(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "tween_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "tween_interval")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "tween_callback")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "tween_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "custom_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "pause")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "kill")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "get_total_elapsed_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "is_running")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "is_valid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "bind_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_process_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_pause_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_parallel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_loops")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_speed_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_trans")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "set_ease")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "parallel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "chain")
  TypeManager.engineTypeMethod.add(ENGINECLASS_TWEEN to "interpolate_value")
}

private fun registerEngineTypeMethodForTweener(): Unit {
}

private fun registerEngineTypeMethodForUDPServer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "listen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "is_connection_available")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "get_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "is_listening")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "take_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "set_max_pending_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UDPSERVER to "get_max_pending_connections")
}

private fun registerEngineTypeMethodForUPNP(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_device_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "add_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "remove_device")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "clear_devices")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_gateway")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "discover")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "query_external_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "add_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "delete_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_multicast_if")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_discover_multicast_if")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "get_discover_local_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "set_discover_ipv6")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNP to "is_discover_ipv6")
}

private fun registerEngineTypeMethodForUPNPDevice(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "is_valid_gateway")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "query_external_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "add_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "delete_port_mapping")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_description_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_description_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_control_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_control_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_service_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_our_addr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_our_addr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "set_igd_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UPNPDEVICE to "get_igd_status")
}

private fun registerEngineTypeMethodForUndoRedo(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "create_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "commit_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "is_committing_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_method")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_property")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_do_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "add_undo_reference")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "start_force_keep_in_merge_ends")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "end_force_keep_in_merge_ends")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_history_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_current_action")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_action_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "clear_history")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_current_action_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "has_undo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "has_redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "get_version")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "redo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_UNDOREDO to "undo")
}

private fun registerEngineTypeMethodForUniformSetCacheRD(): Unit {
}

private fun registerEngineTypeMethodForVBoxContainer(): Unit {
}

private fun registerEngineTypeMethodForVFlowContainer(): Unit {
}

private fun registerEngineTypeMethodForVScrollBar(): Unit {
}

private fun registerEngineTypeMethodForVSeparator(): Unit {
}

private fun registerEngineTypeMethodForVSlider(): Unit {
}

private fun registerEngineTypeMethodForVSplitContainer(): Unit {
}

private fun registerEngineTypeMethodForVehicleBody3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "set_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "get_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "set_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "get_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "set_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEBODY3D to "get_steering")
}

private fun registerEngineTypeMethodForVehicleWheel3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_radius")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_suspension_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_suspension_rest_length")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_suspension_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_suspension_travel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_suspension_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_suspension_stiffness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_suspension_max_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_suspension_max_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_damping_compression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_damping_compression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_damping_relaxation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_damping_relaxation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_use_as_traction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "is_used_as_traction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_use_as_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "is_used_as_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_friction_slip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_friction_slip")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "is_in_contact")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_contact_body")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_roll_influence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_roll_influence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_skidinfo")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_rpm")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_engine_force")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_brake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "set_steering")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VEHICLEWHEEL3D to "get_steering")
}

private fun registerEngineTypeMethodForVideoStream(): Unit {
}

private fun registerEngineTypeMethodForVideoStreamPlayer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "play")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "stop")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "is_playing")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "is_paused")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_volume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_volume")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_volume_db")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_audio_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_audio_track")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_stream_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_stream_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_stream_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "has_autoplay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "has_expand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_buffering_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_buffering_msec")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "set_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_bus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMPLAYER to "get_video_texture")
}

private fun registerEngineTypeMethodForVideoStreamTheora(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMTHEORA to "set_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIDEOSTREAMTHEORA to "get_file")
}

private fun registerEngineTypeMethodForViewport(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "find_world_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_global_canvas_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_final_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_screen_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_visible_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "has_transparent_background")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_msaa_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_msaa_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_msaa_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_msaa_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_screen_space_aa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_screen_space_aa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_taa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_taa")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_debanding")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_occlusion_culling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_debug_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_render_info")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_physics_object_picking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_physics_object_picking")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_viewport_rid")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "push_text_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "push_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "push_unhandled_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_camera_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_as_audio_listener_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_audio_listener_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_mouse_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "warp_mouse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_get_drag_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_is_dragging")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_is_drag_successful")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_release_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "gui_get_focus_owner")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_disable_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_input_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_positional_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_positional_shadow_atlas_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_positional_shadow_atlas_16_bits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_positional_shadow_atlas_16_bits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_snap_controls_to_pixels")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_snap_controls_to_pixels_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_snap_2d_transforms_to_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_snap_2d_transforms_to_pixel_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_snap_2d_vertices_to_pixel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_snap_2d_vertices_to_pixel_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to
      "set_positional_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to
      "get_positional_shadow_atlas_quadrant_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_input_as_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_input_handled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_handle_input_locally")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_handling_input_locally")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_default_canvas_item_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_default_canvas_item_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_embedding_subwindows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_embedding_subwindows")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_canvas_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_canvas_cull_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_canvas_cull_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_canvas_cull_mask_bit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_default_canvas_item_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_default_canvas_item_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_sdf_oversize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_sdf_oversize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_sdf_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_sdf_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_mesh_lod_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_mesh_lod_threshold")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "find_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_own_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_own_world_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_camera_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_as_audio_listener_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_audio_listener_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_disable_3d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_3d_disabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_use_xr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "is_using_xr")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_scaling_3d_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_scaling_3d_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_scaling_3d_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_scaling_3d_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_fsr_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_fsr_sharpness")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_texture_mipmap_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_texture_mipmap_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_vrs_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_vrs_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "set_vrs_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORT to "get_vrs_texture")
}

private fun registerEngineTypeMethodForViewportTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTTEXTURE to "set_viewport_path_in_scene")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VIEWPORTTEXTURE to "get_viewport_path_in_scene")
}

private fun registerEngineTypeMethodForVisibleOnScreenEnabler2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER2D to "set_enable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER2D to "get_enable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER2D to "set_enable_node_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER2D to "get_enable_node_path")
}

private fun registerEngineTypeMethodForVisibleOnScreenEnabler3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER3D to "set_enable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER3D to "get_enable_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER3D to "set_enable_node_path")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENENABLER3D to "get_enable_node_path")
}

private fun registerEngineTypeMethodForVisibleOnScreenNotifier2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENNOTIFIER2D to "set_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENNOTIFIER2D to "get_rect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENNOTIFIER2D to "is_on_screen")
}

private fun registerEngineTypeMethodForVisibleOnScreenNotifier3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENNOTIFIER3D to "set_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISIBLEONSCREENNOTIFIER3D to "is_on_screen")
}

private fun registerEngineTypeMethodForVisualInstance3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "_get_aabb")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "set_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_base")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_instance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "set_layer_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_layer_mask")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "set_layer_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_layer_mask_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "set_sorting_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_sorting_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "set_sorting_use_aabb_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "is_sorting_use_aabb_center")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALINSTANCE3D to "get_aabb")
}

private fun registerEngineTypeMethodForVisualShader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "add_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_list")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_valid_node_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "remove_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "replace_node")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "is_node_connection")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "can_connect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "connect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "disconnect_nodes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "connect_nodes_forced")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_node_connections")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "set_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "get_graph_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "add_varying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "remove_varying")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADER to "has_varying")
}

private fun registerEngineTypeMethodForVisualShaderNode(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_output_port_for_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_output_port_for_preview")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_input_port_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_input_port_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to
      "remove_input_port_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "clear_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "set_default_input_values")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODE to "get_default_input_values")
}

private fun registerEngineTypeMethodForVisualShaderNodeBillboard(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBILLBOARD to "set_billboard_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBILLBOARD to "get_billboard_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBILLBOARD to
      "set_keep_scale_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBILLBOARD to "is_keep_scale_enabled")
}

private fun registerEngineTypeMethodForVisualShaderNodeBooleanConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeBooleanParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANPARAMETER to
      "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEBOOLEANPARAMETER to
      "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeClamp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECLAMP to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECLAMP to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLOROP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLOROP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeColorParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORPARAMETER to
      "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOLORPARAMETER to
      "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeComment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMMENT to "set_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMMENT to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMMENT to "set_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMMENT to "get_description")
}

private fun registerEngineTypeMethodForVisualShaderNodeCompare(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_comparison_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_comparison_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "set_condition")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECOMPARE to "get_condition")
}

private fun registerEngineTypeMethodForVisualShaderNodeConstant(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeCubemap(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_cube_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_cube_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "set_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUBEMAP to "get_texture_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeCubemapParameter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeCurveTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECURVETEXTURE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECURVETEXTURE to "get_texture")
}

private fun registerEngineTypeMethodForVisualShaderNodeCurveXYZTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECURVEXYZTEXTURE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECURVEXYZTEXTURE to "get_texture")
}

private fun registerEngineTypeMethodForVisualShaderNodeCustom(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_category")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_return_icon_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_input_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_output_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_func_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_get_global_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_is_highend")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODECUSTOM to "_is_available")
}

private fun registerEngineTypeMethodForVisualShaderNodeDerivativeFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEDERIVATIVEFUNC to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEDERIVATIVEFUNC to "get_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEDERIVATIVEFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEDERIVATIVEFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeDeterminant(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeDistanceFade(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeDotProduct(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeExpression(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEEXPRESSION to "set_expression")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEEXPRESSION to "get_expression")
}

private fun registerEngineTypeMethodForVisualShaderNodeFaceForward(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeFloatConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeFloatFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeFloatOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATOP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATOP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeFloatParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "set_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "get_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "set_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to
      "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEFLOATPARAMETER to
      "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeFresnel(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeGlobalExpression(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeGroupBase(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_inputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_outputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_outputs")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "is_valid_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "add_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "remove_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_input_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "has_input_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "clear_input_ports")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "add_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "remove_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "get_output_port_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "has_output_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "clear_output_ports")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_input_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_input_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_output_port_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to "set_output_port_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to
      "get_free_input_port_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEGROUPBASE to
      "get_free_output_port_id")
}

private fun registerEngineTypeMethodForVisualShaderNodeIf(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeInput(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "set_input_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "get_input_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINPUT to "get_input_real_name")
}

private fun registerEngineTypeMethodForVisualShaderNodeIntConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeIntFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeIntOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTOP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTOP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeIntParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "set_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "get_hint")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "set_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "get_min")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "set_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "get_max")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "set_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "get_step")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEINTPARAMETER to "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeIs(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEIS to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEIS to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeLinearSceneDepth(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeMix(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEMIX to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEMIX to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeMultiplyAdd(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEMULTIPLYADD to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEMULTIPLYADD to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeOuterProduct(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeOutput(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETER to "set_parameter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETER to "get_parameter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETER to "set_qualifier")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETER to "get_qualifier")
}

private fun registerEngineTypeMethodForVisualShaderNodeParameterRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETERREF to "set_parameter_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARAMETERREF to "get_parameter_name")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleAccelerator(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEACCELERATOR to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEACCELERATOR to "get_mode")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleBoxEmitter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleConeVelocity(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleEmit(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEEMIT to "set_flags")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEEMIT to "get_flags")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleEmitter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEEMITTER to "set_mode_2d")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEEMITTER to "is_mode_2d")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleMeshEmitter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to "set_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to "get_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to
      "set_use_all_surfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to
      "is_use_all_surfaces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to
      "set_surface_index")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMESHEMITTER to
      "get_surface_index")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleMultiplyByAxisAngle(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMULTIPLYBYAXISANGLE to
      "set_degrees_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLEMULTIPLYBYAXISANGLE to
      "is_degrees_mode")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleOutput(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleRandomness(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLERANDOMNESS to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEPARTICLERANDOMNESS to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleRingEmitter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeParticleSphereEmitter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeProximityFade(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeRandomRange(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeRemap(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeResizableBase(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODERESIZABLEBASE to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODERESIZABLEBASE to "get_size")
}

private fun registerEngineTypeMethodForVisualShaderNodeSDFRaymarch(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeSDFToScreenUV(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeSample3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESAMPLE3D to "set_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESAMPLE3D to "get_source")
}

private fun registerEngineTypeMethodForVisualShaderNodeScreenUVToSDF(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeSmoothStep(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESMOOTHSTEP to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESMOOTHSTEP to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeStep(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESTEP to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESTEP to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeSwitch(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESWITCH to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODESWITCH to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_source")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "set_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE to "get_texture_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture2DArray(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE2DARRAY to
      "set_texture_array")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE2DARRAY to
      "get_texture_array")
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture2DArrayParameter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture2DParameter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE3D to "set_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTURE3D to "get_texture")
}

private fun registerEngineTypeMethodForVisualShaderNodeTexture3DParameter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "set_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "get_texture_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "set_color_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "get_color_default")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "set_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "get_texture_filter")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "set_texture_repeat")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETEXTUREPARAMETER to
      "get_texture_repeat")
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureParameterTriplanar(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureSDF(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTextureSDFNormal(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformCompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformDecompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMOP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMOP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMPARAMETER to
      "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMPARAMETER to
      "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeTransformVecMult(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMVECMULT to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODETRANSFORMVECMULT to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeUIntConstant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTCONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTCONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeUIntFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeUIntOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTOP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTOP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeUIntParameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTPARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTPARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTPARAMETER to "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUINTPARAMETER to "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeUVFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUVFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEUVFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeUVPolarCoord(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVarying(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVARYING to "set_varying_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVARYING to "get_varying_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVARYING to "set_varying_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVARYING to "get_varying_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeVaryingGetter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVaryingSetter(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVec2Constant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2CONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2CONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec2Parameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2PARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2PARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2PARAMETER to "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC2PARAMETER to "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec3Constant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3CONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3CONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec3Parameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3PARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3PARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3PARAMETER to "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC3PARAMETER to "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec4Constant(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4CONSTANT to "set_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4CONSTANT to "get_constant")
}

private fun registerEngineTypeMethodForVisualShaderNodeVec4Parameter(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4PARAMETER to
      "set_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4PARAMETER to
      "is_default_value_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4PARAMETER to "set_default_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVEC4PARAMETER to "get_default_value")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorBase(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORBASE to "set_op_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORBASE to "get_op_type")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorCompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorDecompose(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorDistance(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorFunc(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORFUNC to "set_function")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTORFUNC to "get_function")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorLen(): Unit {
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorOp(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTOROP to "set_operator")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VISUALSHADERNODEVECTOROP to "get_operator")
}

private fun registerEngineTypeMethodForVisualShaderNodeVectorRefract(): Unit {
}

private fun registerEngineTypeMethodForVoxelGI(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "set_probe_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "get_probe_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "set_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "get_subdiv")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "set_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "get_extents")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "get_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "bake")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGI to "debug_bake")
}

private fun registerEngineTypeMethodForVoxelGIData(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "allocate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_bounds")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_octree_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_to_cell_xform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_octree_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_data_cells")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_level_counts")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_dynamic_range")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_energy")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_normal_bias")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "get_propagation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "is_interior")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "set_use_two_bounces")
  TypeManager.engineTypeMethod.add(ENGINECLASS_VOXELGIDATA to "is_using_two_bounces")
}

private fun registerEngineTypeMethodForWeakRef(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEAKREF to "get_ref")
}

private fun registerEngineTypeMethodForWebRTCDataChannel(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "was_string_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "set_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_ready_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "is_ordered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_max_packet_life_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_max_retransmits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_protocol")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "is_negotiated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNEL to "get_buffered_amount")
}

private fun registerEngineTypeMethodForWebRTCDataChannelExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_put_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to
      "_get_available_packet_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_max_packet_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_set_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_write_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_was_string_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_ready_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_label")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_is_ordered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to
      "_get_max_packet_life_time")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_max_retransmits")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_protocol")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_is_negotiated")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCDATACHANNELEXTENSION to "_get_buffered_amount")
}

private fun registerEngineTypeMethodForWebRTCMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "create_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "create_client")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "create_mesh")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "add_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "remove_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "has_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "get_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCMULTIPLAYERPEER to "get_peers")
}

private fun registerEngineTypeMethodForWebRTCPeerConnection(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "set_default_extension")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "create_data_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "create_offer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "set_local_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "set_remote_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "add_ice_candidate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "get_connection_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "get_gathering_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTION to "get_signaling_state")
}

private fun registerEngineTypeMethodForWebRTCPeerConnectionExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_get_connection_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_get_gathering_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_get_signaling_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_create_data_channel")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to "_create_offer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_set_remote_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_set_local_description")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to
      "_add_ice_candidate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to "_poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBRTCPEERCONNECTIONEXTENSION to "_close")
}

private fun registerEngineTypeMethodForWebSocketMultiplayerPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "create_client")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "create_server")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_peer")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_peer_address")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_peer_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "get_supported_protocols")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "set_supported_protocols")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_handshake_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "set_handshake_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "get_inbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "set_inbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "get_outbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to
      "set_outbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_handshake_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "set_handshake_timeout")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "set_max_queued_packets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETMULTIPLAYERPEER to "get_max_queued_packets")
}

private fun registerEngineTypeMethodForWebSocketPeer(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "connect_to_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "accept_stream")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "send")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "send_text")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "was_string_packet")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "poll")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_connected_host")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_connected_port")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_selected_protocol")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_requested_url")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_no_delay")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to
      "get_current_outbound_buffered_amount")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_ready_state")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_close_code")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_close_reason")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_supported_protocols")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_supported_protocols")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_handshake_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_handshake_headers")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_inbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_inbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_outbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_outbound_buffer_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "set_max_queued_packets")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBSOCKETPEER to "get_max_queued_packets")
}

private fun registerEngineTypeMethodForWebXRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "is_session_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_session_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_session_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_required_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_required_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "set_optional_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_optional_features")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_reference_space_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to
      "set_requested_reference_space_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to
      "get_requested_reference_space_types")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "is_input_source_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_input_source_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_input_source_target_ray_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WEBXRINTERFACE to "get_visibility_state")
}

private fun registerEngineTypeMethodForWindow(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_title")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_initial_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_initial_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_current_screen")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "reset_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_position_with_decorations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_size_with_decorations")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_max_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_min_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_flag")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_maximize_allowed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "request_attention")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "move_to_foreground")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_visible")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "hide")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "show")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_transient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_transient")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_exclusive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_exclusive")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "can_draw")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "grab_focus")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_ime_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_ime_position")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_embedded")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_contents_minimum_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_content_scale_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_content_scale_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_content_scale_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_content_scale_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_content_scale_aspect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_content_scale_aspect")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_content_scale_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_content_scale_factor")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_use_font_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_using_font_oversampling")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_mouse_passthrough_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_mouse_passthrough_polygon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_wrap_controls")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_wrapping_controls")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "child_controls_changed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_theme_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_type_variation")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "begin_bulk_theme_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "end_bulk_theme_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "add_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "remove_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_icon_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_stylebox_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_font_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_font_size_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_color_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_constant_override")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_icon")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_stylebox")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_color")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "has_theme_constant")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_default_base_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_default_font")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_theme_default_font_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_layout_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "get_layout_direction")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_layout_rtl")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "set_auto_translate")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "is_auto_translating")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "popup")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "popup_on_parent")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "popup_centered_ratio")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "popup_centered")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WINDOW to "popup_centered_clamped")
}

private fun registerEngineTypeMethodForWorld2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_canvas")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD2D to "get_direct_space_state")
}

private fun registerEngineTypeMethodForWorld3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_space")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_navigation_map")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_scenario")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "set_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_fallback_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLD3D to "get_direct_space_state")
}

private fun registerEngineTypeMethodForWorldBoundaryShape2D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE2D to "set_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE2D to "get_normal")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE2D to "set_distance")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE2D to "get_distance")
}

private fun registerEngineTypeMethodForWorldBoundaryShape3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE3D to "set_plane")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDBOUNDARYSHAPE3D to "get_plane")
}

private fun registerEngineTypeMethodForWorldEnvironment(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "set_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "get_environment")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "set_camera_attributes")
  TypeManager.engineTypeMethod.add(ENGINECLASS_WORLDENVIRONMENT to "get_camera_attributes")
}

private fun registerEngineTypeMethodForX509Certificate(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_X509CERTIFICATE to "save")
  TypeManager.engineTypeMethod.add(ENGINECLASS_X509CERTIFICATE to "load")
}

private fun registerEngineTypeMethodForXMLParser(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "read")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_node_offset")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_attribute_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "has_attribute")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_named_attribute_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_named_attribute_value_safe")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "is_empty")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "get_current_line")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "skip_section")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "seek")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XMLPARSER to "open_buffer")
}

private fun registerEngineTypeMethodForXRAnchor3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRANCHOR3D to "get_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRANCHOR3D to "get_plane")
}

private fun registerEngineTypeMethodForXRCamera3D(): Unit {
}

private fun registerEngineTypeMethodForXRController3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRCONTROLLER3D to "is_button_pressed")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRCONTROLLER3D to "get_value")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRCONTROLLER3D to "get_axis")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRCONTROLLER3D to "get_tracker_hand")
}

private fun registerEngineTypeMethodForXRInterface(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_capabilities")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "is_primary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "set_primary")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "is_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "uninitialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_tracking_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_render_target_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_view_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "trigger_haptic_pulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "supports_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "set_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_play_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "set_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "is_passthrough_supported")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "is_passthrough_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "start_passthrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "stop_passthrough")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_transform_for_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACE to "get_projection_for_view")
}

private fun registerEngineTypeMethodForXRInterfaceExtension(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_capabilities")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_is_initialized")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_initialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_uninitialize")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_supports_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_set_play_area_mode")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_play_area")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_render_target_size")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_view_count")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_camera_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_transform_for_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_projection_for_view")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_vrs_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_process")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_pre_render")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_pre_draw_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_post_draw_viewport")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_end_frame")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to
      "_get_suggested_tracker_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_suggested_pose_names")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_tracking_status")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_trigger_haptic_pulse")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to
      "_get_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to
      "_set_anchor_detection_is_enabled")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_camera_feed_id")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_depth_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "_get_velocity_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "get_color_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "get_depth_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "get_velocity_texture")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "add_blit")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRINTERFACEEXTENSION to "get_render_target_texture")
}

private fun registerEngineTypeMethodForXRNode3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "set_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "get_tracker")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "set_pose_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "get_pose_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "get_is_active")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "get_has_tracking_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "get_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRNODE3D to "trigger_haptic_pulse")
}

private fun registerEngineTypeMethodForXROrigin3D(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRORIGIN3D to "set_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRORIGIN3D to "get_world_scale")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRORIGIN3D to "set_current")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRORIGIN3D to "is_current")
}

private fun registerEngineTypeMethodForXRPose(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_has_tracking_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_has_tracking_data")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_adjusted_transform")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_linear_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_angular_velocity")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "set_tracking_confidence")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSE to "get_tracking_confidence")
}

private fun registerEngineTypeMethodForXRPositionalTracker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_tracker_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_tracker_type")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_tracker_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_tracker_name")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_tracker_desc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_tracker_desc")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_tracker_profile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_tracker_profile")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_tracker_hand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_tracker_hand")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "has_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "invalidate_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_pose")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "get_input")
  TypeManager.engineTypeMethod.add(ENGINECLASS_XRPOSITIONALTRACKER to "set_input")
}

private fun registerEngineTypeMethodForZIPPacker(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPPACKER to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPPACKER to "start_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPPACKER to "write_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPPACKER to "close_file")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPPACKER to "close")
}

private fun registerEngineTypeMethodForZIPReader(): Unit {
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPREADER to "open")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPREADER to "close")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPREADER to "get_files")
  TypeManager.engineTypeMethod.add(ENGINECLASS_ZIPREADER to "read_file")
}

public fun registerEngineTypes(): Unit {
  TypeManager.registerEngineType("Performance", Performance::class) { Performance }
  TypeManager.registerSingleton("Performance")
  TypeManager.registerEngineType("TextServerManager", TextServerManager::class) { TextServerManager
      }
  TypeManager.registerSingleton("TextServerManager")
  TypeManager.registerEngineType("PhysicsServer2DManager", PhysicsServer2DManager::class) {
      PhysicsServer2DManager }
  TypeManager.registerSingleton("PhysicsServer2DManager")
  TypeManager.registerEngineType("PhysicsServer3DManager", PhysicsServer3DManager::class) {
      PhysicsServer3DManager }
  TypeManager.registerSingleton("PhysicsServer3DManager")
  TypeManager.registerEngineType("NavigationMeshGenerator", NavigationMeshGenerator::class) {
      NavigationMeshGenerator }
  TypeManager.registerSingleton("NavigationMeshGenerator")
  TypeManager.registerEngineType("ProjectSettings", ProjectSettings::class) { ProjectSettings }
  TypeManager.registerSingleton("ProjectSettings")
  TypeManager.registerEngineType("IP", IP::class) { IP }
  TypeManager.registerSingleton("IP")
  TypeManager.registerEngineType("Geometry2D", Geometry2D::class) { Geometry2D }
  TypeManager.registerSingleton("Geometry2D")
  TypeManager.registerEngineType("Geometry3D", Geometry3D::class) { Geometry3D }
  TypeManager.registerSingleton("Geometry3D")
  TypeManager.registerEngineType("ResourceLoader", ResourceLoader::class) { ResourceLoader }
  TypeManager.registerSingleton("ResourceLoader")
  TypeManager.registerEngineType("ResourceSaver", ResourceSaver::class) { ResourceSaver }
  TypeManager.registerSingleton("ResourceSaver")
  TypeManager.registerEngineType("OS", OS::class) { OS }
  TypeManager.registerSingleton("OS")
  TypeManager.registerEngineType("Engine", Engine::class) { Engine }
  TypeManager.registerSingleton("Engine")
  TypeManager.registerEngineType("ClassDB", ClassDB::class) { ClassDB }
  TypeManager.registerSingleton("ClassDB")
  TypeManager.registerEngineType("Marshalls", Marshalls::class) { Marshalls }
  TypeManager.registerSingleton("Marshalls")
  TypeManager.registerEngineType("TranslationServer", TranslationServer::class) { TranslationServer
      }
  TypeManager.registerSingleton("TranslationServer")
  TypeManager.registerEngineType("Input", Input::class) { Input }
  TypeManager.registerSingleton("Input")
  TypeManager.registerEngineType("InputMap", InputMap::class) { InputMap }
  TypeManager.registerSingleton("InputMap")
  TypeManager.registerEngineType("EngineDebugger", EngineDebugger::class) { EngineDebugger }
  TypeManager.registerSingleton("EngineDebugger")
  TypeManager.registerEngineType("Time", Time::class) { Time }
  TypeManager.registerSingleton("Time")
  TypeManager.registerEngineType("GDExtensionManager", GDExtensionManager::class) {
      GDExtensionManager }
  TypeManager.registerSingleton("GDExtensionManager")
  TypeManager.registerEngineType("ResourceUID", ResourceUID::class) { ResourceUID }
  TypeManager.registerSingleton("ResourceUID")
  TypeManager.registerEngineType("WorkerThreadPool", WorkerThreadPool::class) { WorkerThreadPool }
  TypeManager.registerSingleton("WorkerThreadPool")
  TypeManager.registerEngineType("JavaClassWrapper", JavaClassWrapper::class) { JavaClassWrapper }
  TypeManager.registerSingleton("JavaClassWrapper")
  TypeManager.registerEngineType("JavaScriptBridge", JavaScriptBridge::class) { JavaScriptBridge }
  TypeManager.registerSingleton("JavaScriptBridge")
  TypeManager.registerEngineType("ThemeDB", ThemeDB::class) { ThemeDB }
  TypeManager.registerSingleton("ThemeDB")
  TypeManager.registerEngineType("DisplayServer", DisplayServer::class) { DisplayServer }
  TypeManager.registerSingleton("DisplayServer")
  TypeManager.registerEngineType("RenderingServer", RenderingServer::class) { RenderingServer }
  TypeManager.registerSingleton("RenderingServer")
  TypeManager.registerEngineType("AudioServer", AudioServer::class) { AudioServer }
  TypeManager.registerSingleton("AudioServer")
  TypeManager.registerEngineType("PhysicsServer2D", PhysicsServer2D::class) { PhysicsServer2D }
  TypeManager.registerSingleton("PhysicsServer2D")
  TypeManager.registerEngineType("PhysicsServer3D", PhysicsServer3D::class) { PhysicsServer3D }
  TypeManager.registerSingleton("PhysicsServer3D")
  TypeManager.registerEngineType("NavigationServer2D", NavigationServer2D::class) {
      NavigationServer2D }
  TypeManager.registerSingleton("NavigationServer2D")
  TypeManager.registerEngineType("NavigationServer3D", NavigationServer3D::class) {
      NavigationServer3D }
  TypeManager.registerSingleton("NavigationServer3D")
  TypeManager.registerEngineType("XRServer", XRServer::class) { XRServer }
  TypeManager.registerSingleton("XRServer")
  TypeManager.registerEngineType("CameraServer", CameraServer::class) { CameraServer }
  TypeManager.registerSingleton("CameraServer")
  TypeManager.registerEngineType("AESContext", AESContext::class, ::AESContext)
  TypeManager.registerEngineType("AStar2D", AStar2D::class, ::AStar2D)
  TypeManager.registerEngineType("AStar3D", AStar3D::class, ::AStar3D)
  TypeManager.registerEngineType("AStarGrid2D", AStarGrid2D::class, ::AStarGrid2D)
  TypeManager.registerEngineType("AcceptDialog", AcceptDialog::class, ::AcceptDialog)
  TypeManager.registerEngineType("AnimatableBody2D", AnimatableBody2D::class, ::AnimatableBody2D)
  TypeManager.registerEngineType("AnimatableBody3D", AnimatableBody3D::class, ::AnimatableBody3D)
  TypeManager.registerEngineType("AnimatedSprite2D", AnimatedSprite2D::class, ::AnimatedSprite2D)
  TypeManager.registerEngineType("AnimatedSprite3D", AnimatedSprite3D::class, ::AnimatedSprite3D)
  TypeManager.registerEngineType("AnimatedTexture", AnimatedTexture::class, ::AnimatedTexture)
  TypeManager.registerEngineType("Animation", Animation::class, ::Animation)
  TypeManager.registerEngineType("AnimationLibrary", AnimationLibrary::class, ::AnimationLibrary)
  TypeManager.registerEngineType("AnimationNode", AnimationNode::class, ::AnimationNode)
  TypeManager.registerEngineType("AnimationNodeAdd2", AnimationNodeAdd2::class, ::AnimationNodeAdd2)
  TypeManager.registerEngineType("AnimationNodeAdd3", AnimationNodeAdd3::class, ::AnimationNodeAdd3)
  TypeManager.registerEngineType("AnimationNodeAnimation", AnimationNodeAnimation::class,
      ::AnimationNodeAnimation)
  TypeManager.registerEngineType("AnimationNodeBlend2", AnimationNodeBlend2::class,
      ::AnimationNodeBlend2)
  TypeManager.registerEngineType("AnimationNodeBlend3", AnimationNodeBlend3::class,
      ::AnimationNodeBlend3)
  TypeManager.registerEngineType("AnimationNodeBlendSpace1D", AnimationNodeBlendSpace1D::class,
      ::AnimationNodeBlendSpace1D)
  TypeManager.registerEngineType("AnimationNodeBlendSpace2D", AnimationNodeBlendSpace2D::class,
      ::AnimationNodeBlendSpace2D)
  TypeManager.registerEngineType("AnimationNodeBlendTree", AnimationNodeBlendTree::class,
      ::AnimationNodeBlendTree)
  TypeManager.registerEngineType("AnimationNodeOneShot", AnimationNodeOneShot::class,
      ::AnimationNodeOneShot)
  TypeManager.registerEngineType("AnimationNodeOutput", AnimationNodeOutput::class,
      ::AnimationNodeOutput)
  TypeManager.registerEngineType("AnimationNodeStateMachine", AnimationNodeStateMachine::class,
      ::AnimationNodeStateMachine)
  TypeManager.registerEngineType("AnimationNodeStateMachinePlayback",
      AnimationNodeStateMachinePlayback::class, ::AnimationNodeStateMachinePlayback)
  TypeManager.registerEngineType("AnimationNodeStateMachineTransition",
      AnimationNodeStateMachineTransition::class, ::AnimationNodeStateMachineTransition)
  TypeManager.registerEngineType("AnimationNodeSync", AnimationNodeSync::class, ::AnimationNodeSync)
  TypeManager.registerEngineType("AnimationNodeTimeScale", AnimationNodeTimeScale::class,
      ::AnimationNodeTimeScale)
  TypeManager.registerEngineType("AnimationNodeTimeSeek", AnimationNodeTimeSeek::class,
      ::AnimationNodeTimeSeek)
  TypeManager.registerEngineType("AnimationNodeTransition", AnimationNodeTransition::class,
      ::AnimationNodeTransition)
  TypeManager.registerEngineType("AnimationPlayer", AnimationPlayer::class, ::AnimationPlayer)
  TypeManager.registerEngineType("AnimationRootNode", AnimationRootNode::class, ::AnimationRootNode)
  TypeManager.registerEngineType("AnimationTrackEditPlugin", AnimationTrackEditPlugin::class,
      ::AnimationTrackEditPlugin)
  TypeManager.registerEngineType("AnimationTree", AnimationTree::class, ::AnimationTree)
  TypeManager.registerEngineType("Area2D", Area2D::class, ::Area2D)
  TypeManager.registerEngineType("Area3D", Area3D::class, ::Area3D)
  TypeManager.registerEngineType("ArrayMesh", ArrayMesh::class, ::ArrayMesh)
  TypeManager.registerEngineType("ArrayOccluder3D", ArrayOccluder3D::class, ::ArrayOccluder3D)
  TypeManager.registerEngineType("AspectRatioContainer", AspectRatioContainer::class,
      ::AspectRatioContainer)
  TypeManager.registerEngineType("AtlasTexture", AtlasTexture::class, ::AtlasTexture)
  TypeManager.registerEngineType("AudioBusLayout", AudioBusLayout::class, ::AudioBusLayout)
  TypeManager.registerEngineType("AudioEffect", AudioEffect::class, ::AudioEffect)
  TypeManager.registerEngineType("AudioEffectAmplify", AudioEffectAmplify::class,
      ::AudioEffectAmplify)
  TypeManager.registerEngineType("AudioEffectBandLimitFilter", AudioEffectBandLimitFilter::class,
      ::AudioEffectBandLimitFilter)
  TypeManager.registerEngineType("AudioEffectBandPassFilter", AudioEffectBandPassFilter::class,
      ::AudioEffectBandPassFilter)
  TypeManager.registerEngineType("AudioEffectCapture", AudioEffectCapture::class,
      ::AudioEffectCapture)
  TypeManager.registerEngineType("AudioEffectChorus", AudioEffectChorus::class, ::AudioEffectChorus)
  TypeManager.registerEngineType("AudioEffectCompressor", AudioEffectCompressor::class,
      ::AudioEffectCompressor)
  TypeManager.registerEngineType("AudioEffectDelay", AudioEffectDelay::class, ::AudioEffectDelay)
  TypeManager.registerEngineType("AudioEffectDistortion", AudioEffectDistortion::class,
      ::AudioEffectDistortion)
  TypeManager.registerEngineType("AudioEffectEQ", AudioEffectEQ::class, ::AudioEffectEQ)
  TypeManager.registerEngineType("AudioEffectEQ10", AudioEffectEQ10::class, ::AudioEffectEQ10)
  TypeManager.registerEngineType("AudioEffectEQ21", AudioEffectEQ21::class, ::AudioEffectEQ21)
  TypeManager.registerEngineType("AudioEffectEQ6", AudioEffectEQ6::class, ::AudioEffectEQ6)
  TypeManager.registerEngineType("AudioEffectFilter", AudioEffectFilter::class, ::AudioEffectFilter)
  TypeManager.registerEngineType("AudioEffectHighPassFilter", AudioEffectHighPassFilter::class,
      ::AudioEffectHighPassFilter)
  TypeManager.registerEngineType("AudioEffectHighShelfFilter", AudioEffectHighShelfFilter::class,
      ::AudioEffectHighShelfFilter)
  TypeManager.registerEngineType("AudioEffectInstance", AudioEffectInstance::class,
      ::AudioEffectInstance)
  TypeManager.registerEngineType("AudioEffectLimiter", AudioEffectLimiter::class,
      ::AudioEffectLimiter)
  TypeManager.registerEngineType("AudioEffectLowPassFilter", AudioEffectLowPassFilter::class,
      ::AudioEffectLowPassFilter)
  TypeManager.registerEngineType("AudioEffectLowShelfFilter", AudioEffectLowShelfFilter::class,
      ::AudioEffectLowShelfFilter)
  TypeManager.registerEngineType("AudioEffectNotchFilter", AudioEffectNotchFilter::class,
      ::AudioEffectNotchFilter)
  TypeManager.registerEngineType("AudioEffectPanner", AudioEffectPanner::class, ::AudioEffectPanner)
  TypeManager.registerEngineType("AudioEffectPhaser", AudioEffectPhaser::class, ::AudioEffectPhaser)
  TypeManager.registerEngineType("AudioEffectPitchShift", AudioEffectPitchShift::class,
      ::AudioEffectPitchShift)
  TypeManager.registerEngineType("AudioEffectRecord", AudioEffectRecord::class, ::AudioEffectRecord)
  TypeManager.registerEngineType("AudioEffectReverb", AudioEffectReverb::class, ::AudioEffectReverb)
  TypeManager.registerEngineType("AudioEffectSpectrumAnalyzer", AudioEffectSpectrumAnalyzer::class,
      ::AudioEffectSpectrumAnalyzer)
  TypeManager.registerEngineType("AudioEffectSpectrumAnalyzerInstance",
      AudioEffectSpectrumAnalyzerInstance::class, ::AudioEffectSpectrumAnalyzerInstance)
  TypeManager.registerEngineType("AudioEffectStereoEnhance", AudioEffectStereoEnhance::class,
      ::AudioEffectStereoEnhance)
  TypeManager.registerEngineType("AudioListener2D", AudioListener2D::class, ::AudioListener2D)
  TypeManager.registerEngineType("AudioListener3D", AudioListener3D::class, ::AudioListener3D)
  TypeManager.registerEngineType("AudioStream", AudioStream::class, ::AudioStream)
  TypeManager.registerEngineType("AudioStreamGenerator", AudioStreamGenerator::class,
      ::AudioStreamGenerator)
  TypeManager.registerEngineType("AudioStreamGeneratorPlayback",
      AudioStreamGeneratorPlayback::class, ::AudioStreamGeneratorPlayback)
  TypeManager.registerEngineType("AudioStreamMP3", AudioStreamMP3::class, ::AudioStreamMP3)
  TypeManager.registerEngineType("AudioStreamMicrophone", AudioStreamMicrophone::class,
      ::AudioStreamMicrophone)
  TypeManager.registerEngineType("AudioStreamOggVorbis", AudioStreamOggVorbis::class,
      ::AudioStreamOggVorbis)
  TypeManager.registerEngineType("AudioStreamPlayback", AudioStreamPlayback::class,
      ::AudioStreamPlayback)
  TypeManager.registerEngineType("AudioStreamPlaybackOggVorbis",
      AudioStreamPlaybackOggVorbis::class, ::AudioStreamPlaybackOggVorbis)
  TypeManager.registerEngineType("AudioStreamPlaybackResampled",
      AudioStreamPlaybackResampled::class, ::AudioStreamPlaybackResampled)
  TypeManager.registerEngineType("AudioStreamPlayer", AudioStreamPlayer::class, ::AudioStreamPlayer)
  TypeManager.registerEngineType("AudioStreamPlayer2D", AudioStreamPlayer2D::class,
      ::AudioStreamPlayer2D)
  TypeManager.registerEngineType("AudioStreamPlayer3D", AudioStreamPlayer3D::class,
      ::AudioStreamPlayer3D)
  TypeManager.registerEngineType("AudioStreamRandomizer", AudioStreamRandomizer::class,
      ::AudioStreamRandomizer)
  TypeManager.registerEngineType("AudioStreamWAV", AudioStreamWAV::class, ::AudioStreamWAV)
  TypeManager.registerEngineType("BackBufferCopy", BackBufferCopy::class, ::BackBufferCopy)
  TypeManager.registerEngineType("BaseButton", BaseButton::class, ::BaseButton)
  TypeManager.registerEngineType("BaseMaterial3D", BaseMaterial3D::class, ::BaseMaterial3D)
  TypeManager.registerEngineType("BitMap", BitMap::class, ::BitMap)
  TypeManager.registerEngineType("Bone2D", Bone2D::class, ::Bone2D)
  TypeManager.registerEngineType("BoneAttachment3D", BoneAttachment3D::class, ::BoneAttachment3D)
  TypeManager.registerEngineType("BoneMap", BoneMap::class, ::BoneMap)
  TypeManager.registerEngineType("BoxContainer", BoxContainer::class, ::BoxContainer)
  TypeManager.registerEngineType("BoxMesh", BoxMesh::class, ::BoxMesh)
  TypeManager.registerEngineType("BoxOccluder3D", BoxOccluder3D::class, ::BoxOccluder3D)
  TypeManager.registerEngineType("BoxShape3D", BoxShape3D::class, ::BoxShape3D)
  TypeManager.registerEngineType("Button", Button::class, ::Button)
  TypeManager.registerEngineType("ButtonGroup", ButtonGroup::class, ::ButtonGroup)
  TypeManager.registerEngineType("CPUParticles2D", CPUParticles2D::class, ::CPUParticles2D)
  TypeManager.registerEngineType("CPUParticles3D", CPUParticles3D::class, ::CPUParticles3D)
  TypeManager.registerEngineType("CSGBox3D", CSGBox3D::class, ::CSGBox3D)
  TypeManager.registerEngineType("CSGCombiner3D", CSGCombiner3D::class, ::CSGCombiner3D)
  TypeManager.registerEngineType("CSGCylinder3D", CSGCylinder3D::class, ::CSGCylinder3D)
  TypeManager.registerEngineType("CSGMesh3D", CSGMesh3D::class, ::CSGMesh3D)
  TypeManager.registerEngineType("CSGPolygon3D", CSGPolygon3D::class, ::CSGPolygon3D)
  TypeManager.registerEngineType("CSGPrimitive3D", CSGPrimitive3D::class, ::CSGPrimitive3D)
  TypeManager.registerEngineType("CSGShape3D", CSGShape3D::class, ::CSGShape3D)
  TypeManager.registerEngineType("CSGSphere3D", CSGSphere3D::class, ::CSGSphere3D)
  TypeManager.registerEngineType("CSGTorus3D", CSGTorus3D::class, ::CSGTorus3D)
  TypeManager.registerEngineType("CallbackTweener", CallbackTweener::class, ::CallbackTweener)
  TypeManager.registerEngineType("Camera2D", Camera2D::class, ::Camera2D)
  TypeManager.registerEngineType("Camera3D", Camera3D::class, ::Camera3D)
  TypeManager.registerEngineType("CameraAttributes", CameraAttributes::class, ::CameraAttributes)
  TypeManager.registerEngineType("CameraAttributesPhysical", CameraAttributesPhysical::class,
      ::CameraAttributesPhysical)
  TypeManager.registerEngineType("CameraAttributesPractical", CameraAttributesPractical::class,
      ::CameraAttributesPractical)
  TypeManager.registerEngineType("CameraFeed", CameraFeed::class, ::CameraFeed)
  TypeManager.registerEngineType("CameraTexture", CameraTexture::class, ::CameraTexture)
  TypeManager.registerEngineType("CanvasGroup", CanvasGroup::class, ::CanvasGroup)
  TypeManager.registerEngineType("CanvasItem", CanvasItem::class, ::CanvasItem)
  TypeManager.registerEngineType("CanvasItemMaterial", CanvasItemMaterial::class,
      ::CanvasItemMaterial)
  TypeManager.registerEngineType("CanvasLayer", CanvasLayer::class, ::CanvasLayer)
  TypeManager.registerEngineType("CanvasModulate", CanvasModulate::class, ::CanvasModulate)
  TypeManager.registerEngineType("CanvasTexture", CanvasTexture::class, ::CanvasTexture)
  TypeManager.registerEngineType("CapsuleMesh", CapsuleMesh::class, ::CapsuleMesh)
  TypeManager.registerEngineType("CapsuleShape2D", CapsuleShape2D::class, ::CapsuleShape2D)
  TypeManager.registerEngineType("CapsuleShape3D", CapsuleShape3D::class, ::CapsuleShape3D)
  TypeManager.registerEngineType("CenterContainer", CenterContainer::class, ::CenterContainer)
  TypeManager.registerEngineType("CharFXTransform", CharFXTransform::class, ::CharFXTransform)
  TypeManager.registerEngineType("CharacterBody2D", CharacterBody2D::class, ::CharacterBody2D)
  TypeManager.registerEngineType("CharacterBody3D", CharacterBody3D::class, ::CharacterBody3D)
  TypeManager.registerEngineType("CheckBox", CheckBox::class, ::CheckBox)
  TypeManager.registerEngineType("CheckButton", CheckButton::class, ::CheckButton)
  TypeManager.registerEngineType("CircleShape2D", CircleShape2D::class, ::CircleShape2D)
  TypeManager.registerEngineType("CodeEdit", CodeEdit::class, ::CodeEdit)
  TypeManager.registerEngineType("CodeHighlighter", CodeHighlighter::class, ::CodeHighlighter)
  TypeManager.registerEngineType("CollisionObject2D", CollisionObject2D::class, ::CollisionObject2D)
  TypeManager.registerEngineType("CollisionObject3D", CollisionObject3D::class, ::CollisionObject3D)
  TypeManager.registerEngineType("CollisionPolygon2D", CollisionPolygon2D::class,
      ::CollisionPolygon2D)
  TypeManager.registerEngineType("CollisionPolygon3D", CollisionPolygon3D::class,
      ::CollisionPolygon3D)
  TypeManager.registerEngineType("CollisionShape2D", CollisionShape2D::class, ::CollisionShape2D)
  TypeManager.registerEngineType("CollisionShape3D", CollisionShape3D::class, ::CollisionShape3D)
  TypeManager.registerEngineType("ColorPicker", ColorPicker::class, ::ColorPicker)
  TypeManager.registerEngineType("ColorPickerButton", ColorPickerButton::class, ::ColorPickerButton)
  TypeManager.registerEngineType("ColorRect", ColorRect::class, ::ColorRect)
  TypeManager.registerEngineType("CompressedCubemap", CompressedCubemap::class, ::CompressedCubemap)
  TypeManager.registerEngineType("CompressedCubemapArray", CompressedCubemapArray::class,
      ::CompressedCubemapArray)
  TypeManager.registerEngineType("CompressedTexture2D", CompressedTexture2D::class,
      ::CompressedTexture2D)
  TypeManager.registerEngineType("CompressedTexture2DArray", CompressedTexture2DArray::class,
      ::CompressedTexture2DArray)
  TypeManager.registerEngineType("CompressedTexture3D", CompressedTexture3D::class,
      ::CompressedTexture3D)
  TypeManager.registerEngineType("CompressedTextureLayered", CompressedTextureLayered::class,
      ::CompressedTextureLayered)
  TypeManager.registerEngineType("ConcavePolygonShape2D", ConcavePolygonShape2D::class,
      ::ConcavePolygonShape2D)
  TypeManager.registerEngineType("ConcavePolygonShape3D", ConcavePolygonShape3D::class,
      ::ConcavePolygonShape3D)
  TypeManager.registerEngineType("ConeTwistJoint3D", ConeTwistJoint3D::class, ::ConeTwistJoint3D)
  TypeManager.registerEngineType("ConfigFile", ConfigFile::class, ::ConfigFile)
  TypeManager.registerEngineType("ConfirmationDialog", ConfirmationDialog::class,
      ::ConfirmationDialog)
  TypeManager.registerEngineType("Container", Container::class, ::Container)
  TypeManager.registerEngineType("Control", Control::class, ::Control)
  TypeManager.registerEngineType("ConvexPolygonShape2D", ConvexPolygonShape2D::class,
      ::ConvexPolygonShape2D)
  TypeManager.registerEngineType("ConvexPolygonShape3D", ConvexPolygonShape3D::class,
      ::ConvexPolygonShape3D)
  TypeManager.registerEngineType("Crypto", Crypto::class, ::Crypto)
  TypeManager.registerEngineType("CryptoKey", CryptoKey::class, ::CryptoKey)
  TypeManager.registerEngineType("Cubemap", Cubemap::class, ::Cubemap)
  TypeManager.registerEngineType("CubemapArray", CubemapArray::class, ::CubemapArray)
  TypeManager.registerEngineType("Curve", Curve::class, ::Curve)
  TypeManager.registerEngineType("Curve2D", Curve2D::class, ::Curve2D)
  TypeManager.registerEngineType("Curve3D", Curve3D::class, ::Curve3D)
  TypeManager.registerEngineType("CurveTexture", CurveTexture::class, ::CurveTexture)
  TypeManager.registerEngineType("CurveXYZTexture", CurveXYZTexture::class, ::CurveXYZTexture)
  TypeManager.registerEngineType("CylinderMesh", CylinderMesh::class, ::CylinderMesh)
  TypeManager.registerEngineType("CylinderShape3D", CylinderShape3D::class, ::CylinderShape3D)
  TypeManager.registerEngineType("DTLSServer", DTLSServer::class, ::DTLSServer)
  TypeManager.registerEngineType("DampedSpringJoint2D", DampedSpringJoint2D::class,
      ::DampedSpringJoint2D)
  TypeManager.registerEngineType("Decal", Decal::class, ::Decal)
  TypeManager.registerEngineType("DirAccess", DirAccess::class, ::DirAccess)
  TypeManager.registerEngineType("DirectionalLight2D", DirectionalLight2D::class,
      ::DirectionalLight2D)
  TypeManager.registerEngineType("DirectionalLight3D", DirectionalLight3D::class,
      ::DirectionalLight3D)
  TypeManager.registerEngineType("ENetConnection", ENetConnection::class, ::ENetConnection)
  TypeManager.registerEngineType("ENetMultiplayerPeer", ENetMultiplayerPeer::class,
      ::ENetMultiplayerPeer)
  TypeManager.registerEngineType("ENetPacketPeer", ENetPacketPeer::class, ::ENetPacketPeer)
  TypeManager.registerEngineType("EditorCommandPalette", EditorCommandPalette::class,
      ::EditorCommandPalette)
  TypeManager.registerEngineType("EditorDebuggerPlugin", EditorDebuggerPlugin::class,
      ::EditorDebuggerPlugin)
  TypeManager.registerEngineType("EditorDebuggerSession", EditorDebuggerSession::class,
      ::EditorDebuggerSession)
  TypeManager.registerEngineType("EditorExportPlatform", EditorExportPlatform::class,
      ::EditorExportPlatform)
  TypeManager.registerEngineType("EditorExportPlugin", EditorExportPlugin::class,
      ::EditorExportPlugin)
  TypeManager.registerEngineType("EditorFeatureProfile", EditorFeatureProfile::class,
      ::EditorFeatureProfile)
  TypeManager.registerEngineType("EditorFileDialog", EditorFileDialog::class, ::EditorFileDialog)
  TypeManager.registerEngineType("EditorFileSystem", EditorFileSystem::class, ::EditorFileSystem)
  TypeManager.registerEngineType("EditorFileSystemDirectory", EditorFileSystemDirectory::class,
      ::EditorFileSystemDirectory)
  TypeManager.registerEngineType("EditorFileSystemImportFormatSupportQuery",
      EditorFileSystemImportFormatSupportQuery::class, ::EditorFileSystemImportFormatSupportQuery)
  TypeManager.registerEngineType("EditorImportPlugin", EditorImportPlugin::class,
      ::EditorImportPlugin)
  TypeManager.registerEngineType("EditorInspector", EditorInspector::class, ::EditorInspector)
  TypeManager.registerEngineType("EditorInspectorPlugin", EditorInspectorPlugin::class,
      ::EditorInspectorPlugin)
  TypeManager.registerEngineType("EditorInterface", EditorInterface::class, ::EditorInterface)
  TypeManager.registerEngineType("EditorNode3DGizmo", EditorNode3DGizmo::class, ::EditorNode3DGizmo)
  TypeManager.registerEngineType("EditorNode3DGizmoPlugin", EditorNode3DGizmoPlugin::class,
      ::EditorNode3DGizmoPlugin)
  TypeManager.registerEngineType("EditorPaths", EditorPaths::class, ::EditorPaths)
  TypeManager.registerEngineType("EditorPlugin", EditorPlugin::class, ::EditorPlugin)
  TypeManager.registerEngineType("EditorProperty", EditorProperty::class, ::EditorProperty)
  TypeManager.registerEngineType("EditorResourceConversionPlugin",
      EditorResourceConversionPlugin::class, ::EditorResourceConversionPlugin)
  TypeManager.registerEngineType("EditorResourcePicker", EditorResourcePicker::class,
      ::EditorResourcePicker)
  TypeManager.registerEngineType("EditorResourcePreview", EditorResourcePreview::class,
      ::EditorResourcePreview)
  TypeManager.registerEngineType("EditorResourcePreviewGenerator",
      EditorResourcePreviewGenerator::class, ::EditorResourcePreviewGenerator)
  TypeManager.registerEngineType("EditorSceneFormatImporter", EditorSceneFormatImporter::class,
      ::EditorSceneFormatImporter)
  TypeManager.registerEngineType("EditorSceneFormatImporterBlend",
      EditorSceneFormatImporterBlend::class, ::EditorSceneFormatImporterBlend)
  TypeManager.registerEngineType("EditorSceneFormatImporterFBX",
      EditorSceneFormatImporterFBX::class, ::EditorSceneFormatImporterFBX)
  TypeManager.registerEngineType("EditorSceneFormatImporterGLTF",
      EditorSceneFormatImporterGLTF::class, ::EditorSceneFormatImporterGLTF)
  TypeManager.registerEngineType("EditorScenePostImport", EditorScenePostImport::class,
      ::EditorScenePostImport)
  TypeManager.registerEngineType("EditorScenePostImportPlugin", EditorScenePostImportPlugin::class,
      ::EditorScenePostImportPlugin)
  TypeManager.registerEngineType("EditorScript", EditorScript::class, ::EditorScript)
  TypeManager.registerEngineType("EditorScriptPicker", EditorScriptPicker::class,
      ::EditorScriptPicker)
  TypeManager.registerEngineType("EditorSelection", EditorSelection::class, ::EditorSelection)
  TypeManager.registerEngineType("EditorSettings", EditorSettings::class, ::EditorSettings)
  TypeManager.registerEngineType("EditorSpinSlider", EditorSpinSlider::class, ::EditorSpinSlider)
  TypeManager.registerEngineType("EditorSyntaxHighlighter", EditorSyntaxHighlighter::class,
      ::EditorSyntaxHighlighter)
  TypeManager.registerEngineType("EditorTranslationParserPlugin",
      EditorTranslationParserPlugin::class, ::EditorTranslationParserPlugin)
  TypeManager.registerEngineType("EditorUndoRedoManager", EditorUndoRedoManager::class,
      ::EditorUndoRedoManager)
  TypeManager.registerEngineType("EditorVCSInterface", EditorVCSInterface::class,
      ::EditorVCSInterface)
  TypeManager.registerEngineType("EncodedObjectAsID", EncodedObjectAsID::class, ::EncodedObjectAsID)
  TypeManager.registerEngineType("EngineProfiler", EngineProfiler::class, ::EngineProfiler)
  TypeManager.registerEngineType("Environment", Environment::class, ::Environment)
  TypeManager.registerEngineType("Expression", Expression::class, ::Expression)
  TypeManager.registerEngineType("FastNoiseLite", FastNoiseLite::class, ::FastNoiseLite)
  TypeManager.registerEngineType("FileAccess", FileAccess::class, ::FileAccess)
  TypeManager.registerEngineType("FileDialog", FileDialog::class, ::FileDialog)
  TypeManager.registerEngineType("FileSystemDock", FileSystemDock::class, ::FileSystemDock)
  TypeManager.registerEngineType("FlowContainer", FlowContainer::class, ::FlowContainer)
  TypeManager.registerEngineType("FogMaterial", FogMaterial::class, ::FogMaterial)
  TypeManager.registerEngineType("FogVolume", FogVolume::class, ::FogVolume)
  TypeManager.registerEngineType("Font", Font::class, ::Font)
  TypeManager.registerEngineType("FontFile", FontFile::class, ::FontFile)
  TypeManager.registerEngineType("FontVariation", FontVariation::class, ::FontVariation)
  TypeManager.registerEngineType("FramebufferCacheRD", FramebufferCacheRD::class,
      ::FramebufferCacheRD)
  TypeManager.registerEngineType("GDExtension", GDExtension::class, ::GDExtension)
  TypeManager.registerEngineType("GDScript", GDScript::class, ::GDScript)
  TypeManager.registerEngineType("GDScriptEditorTranslationParserPlugin",
      GDScriptEditorTranslationParserPlugin::class, ::GDScriptEditorTranslationParserPlugin)
  TypeManager.registerEngineType("GDScriptNativeClass", GDScriptNativeClass::class,
      ::GDScriptNativeClass)
  TypeManager.registerEngineType("GLTFAccessor", GLTFAccessor::class, ::GLTFAccessor)
  TypeManager.registerEngineType("GLTFAnimation", GLTFAnimation::class, ::GLTFAnimation)
  TypeManager.registerEngineType("GLTFBufferView", GLTFBufferView::class, ::GLTFBufferView)
  TypeManager.registerEngineType("GLTFCamera", GLTFCamera::class, ::GLTFCamera)
  TypeManager.registerEngineType("GLTFDocument", GLTFDocument::class, ::GLTFDocument)
  TypeManager.registerEngineType("GLTFDocumentExtension", GLTFDocumentExtension::class,
      ::GLTFDocumentExtension)
  TypeManager.registerEngineType("GLTFDocumentExtensionConvertImporterMesh",
      GLTFDocumentExtensionConvertImporterMesh::class, ::GLTFDocumentExtensionConvertImporterMesh)
  TypeManager.registerEngineType("GLTFLight", GLTFLight::class, ::GLTFLight)
  TypeManager.registerEngineType("GLTFMesh", GLTFMesh::class, ::GLTFMesh)
  TypeManager.registerEngineType("GLTFNode", GLTFNode::class, ::GLTFNode)
  TypeManager.registerEngineType("GLTFSkeleton", GLTFSkeleton::class, ::GLTFSkeleton)
  TypeManager.registerEngineType("GLTFSkin", GLTFSkin::class, ::GLTFSkin)
  TypeManager.registerEngineType("GLTFSpecGloss", GLTFSpecGloss::class, ::GLTFSpecGloss)
  TypeManager.registerEngineType("GLTFState", GLTFState::class, ::GLTFState)
  TypeManager.registerEngineType("GLTFTexture", GLTFTexture::class, ::GLTFTexture)
  TypeManager.registerEngineType("GLTFTextureSampler", GLTFTextureSampler::class,
      ::GLTFTextureSampler)
  TypeManager.registerEngineType("GPUParticles2D", GPUParticles2D::class, ::GPUParticles2D)
  TypeManager.registerEngineType("GPUParticles3D", GPUParticles3D::class, ::GPUParticles3D)
  TypeManager.registerEngineType("GPUParticlesAttractor3D", GPUParticlesAttractor3D::class,
      ::GPUParticlesAttractor3D)
  TypeManager.registerEngineType("GPUParticlesAttractorBox3D", GPUParticlesAttractorBox3D::class,
      ::GPUParticlesAttractorBox3D)
  TypeManager.registerEngineType("GPUParticlesAttractorSphere3D",
      GPUParticlesAttractorSphere3D::class, ::GPUParticlesAttractorSphere3D)
  TypeManager.registerEngineType("GPUParticlesAttractorVectorField3D",
      GPUParticlesAttractorVectorField3D::class, ::GPUParticlesAttractorVectorField3D)
  TypeManager.registerEngineType("GPUParticlesCollision3D", GPUParticlesCollision3D::class,
      ::GPUParticlesCollision3D)
  TypeManager.registerEngineType("GPUParticlesCollisionBox3D", GPUParticlesCollisionBox3D::class,
      ::GPUParticlesCollisionBox3D)
  TypeManager.registerEngineType("GPUParticlesCollisionHeightField3D",
      GPUParticlesCollisionHeightField3D::class, ::GPUParticlesCollisionHeightField3D)
  TypeManager.registerEngineType("GPUParticlesCollisionSDF3D", GPUParticlesCollisionSDF3D::class,
      ::GPUParticlesCollisionSDF3D)
  TypeManager.registerEngineType("GPUParticlesCollisionSphere3D",
      GPUParticlesCollisionSphere3D::class, ::GPUParticlesCollisionSphere3D)
  TypeManager.registerEngineType("Generic6DOFJoint3D", Generic6DOFJoint3D::class,
      ::Generic6DOFJoint3D)
  TypeManager.registerEngineType("GeometryInstance3D", GeometryInstance3D::class,
      ::GeometryInstance3D)
  TypeManager.registerEngineType("Gradient", Gradient::class, ::Gradient)
  TypeManager.registerEngineType("GradientTexture1D", GradientTexture1D::class, ::GradientTexture1D)
  TypeManager.registerEngineType("GradientTexture2D", GradientTexture2D::class, ::GradientTexture2D)
  TypeManager.registerEngineType("GraphEdit", GraphEdit::class, ::GraphEdit)
  TypeManager.registerEngineType("GraphNode", GraphNode::class, ::GraphNode)
  TypeManager.registerEngineType("GridContainer", GridContainer::class, ::GridContainer)
  TypeManager.registerEngineType("GridMap", GridMap::class, ::GridMap)
  TypeManager.registerEngineType("GrooveJoint2D", GrooveJoint2D::class, ::GrooveJoint2D)
  TypeManager.registerEngineType("HBoxContainer", HBoxContainer::class, ::HBoxContainer)
  TypeManager.registerEngineType("HFlowContainer", HFlowContainer::class, ::HFlowContainer)
  TypeManager.registerEngineType("HMACContext", HMACContext::class, ::HMACContext)
  TypeManager.registerEngineType("HScrollBar", HScrollBar::class, ::HScrollBar)
  TypeManager.registerEngineType("HSeparator", HSeparator::class, ::HSeparator)
  TypeManager.registerEngineType("HSlider", HSlider::class, ::HSlider)
  TypeManager.registerEngineType("HSplitContainer", HSplitContainer::class, ::HSplitContainer)
  TypeManager.registerEngineType("HTTPClient", HTTPClient::class, ::HTTPClient)
  TypeManager.registerEngineType("HTTPRequest", HTTPRequest::class, ::HTTPRequest)
  TypeManager.registerEngineType("HashingContext", HashingContext::class, ::HashingContext)
  TypeManager.registerEngineType("HeightMapShape3D", HeightMapShape3D::class, ::HeightMapShape3D)
  TypeManager.registerEngineType("HingeJoint3D", HingeJoint3D::class, ::HingeJoint3D)
  TypeManager.registerEngineType("Image", Image::class, ::Image)
  TypeManager.registerEngineType("ImageFormatLoader", ImageFormatLoader::class, ::ImageFormatLoader)
  TypeManager.registerEngineType("ImageFormatLoaderExtension", ImageFormatLoaderExtension::class,
      ::ImageFormatLoaderExtension)
  TypeManager.registerEngineType("ImageTexture", ImageTexture::class, ::ImageTexture)
  TypeManager.registerEngineType("ImageTexture3D", ImageTexture3D::class, ::ImageTexture3D)
  TypeManager.registerEngineType("ImageTextureLayered", ImageTextureLayered::class,
      ::ImageTextureLayered)
  TypeManager.registerEngineType("ImmediateMesh", ImmediateMesh::class, ::ImmediateMesh)
  TypeManager.registerEngineType("ImporterMesh", ImporterMesh::class, ::ImporterMesh)
  TypeManager.registerEngineType("ImporterMeshInstance3D", ImporterMeshInstance3D::class,
      ::ImporterMeshInstance3D)
  TypeManager.registerEngineType("InputEvent", InputEvent::class, ::InputEvent)
  TypeManager.registerEngineType("InputEventAction", InputEventAction::class, ::InputEventAction)
  TypeManager.registerEngineType("InputEventFromWindow", InputEventFromWindow::class,
      ::InputEventFromWindow)
  TypeManager.registerEngineType("InputEventGesture", InputEventGesture::class, ::InputEventGesture)
  TypeManager.registerEngineType("InputEventJoypadButton", InputEventJoypadButton::class,
      ::InputEventJoypadButton)
  TypeManager.registerEngineType("InputEventJoypadMotion", InputEventJoypadMotion::class,
      ::InputEventJoypadMotion)
  TypeManager.registerEngineType("InputEventKey", InputEventKey::class, ::InputEventKey)
  TypeManager.registerEngineType("InputEventMIDI", InputEventMIDI::class, ::InputEventMIDI)
  TypeManager.registerEngineType("InputEventMagnifyGesture", InputEventMagnifyGesture::class,
      ::InputEventMagnifyGesture)
  TypeManager.registerEngineType("InputEventMouse", InputEventMouse::class, ::InputEventMouse)
  TypeManager.registerEngineType("InputEventMouseButton", InputEventMouseButton::class,
      ::InputEventMouseButton)
  TypeManager.registerEngineType("InputEventMouseMotion", InputEventMouseMotion::class,
      ::InputEventMouseMotion)
  TypeManager.registerEngineType("InputEventPanGesture", InputEventPanGesture::class,
      ::InputEventPanGesture)
  TypeManager.registerEngineType("InputEventScreenDrag", InputEventScreenDrag::class,
      ::InputEventScreenDrag)
  TypeManager.registerEngineType("InputEventScreenTouch", InputEventScreenTouch::class,
      ::InputEventScreenTouch)
  TypeManager.registerEngineType("InputEventShortcut", InputEventShortcut::class,
      ::InputEventShortcut)
  TypeManager.registerEngineType("InputEventWithModifiers", InputEventWithModifiers::class,
      ::InputEventWithModifiers)
  TypeManager.registerEngineType("InstancePlaceholder", InstancePlaceholder::class,
      ::InstancePlaceholder)
  TypeManager.registerEngineType("IntervalTweener", IntervalTweener::class, ::IntervalTweener)
  TypeManager.registerEngineType("ItemList", ItemList::class, ::ItemList)
  TypeManager.registerEngineType("JNISingleton", JNISingleton::class, ::JNISingleton)
  TypeManager.registerEngineType("JSON", JSON::class, ::JSON)
  TypeManager.registerEngineType("JSONRPC", JSONRPC::class, ::JSONRPC)
  TypeManager.registerEngineType("JavaClass", JavaClass::class, ::JavaClass)
  TypeManager.registerEngineType("JavaScriptObject", JavaScriptObject::class, ::JavaScriptObject)
  TypeManager.registerEngineType("Joint2D", Joint2D::class, ::Joint2D)
  TypeManager.registerEngineType("Joint3D", Joint3D::class, ::Joint3D)
  TypeManager.registerEngineType("KinematicCollision2D", KinematicCollision2D::class,
      ::KinematicCollision2D)
  TypeManager.registerEngineType("KinematicCollision3D", KinematicCollision3D::class,
      ::KinematicCollision3D)
  TypeManager.registerEngineType("KotlinScript", KotlinScript::class, ::KotlinScript)
  TypeManager.registerEngineType("Label", Label::class, ::Label)
  TypeManager.registerEngineType("Label3D", Label3D::class, ::Label3D)
  TypeManager.registerEngineType("LabelSettings", LabelSettings::class, ::LabelSettings)
  TypeManager.registerEngineType("Light2D", Light2D::class, ::Light2D)
  TypeManager.registerEngineType("Light3D", Light3D::class, ::Light3D)
  TypeManager.registerEngineType("LightOccluder2D", LightOccluder2D::class, ::LightOccluder2D)
  TypeManager.registerEngineType("LightmapGI", LightmapGI::class, ::LightmapGI)
  TypeManager.registerEngineType("LightmapGIData", LightmapGIData::class, ::LightmapGIData)
  TypeManager.registerEngineType("LightmapProbe", LightmapProbe::class, ::LightmapProbe)
  TypeManager.registerEngineType("Lightmapper", Lightmapper::class, ::Lightmapper)
  TypeManager.registerEngineType("LightmapperRD", LightmapperRD::class, ::LightmapperRD)
  TypeManager.registerEngineType("Line2D", Line2D::class, ::Line2D)
  TypeManager.registerEngineType("LineEdit", LineEdit::class, ::LineEdit)
  TypeManager.registerEngineType("LinkButton", LinkButton::class, ::LinkButton)
  TypeManager.registerEngineType("MainLoop", MainLoop::class, ::MainLoop)
  TypeManager.registerEngineType("MarginContainer", MarginContainer::class, ::MarginContainer)
  TypeManager.registerEngineType("Marker2D", Marker2D::class, ::Marker2D)
  TypeManager.registerEngineType("Marker3D", Marker3D::class, ::Marker3D)
  TypeManager.registerEngineType("Material", Material::class, ::Material)
  TypeManager.registerEngineType("MenuBar", MenuBar::class, ::MenuBar)
  TypeManager.registerEngineType("MenuButton", MenuButton::class, ::MenuButton)
  TypeManager.registerEngineType("Mesh", Mesh::class, ::Mesh)
  TypeManager.registerEngineType("MeshDataTool", MeshDataTool::class, ::MeshDataTool)
  TypeManager.registerEngineType("MeshInstance2D", MeshInstance2D::class, ::MeshInstance2D)
  TypeManager.registerEngineType("MeshInstance3D", MeshInstance3D::class, ::MeshInstance3D)
  TypeManager.registerEngineType("MeshLibrary", MeshLibrary::class, ::MeshLibrary)
  TypeManager.registerEngineType("MeshTexture", MeshTexture::class, ::MeshTexture)
  TypeManager.registerEngineType("MethodTweener", MethodTweener::class, ::MethodTweener)
  TypeManager.registerEngineType("MissingNode", MissingNode::class, ::MissingNode)
  TypeManager.registerEngineType("MissingResource", MissingResource::class, ::MissingResource)
  TypeManager.registerEngineType("MobileVRInterface", MobileVRInterface::class, ::MobileVRInterface)
  TypeManager.registerEngineType("MovieWriter", MovieWriter::class, ::MovieWriter)
  TypeManager.registerEngineType("MovieWriterMJPEG", MovieWriterMJPEG::class, ::MovieWriterMJPEG)
  TypeManager.registerEngineType("MovieWriterPNGWAV", MovieWriterPNGWAV::class, ::MovieWriterPNGWAV)
  TypeManager.registerEngineType("MultiMesh", MultiMesh::class, ::MultiMesh)
  TypeManager.registerEngineType("MultiMeshInstance2D", MultiMeshInstance2D::class,
      ::MultiMeshInstance2D)
  TypeManager.registerEngineType("MultiMeshInstance3D", MultiMeshInstance3D::class,
      ::MultiMeshInstance3D)
  TypeManager.registerEngineType("MultiplayerAPI", MultiplayerAPI::class, ::MultiplayerAPI)
  TypeManager.registerEngineType("MultiplayerAPIExtension", MultiplayerAPIExtension::class,
      ::MultiplayerAPIExtension)
  TypeManager.registerEngineType("MultiplayerPeer", MultiplayerPeer::class, ::MultiplayerPeer)
  TypeManager.registerEngineType("MultiplayerPeerExtension", MultiplayerPeerExtension::class,
      ::MultiplayerPeerExtension)
  TypeManager.registerEngineType("MultiplayerSpawner", MultiplayerSpawner::class,
      ::MultiplayerSpawner)
  TypeManager.registerEngineType("MultiplayerSynchronizer", MultiplayerSynchronizer::class,
      ::MultiplayerSynchronizer)
  TypeManager.registerEngineType("Mutex", Mutex::class, ::Mutex)
  TypeManager.registerEngineType("NavigationAgent2D", NavigationAgent2D::class, ::NavigationAgent2D)
  TypeManager.registerEngineType("NavigationAgent3D", NavigationAgent3D::class, ::NavigationAgent3D)
  TypeManager.registerEngineType("NavigationLink2D", NavigationLink2D::class, ::NavigationLink2D)
  TypeManager.registerEngineType("NavigationLink3D", NavigationLink3D::class, ::NavigationLink3D)
  TypeManager.registerEngineType("NavigationMesh", NavigationMesh::class, ::NavigationMesh)
  TypeManager.registerEngineType("NavigationObstacle2D", NavigationObstacle2D::class,
      ::NavigationObstacle2D)
  TypeManager.registerEngineType("NavigationObstacle3D", NavigationObstacle3D::class,
      ::NavigationObstacle3D)
  TypeManager.registerEngineType("NavigationPathQueryParameters2D",
      NavigationPathQueryParameters2D::class, ::NavigationPathQueryParameters2D)
  TypeManager.registerEngineType("NavigationPathQueryParameters3D",
      NavigationPathQueryParameters3D::class, ::NavigationPathQueryParameters3D)
  TypeManager.registerEngineType("NavigationPathQueryResult2D", NavigationPathQueryResult2D::class,
      ::NavigationPathQueryResult2D)
  TypeManager.registerEngineType("NavigationPathQueryResult3D", NavigationPathQueryResult3D::class,
      ::NavigationPathQueryResult3D)
  TypeManager.registerEngineType("NavigationPolygon", NavigationPolygon::class, ::NavigationPolygon)
  TypeManager.registerEngineType("NavigationRegion2D", NavigationRegion2D::class,
      ::NavigationRegion2D)
  TypeManager.registerEngineType("NavigationRegion3D", NavigationRegion3D::class,
      ::NavigationRegion3D)
  TypeManager.registerEngineType("NinePatchRect", NinePatchRect::class, ::NinePatchRect)
  TypeManager.registerEngineType("Node", Node::class, ::Node)
  TypeManager.registerEngineType("Node2D", Node2D::class, ::Node2D)
  TypeManager.registerEngineType("Node3D", Node3D::class, ::Node3D)
  TypeManager.registerEngineType("Node3DGizmo", Node3DGizmo::class, ::Node3DGizmo)
  TypeManager.registerEngineType("Noise", Noise::class, ::Noise)
  TypeManager.registerEngineType("NoiseTexture2D", NoiseTexture2D::class, ::NoiseTexture2D)
  TypeManager.registerEngineType("ORMMaterial3D", ORMMaterial3D::class, ::ORMMaterial3D)
  TypeManager.registerEngineType("Object", Object::class, ::Object)
  TypeManager.registerEngineType("Occluder3D", Occluder3D::class, ::Occluder3D)
  TypeManager.registerEngineType("OccluderInstance3D", OccluderInstance3D::class,
      ::OccluderInstance3D)
  TypeManager.registerEngineType("OccluderPolygon2D", OccluderPolygon2D::class, ::OccluderPolygon2D)
  TypeManager.registerEngineType("OfflineMultiplayerPeer", OfflineMultiplayerPeer::class,
      ::OfflineMultiplayerPeer)
  TypeManager.registerEngineType("OggPacketSequence", OggPacketSequence::class, ::OggPacketSequence)
  TypeManager.registerEngineType("OggPacketSequencePlayback", OggPacketSequencePlayback::class,
      ::OggPacketSequencePlayback)
  TypeManager.registerEngineType("OmniLight3D", OmniLight3D::class, ::OmniLight3D)
  TypeManager.registerEngineType("OptimizedTranslation", OptimizedTranslation::class,
      ::OptimizedTranslation)
  TypeManager.registerEngineType("OptionButton", OptionButton::class, ::OptionButton)
  TypeManager.registerEngineType("PCKPacker", PCKPacker::class, ::PCKPacker)
  TypeManager.registerEngineType("PackedDataContainer", PackedDataContainer::class,
      ::PackedDataContainer)
  TypeManager.registerEngineType("PackedDataContainerRef", PackedDataContainerRef::class,
      ::PackedDataContainerRef)
  TypeManager.registerEngineType("PackedScene", PackedScene::class, ::PackedScene)
  TypeManager.registerEngineType("PacketPeer", PacketPeer::class, ::PacketPeer)
  TypeManager.registerEngineType("PacketPeerDTLS", PacketPeerDTLS::class, ::PacketPeerDTLS)
  TypeManager.registerEngineType("PacketPeerExtension", PacketPeerExtension::class,
      ::PacketPeerExtension)
  TypeManager.registerEngineType("PacketPeerStream", PacketPeerStream::class, ::PacketPeerStream)
  TypeManager.registerEngineType("PacketPeerUDP", PacketPeerUDP::class, ::PacketPeerUDP)
  TypeManager.registerEngineType("Panel", Panel::class, ::Panel)
  TypeManager.registerEngineType("PanelContainer", PanelContainer::class, ::PanelContainer)
  TypeManager.registerEngineType("PanoramaSkyMaterial", PanoramaSkyMaterial::class,
      ::PanoramaSkyMaterial)
  TypeManager.registerEngineType("ParallaxBackground", ParallaxBackground::class,
      ::ParallaxBackground)
  TypeManager.registerEngineType("ParallaxLayer", ParallaxLayer::class, ::ParallaxLayer)
  TypeManager.registerEngineType("ParticleProcessMaterial", ParticleProcessMaterial::class,
      ::ParticleProcessMaterial)
  TypeManager.registerEngineType("Path2D", Path2D::class, ::Path2D)
  TypeManager.registerEngineType("Path3D", Path3D::class, ::Path3D)
  TypeManager.registerEngineType("PathFollow2D", PathFollow2D::class, ::PathFollow2D)
  TypeManager.registerEngineType("PathFollow3D", PathFollow3D::class, ::PathFollow3D)
  TypeManager.registerEngineType("PhysicalBone2D", PhysicalBone2D::class, ::PhysicalBone2D)
  TypeManager.registerEngineType("PhysicalBone3D", PhysicalBone3D::class, ::PhysicalBone3D)
  TypeManager.registerEngineType("PhysicalSkyMaterial", PhysicalSkyMaterial::class,
      ::PhysicalSkyMaterial)
  TypeManager.registerEngineType("PhysicsBody2D", PhysicsBody2D::class, ::PhysicsBody2D)
  TypeManager.registerEngineType("PhysicsBody3D", PhysicsBody3D::class, ::PhysicsBody3D)
  TypeManager.registerEngineType("PhysicsDirectBodyState2D", PhysicsDirectBodyState2D::class,
      ::PhysicsDirectBodyState2D)
  TypeManager.registerEngineType("PhysicsDirectBodyState2DExtension",
      PhysicsDirectBodyState2DExtension::class, ::PhysicsDirectBodyState2DExtension)
  TypeManager.registerEngineType("PhysicsDirectBodyState3D", PhysicsDirectBodyState3D::class,
      ::PhysicsDirectBodyState3D)
  TypeManager.registerEngineType("PhysicsDirectBodyState3DExtension",
      PhysicsDirectBodyState3DExtension::class, ::PhysicsDirectBodyState3DExtension)
  TypeManager.registerEngineType("PhysicsDirectSpaceState2D", PhysicsDirectSpaceState2D::class,
      ::PhysicsDirectSpaceState2D)
  TypeManager.registerEngineType("PhysicsDirectSpaceState2DExtension",
      PhysicsDirectSpaceState2DExtension::class, ::PhysicsDirectSpaceState2DExtension)
  TypeManager.registerEngineType("PhysicsDirectSpaceState3D", PhysicsDirectSpaceState3D::class,
      ::PhysicsDirectSpaceState3D)
  TypeManager.registerEngineType("PhysicsDirectSpaceState3DExtension",
      PhysicsDirectSpaceState3DExtension::class, ::PhysicsDirectSpaceState3DExtension)
  TypeManager.registerEngineType("PhysicsMaterial", PhysicsMaterial::class, ::PhysicsMaterial)
  TypeManager.registerEngineType("PhysicsPointQueryParameters2D",
      PhysicsPointQueryParameters2D::class, ::PhysicsPointQueryParameters2D)
  TypeManager.registerEngineType("PhysicsPointQueryParameters3D",
      PhysicsPointQueryParameters3D::class, ::PhysicsPointQueryParameters3D)
  TypeManager.registerEngineType("PhysicsRayQueryParameters2D", PhysicsRayQueryParameters2D::class,
      ::PhysicsRayQueryParameters2D)
  TypeManager.registerEngineType("PhysicsRayQueryParameters3D", PhysicsRayQueryParameters3D::class,
      ::PhysicsRayQueryParameters3D)
  TypeManager.registerEngineType("PhysicsServer3DRenderingServerHandler",
      PhysicsServer3DRenderingServerHandler::class, ::PhysicsServer3DRenderingServerHandler)
  TypeManager.registerEngineType("PhysicsShapeQueryParameters2D",
      PhysicsShapeQueryParameters2D::class, ::PhysicsShapeQueryParameters2D)
  TypeManager.registerEngineType("PhysicsShapeQueryParameters3D",
      PhysicsShapeQueryParameters3D::class, ::PhysicsShapeQueryParameters3D)
  TypeManager.registerEngineType("PhysicsTestMotionParameters2D",
      PhysicsTestMotionParameters2D::class, ::PhysicsTestMotionParameters2D)
  TypeManager.registerEngineType("PhysicsTestMotionParameters3D",
      PhysicsTestMotionParameters3D::class, ::PhysicsTestMotionParameters3D)
  TypeManager.registerEngineType("PhysicsTestMotionResult2D", PhysicsTestMotionResult2D::class,
      ::PhysicsTestMotionResult2D)
  TypeManager.registerEngineType("PhysicsTestMotionResult3D", PhysicsTestMotionResult3D::class,
      ::PhysicsTestMotionResult3D)
  TypeManager.registerEngineType("PinJoint2D", PinJoint2D::class, ::PinJoint2D)
  TypeManager.registerEngineType("PinJoint3D", PinJoint3D::class, ::PinJoint3D)
  TypeManager.registerEngineType("PlaceholderCubemap", PlaceholderCubemap::class,
      ::PlaceholderCubemap)
  TypeManager.registerEngineType("PlaceholderCubemapArray", PlaceholderCubemapArray::class,
      ::PlaceholderCubemapArray)
  TypeManager.registerEngineType("PlaceholderMaterial", PlaceholderMaterial::class,
      ::PlaceholderMaterial)
  TypeManager.registerEngineType("PlaceholderMesh", PlaceholderMesh::class, ::PlaceholderMesh)
  TypeManager.registerEngineType("PlaceholderTexture2D", PlaceholderTexture2D::class,
      ::PlaceholderTexture2D)
  TypeManager.registerEngineType("PlaceholderTexture2DArray", PlaceholderTexture2DArray::class,
      ::PlaceholderTexture2DArray)
  TypeManager.registerEngineType("PlaceholderTexture3D", PlaceholderTexture3D::class,
      ::PlaceholderTexture3D)
  TypeManager.registerEngineType("PlaceholderTextureLayered", PlaceholderTextureLayered::class,
      ::PlaceholderTextureLayered)
  TypeManager.registerEngineType("PlaneMesh", PlaneMesh::class, ::PlaneMesh)
  TypeManager.registerEngineType("PointLight2D", PointLight2D::class, ::PointLight2D)
  TypeManager.registerEngineType("PointMesh", PointMesh::class, ::PointMesh)
  TypeManager.registerEngineType("Polygon2D", Polygon2D::class, ::Polygon2D)
  TypeManager.registerEngineType("PolygonOccluder3D", PolygonOccluder3D::class, ::PolygonOccluder3D)
  TypeManager.registerEngineType("PolygonPathFinder", PolygonPathFinder::class, ::PolygonPathFinder)
  TypeManager.registerEngineType("Popup", Popup::class, ::Popup)
  TypeManager.registerEngineType("PopupMenu", PopupMenu::class, ::PopupMenu)
  TypeManager.registerEngineType("PopupPanel", PopupPanel::class, ::PopupPanel)
  TypeManager.registerEngineType("PortableCompressedTexture2D", PortableCompressedTexture2D::class,
      ::PortableCompressedTexture2D)
  TypeManager.registerEngineType("PrimitiveMesh", PrimitiveMesh::class, ::PrimitiveMesh)
  TypeManager.registerEngineType("PrismMesh", PrismMesh::class, ::PrismMesh)
  TypeManager.registerEngineType("ProceduralSkyMaterial", ProceduralSkyMaterial::class,
      ::ProceduralSkyMaterial)
  TypeManager.registerEngineType("ProgressBar", ProgressBar::class, ::ProgressBar)
  TypeManager.registerEngineType("PropertyTweener", PropertyTweener::class, ::PropertyTweener)
  TypeManager.registerEngineType("QuadMesh", QuadMesh::class, ::QuadMesh)
  TypeManager.registerEngineType("QuadOccluder3D", QuadOccluder3D::class, ::QuadOccluder3D)
  TypeManager.registerEngineType("RDAttachmentFormat", RDAttachmentFormat::class,
      ::RDAttachmentFormat)
  TypeManager.registerEngineType("RDFramebufferPass", RDFramebufferPass::class, ::RDFramebufferPass)
  TypeManager.registerEngineType("RDPipelineColorBlendState", RDPipelineColorBlendState::class,
      ::RDPipelineColorBlendState)
  TypeManager.registerEngineType("RDPipelineColorBlendStateAttachment",
      RDPipelineColorBlendStateAttachment::class, ::RDPipelineColorBlendStateAttachment)
  TypeManager.registerEngineType("RDPipelineDepthStencilState", RDPipelineDepthStencilState::class,
      ::RDPipelineDepthStencilState)
  TypeManager.registerEngineType("RDPipelineMultisampleState", RDPipelineMultisampleState::class,
      ::RDPipelineMultisampleState)
  TypeManager.registerEngineType("RDPipelineRasterizationState",
      RDPipelineRasterizationState::class, ::RDPipelineRasterizationState)
  TypeManager.registerEngineType("RDPipelineSpecializationConstant",
      RDPipelineSpecializationConstant::class, ::RDPipelineSpecializationConstant)
  TypeManager.registerEngineType("RDSamplerState", RDSamplerState::class, ::RDSamplerState)
  TypeManager.registerEngineType("RDShaderFile", RDShaderFile::class, ::RDShaderFile)
  TypeManager.registerEngineType("RDShaderSPIRV", RDShaderSPIRV::class, ::RDShaderSPIRV)
  TypeManager.registerEngineType("RDShaderSource", RDShaderSource::class, ::RDShaderSource)
  TypeManager.registerEngineType("RDTextureFormat", RDTextureFormat::class, ::RDTextureFormat)
  TypeManager.registerEngineType("RDTextureView", RDTextureView::class, ::RDTextureView)
  TypeManager.registerEngineType("RDUniform", RDUniform::class, ::RDUniform)
  TypeManager.registerEngineType("RDVertexAttribute", RDVertexAttribute::class, ::RDVertexAttribute)
  TypeManager.registerEngineType("RandomNumberGenerator", RandomNumberGenerator::class,
      ::RandomNumberGenerator)
  TypeManager.registerEngineType("Range", Range::class, ::Range)
  TypeManager.registerEngineType("RayCast2D", RayCast2D::class, ::RayCast2D)
  TypeManager.registerEngineType("RayCast3D", RayCast3D::class, ::RayCast3D)
  TypeManager.registerEngineType("RectangleShape2D", RectangleShape2D::class, ::RectangleShape2D)
  TypeManager.registerEngineType("RefCounted", RefCounted::class, ::RefCounted)
  TypeManager.registerEngineType("ReferenceRect", ReferenceRect::class, ::ReferenceRect)
  TypeManager.registerEngineType("ReflectionProbe", ReflectionProbe::class, ::ReflectionProbe)
  TypeManager.registerEngineType("RegEx", RegEx::class, ::RegEx)
  TypeManager.registerEngineType("RegExMatch", RegExMatch::class, ::RegExMatch)
  TypeManager.registerEngineType("RemoteTransform2D", RemoteTransform2D::class, ::RemoteTransform2D)
  TypeManager.registerEngineType("RemoteTransform3D", RemoteTransform3D::class, ::RemoteTransform3D)
  TypeManager.registerEngineType("RenderingDevice", RenderingDevice::class, ::RenderingDevice)
  TypeManager.registerEngineType("Resource", Resource::class, ::Resource)
  TypeManager.registerEngineType("ResourceFormatImporterSaver", ResourceFormatImporterSaver::class,
      ::ResourceFormatImporterSaver)
  TypeManager.registerEngineType("ResourceFormatLoader", ResourceFormatLoader::class,
      ::ResourceFormatLoader)
  TypeManager.registerEngineType("ResourceFormatSaver", ResourceFormatSaver::class,
      ::ResourceFormatSaver)
  TypeManager.registerEngineType("ResourceImporter", ResourceImporter::class, ::ResourceImporter)
  TypeManager.registerEngineType("ResourcePreloader", ResourcePreloader::class, ::ResourcePreloader)
  TypeManager.registerEngineType("RibbonTrailMesh", RibbonTrailMesh::class, ::RibbonTrailMesh)
  TypeManager.registerEngineType("RichTextEffect", RichTextEffect::class, ::RichTextEffect)
  TypeManager.registerEngineType("RichTextLabel", RichTextLabel::class, ::RichTextLabel)
  TypeManager.registerEngineType("RigidBody2D", RigidBody2D::class, ::RigidBody2D)
  TypeManager.registerEngineType("RigidBody3D", RigidBody3D::class, ::RigidBody3D)
  TypeManager.registerEngineType("RootMotionView", RootMotionView::class, ::RootMotionView)
  TypeManager.registerEngineType("SceneMultiplayer", SceneMultiplayer::class, ::SceneMultiplayer)
  TypeManager.registerEngineType("SceneReplicationConfig", SceneReplicationConfig::class,
      ::SceneReplicationConfig)
  TypeManager.registerEngineType("SceneState", SceneState::class, ::SceneState)
  TypeManager.registerEngineType("SceneTree", SceneTree::class, ::SceneTree)
  TypeManager.registerEngineType("SceneTreeTimer", SceneTreeTimer::class, ::SceneTreeTimer)
  TypeManager.registerEngineType("Script", Script::class, ::Script)
  TypeManager.registerEngineType("ScriptCreateDialog", ScriptCreateDialog::class,
      ::ScriptCreateDialog)
  TypeManager.registerEngineType("ScriptEditor", ScriptEditor::class, ::ScriptEditor)
  TypeManager.registerEngineType("ScriptEditorBase", ScriptEditorBase::class, ::ScriptEditorBase)
  TypeManager.registerEngineType("ScriptExtension", ScriptExtension::class, ::ScriptExtension)
  TypeManager.registerEngineType("ScriptLanguage", ScriptLanguage::class, ::ScriptLanguage)
  TypeManager.registerEngineType("ScriptLanguageExtension", ScriptLanguageExtension::class,
      ::ScriptLanguageExtension)
  TypeManager.registerEngineType("ScrollBar", ScrollBar::class, ::ScrollBar)
  TypeManager.registerEngineType("ScrollContainer", ScrollContainer::class, ::ScrollContainer)
  TypeManager.registerEngineType("SegmentShape2D", SegmentShape2D::class, ::SegmentShape2D)
  TypeManager.registerEngineType("Semaphore", Semaphore::class, ::Semaphore)
  TypeManager.registerEngineType("SeparationRayShape2D", SeparationRayShape2D::class,
      ::SeparationRayShape2D)
  TypeManager.registerEngineType("SeparationRayShape3D", SeparationRayShape3D::class,
      ::SeparationRayShape3D)
  TypeManager.registerEngineType("Separator", Separator::class, ::Separator)
  TypeManager.registerEngineType("Shader", Shader::class, ::Shader)
  TypeManager.registerEngineType("ShaderGlobalsOverride", ShaderGlobalsOverride::class,
      ::ShaderGlobalsOverride)
  TypeManager.registerEngineType("ShaderInclude", ShaderInclude::class, ::ShaderInclude)
  TypeManager.registerEngineType("ShaderMaterial", ShaderMaterial::class, ::ShaderMaterial)
  TypeManager.registerEngineType("Shape2D", Shape2D::class, ::Shape2D)
  TypeManager.registerEngineType("Shape3D", Shape3D::class, ::Shape3D)
  TypeManager.registerEngineType("ShapeCast2D", ShapeCast2D::class, ::ShapeCast2D)
  TypeManager.registerEngineType("ShapeCast3D", ShapeCast3D::class, ::ShapeCast3D)
  TypeManager.registerEngineType("Shortcut", Shortcut::class, ::Shortcut)
  TypeManager.registerEngineType("Skeleton2D", Skeleton2D::class, ::Skeleton2D)
  TypeManager.registerEngineType("Skeleton3D", Skeleton3D::class, ::Skeleton3D)
  TypeManager.registerEngineType("SkeletonIK3D", SkeletonIK3D::class, ::SkeletonIK3D)
  TypeManager.registerEngineType("SkeletonModification2D", SkeletonModification2D::class,
      ::SkeletonModification2D)
  TypeManager.registerEngineType("SkeletonModification2DCCDIK", SkeletonModification2DCCDIK::class,
      ::SkeletonModification2DCCDIK)
  TypeManager.registerEngineType("SkeletonModification2DFABRIK",
      SkeletonModification2DFABRIK::class, ::SkeletonModification2DFABRIK)
  TypeManager.registerEngineType("SkeletonModification2DJiggle",
      SkeletonModification2DJiggle::class, ::SkeletonModification2DJiggle)
  TypeManager.registerEngineType("SkeletonModification2DLookAt",
      SkeletonModification2DLookAt::class, ::SkeletonModification2DLookAt)
  TypeManager.registerEngineType("SkeletonModification2DPhysicalBones",
      SkeletonModification2DPhysicalBones::class, ::SkeletonModification2DPhysicalBones)
  TypeManager.registerEngineType("SkeletonModification2DStackHolder",
      SkeletonModification2DStackHolder::class, ::SkeletonModification2DStackHolder)
  TypeManager.registerEngineType("SkeletonModification2DTwoBoneIK",
      SkeletonModification2DTwoBoneIK::class, ::SkeletonModification2DTwoBoneIK)
  TypeManager.registerEngineType("SkeletonModificationStack2D", SkeletonModificationStack2D::class,
      ::SkeletonModificationStack2D)
  TypeManager.registerEngineType("SkeletonProfile", SkeletonProfile::class, ::SkeletonProfile)
  TypeManager.registerEngineType("SkeletonProfileHumanoid", SkeletonProfileHumanoid::class,
      ::SkeletonProfileHumanoid)
  TypeManager.registerEngineType("Skin", Skin::class, ::Skin)
  TypeManager.registerEngineType("SkinReference", SkinReference::class, ::SkinReference)
  TypeManager.registerEngineType("Sky", Sky::class, ::Sky)
  TypeManager.registerEngineType("Slider", Slider::class, ::Slider)
  TypeManager.registerEngineType("SliderJoint3D", SliderJoint3D::class, ::SliderJoint3D)
  TypeManager.registerEngineType("SoftBody3D", SoftBody3D::class, ::SoftBody3D)
  TypeManager.registerEngineType("SphereMesh", SphereMesh::class, ::SphereMesh)
  TypeManager.registerEngineType("SphereOccluder3D", SphereOccluder3D::class, ::SphereOccluder3D)
  TypeManager.registerEngineType("SphereShape3D", SphereShape3D::class, ::SphereShape3D)
  TypeManager.registerEngineType("SpinBox", SpinBox::class, ::SpinBox)
  TypeManager.registerEngineType("SplitContainer", SplitContainer::class, ::SplitContainer)
  TypeManager.registerEngineType("SpotLight3D", SpotLight3D::class, ::SpotLight3D)
  TypeManager.registerEngineType("SpringArm3D", SpringArm3D::class, ::SpringArm3D)
  TypeManager.registerEngineType("Sprite2D", Sprite2D::class, ::Sprite2D)
  TypeManager.registerEngineType("Sprite3D", Sprite3D::class, ::Sprite3D)
  TypeManager.registerEngineType("SpriteBase3D", SpriteBase3D::class, ::SpriteBase3D)
  TypeManager.registerEngineType("SpriteFrames", SpriteFrames::class, ::SpriteFrames)
  TypeManager.registerEngineType("StandardMaterial3D", StandardMaterial3D::class,
      ::StandardMaterial3D)
  TypeManager.registerEngineType("StaticBody2D", StaticBody2D::class, ::StaticBody2D)
  TypeManager.registerEngineType("StaticBody3D", StaticBody3D::class, ::StaticBody3D)
  TypeManager.registerEngineType("StreamPeer", StreamPeer::class, ::StreamPeer)
  TypeManager.registerEngineType("StreamPeerBuffer", StreamPeerBuffer::class, ::StreamPeerBuffer)
  TypeManager.registerEngineType("StreamPeerExtension", StreamPeerExtension::class,
      ::StreamPeerExtension)
  TypeManager.registerEngineType("StreamPeerGZIP", StreamPeerGZIP::class, ::StreamPeerGZIP)
  TypeManager.registerEngineType("StreamPeerTCP", StreamPeerTCP::class, ::StreamPeerTCP)
  TypeManager.registerEngineType("StreamPeerTLS", StreamPeerTLS::class, ::StreamPeerTLS)
  TypeManager.registerEngineType("StyleBox", StyleBox::class, ::StyleBox)
  TypeManager.registerEngineType("StyleBoxEmpty", StyleBoxEmpty::class, ::StyleBoxEmpty)
  TypeManager.registerEngineType("StyleBoxFlat", StyleBoxFlat::class, ::StyleBoxFlat)
  TypeManager.registerEngineType("StyleBoxLine", StyleBoxLine::class, ::StyleBoxLine)
  TypeManager.registerEngineType("StyleBoxTexture", StyleBoxTexture::class, ::StyleBoxTexture)
  TypeManager.registerEngineType("SubViewport", SubViewport::class, ::SubViewport)
  TypeManager.registerEngineType("SubViewportContainer", SubViewportContainer::class,
      ::SubViewportContainer)
  TypeManager.registerEngineType("SurfaceTool", SurfaceTool::class, ::SurfaceTool)
  TypeManager.registerEngineType("SyntaxHighlighter", SyntaxHighlighter::class, ::SyntaxHighlighter)
  TypeManager.registerEngineType("SystemFont", SystemFont::class, ::SystemFont)
  TypeManager.registerEngineType("TCPServer", TCPServer::class, ::TCPServer)
  TypeManager.registerEngineType("TabBar", TabBar::class, ::TabBar)
  TypeManager.registerEngineType("TabContainer", TabContainer::class, ::TabContainer)
  TypeManager.registerEngineType("TextEdit", TextEdit::class, ::TextEdit)
  TypeManager.registerEngineType("TextLine", TextLine::class, ::TextLine)
  TypeManager.registerEngineType("TextMesh", TextMesh::class, ::TextMesh)
  TypeManager.registerEngineType("TextParagraph", TextParagraph::class, ::TextParagraph)
  TypeManager.registerEngineType("TextServer", TextServer::class, ::TextServer)
  TypeManager.registerEngineType("TextServerAdvanced", TextServerAdvanced::class,
      ::TextServerAdvanced)
  TypeManager.registerEngineType("TextServerDummy", TextServerDummy::class, ::TextServerDummy)
  TypeManager.registerEngineType("TextServerExtension", TextServerExtension::class,
      ::TextServerExtension)
  TypeManager.registerEngineType("Texture", Texture::class, ::Texture)
  TypeManager.registerEngineType("Texture2D", Texture2D::class, ::Texture2D)
  TypeManager.registerEngineType("Texture2DArray", Texture2DArray::class, ::Texture2DArray)
  TypeManager.registerEngineType("Texture3D", Texture3D::class, ::Texture3D)
  TypeManager.registerEngineType("TextureButton", TextureButton::class, ::TextureButton)
  TypeManager.registerEngineType("TextureLayered", TextureLayered::class, ::TextureLayered)
  TypeManager.registerEngineType("TextureProgressBar", TextureProgressBar::class,
      ::TextureProgressBar)
  TypeManager.registerEngineType("TextureRect", TextureRect::class, ::TextureRect)
  TypeManager.registerEngineType("Theme", Theme::class, ::Theme)
  TypeManager.registerEngineType("Thread", Thread::class, ::Thread)
  TypeManager.registerEngineType("TileData", TileData::class, ::TileData)
  TypeManager.registerEngineType("TileMap", TileMap::class, ::TileMap)
  TypeManager.registerEngineType("TileMapPattern", TileMapPattern::class, ::TileMapPattern)
  TypeManager.registerEngineType("TileSet", TileSet::class, ::TileSet)
  TypeManager.registerEngineType("TileSetAtlasSource", TileSetAtlasSource::class,
      ::TileSetAtlasSource)
  TypeManager.registerEngineType("TileSetScenesCollectionSource",
      TileSetScenesCollectionSource::class, ::TileSetScenesCollectionSource)
  TypeManager.registerEngineType("TileSetSource", TileSetSource::class, ::TileSetSource)
  TypeManager.registerEngineType("Timer", Timer::class, ::Timer)
  TypeManager.registerEngineType("TorusMesh", TorusMesh::class, ::TorusMesh)
  TypeManager.registerEngineType("TouchScreenButton", TouchScreenButton::class, ::TouchScreenButton)
  TypeManager.registerEngineType("Translation", Translation::class, ::Translation)
  TypeManager.registerEngineType("Tree", Tree::class, ::Tree)
  TypeManager.registerEngineType("TreeItem", TreeItem::class, ::TreeItem)
  TypeManager.registerEngineType("TriangleMesh", TriangleMesh::class, ::TriangleMesh)
  TypeManager.registerEngineType("TubeTrailMesh", TubeTrailMesh::class, ::TubeTrailMesh)
  TypeManager.registerEngineType("Tween", Tween::class, ::Tween)
  TypeManager.registerEngineType("Tweener", Tweener::class, ::Tweener)
  TypeManager.registerEngineType("UDPServer", UDPServer::class, ::UDPServer)
  TypeManager.registerEngineType("UPNP", UPNP::class, ::UPNP)
  TypeManager.registerEngineType("UPNPDevice", UPNPDevice::class, ::UPNPDevice)
  TypeManager.registerEngineType("UndoRedo", UndoRedo::class, ::UndoRedo)
  TypeManager.registerEngineType("UniformSetCacheRD", UniformSetCacheRD::class, ::UniformSetCacheRD)
  TypeManager.registerEngineType("VBoxContainer", VBoxContainer::class, ::VBoxContainer)
  TypeManager.registerEngineType("VFlowContainer", VFlowContainer::class, ::VFlowContainer)
  TypeManager.registerEngineType("VScrollBar", VScrollBar::class, ::VScrollBar)
  TypeManager.registerEngineType("VSeparator", VSeparator::class, ::VSeparator)
  TypeManager.registerEngineType("VSlider", VSlider::class, ::VSlider)
  TypeManager.registerEngineType("VSplitContainer", VSplitContainer::class, ::VSplitContainer)
  TypeManager.registerEngineType("VehicleBody3D", VehicleBody3D::class, ::VehicleBody3D)
  TypeManager.registerEngineType("VehicleWheel3D", VehicleWheel3D::class, ::VehicleWheel3D)
  TypeManager.registerEngineType("VideoStream", VideoStream::class, ::VideoStream)
  TypeManager.registerEngineType("VideoStreamPlayer", VideoStreamPlayer::class, ::VideoStreamPlayer)
  TypeManager.registerEngineType("VideoStreamTheora", VideoStreamTheora::class, ::VideoStreamTheora)
  TypeManager.registerEngineType("Viewport", Viewport::class, ::Viewport)
  TypeManager.registerEngineType("ViewportTexture", ViewportTexture::class, ::ViewportTexture)
  TypeManager.registerEngineType("VisibleOnScreenEnabler2D", VisibleOnScreenEnabler2D::class,
      ::VisibleOnScreenEnabler2D)
  TypeManager.registerEngineType("VisibleOnScreenEnabler3D", VisibleOnScreenEnabler3D::class,
      ::VisibleOnScreenEnabler3D)
  TypeManager.registerEngineType("VisibleOnScreenNotifier2D", VisibleOnScreenNotifier2D::class,
      ::VisibleOnScreenNotifier2D)
  TypeManager.registerEngineType("VisibleOnScreenNotifier3D", VisibleOnScreenNotifier3D::class,
      ::VisibleOnScreenNotifier3D)
  TypeManager.registerEngineType("VisualInstance3D", VisualInstance3D::class, ::VisualInstance3D)
  TypeManager.registerEngineType("VisualShader", VisualShader::class, ::VisualShader)
  TypeManager.registerEngineType("VisualShaderNode", VisualShaderNode::class, ::VisualShaderNode)
  TypeManager.registerEngineType("VisualShaderNodeBillboard", VisualShaderNodeBillboard::class,
      ::VisualShaderNodeBillboard)
  TypeManager.registerEngineType("VisualShaderNodeBooleanConstant",
      VisualShaderNodeBooleanConstant::class, ::VisualShaderNodeBooleanConstant)
  TypeManager.registerEngineType("VisualShaderNodeBooleanParameter",
      VisualShaderNodeBooleanParameter::class, ::VisualShaderNodeBooleanParameter)
  TypeManager.registerEngineType("VisualShaderNodeClamp", VisualShaderNodeClamp::class,
      ::VisualShaderNodeClamp)
  TypeManager.registerEngineType("VisualShaderNodeColorConstant",
      VisualShaderNodeColorConstant::class, ::VisualShaderNodeColorConstant)
  TypeManager.registerEngineType("VisualShaderNodeColorFunc", VisualShaderNodeColorFunc::class,
      ::VisualShaderNodeColorFunc)
  TypeManager.registerEngineType("VisualShaderNodeColorOp", VisualShaderNodeColorOp::class,
      ::VisualShaderNodeColorOp)
  TypeManager.registerEngineType("VisualShaderNodeColorParameter",
      VisualShaderNodeColorParameter::class, ::VisualShaderNodeColorParameter)
  TypeManager.registerEngineType("VisualShaderNodeComment", VisualShaderNodeComment::class,
      ::VisualShaderNodeComment)
  TypeManager.registerEngineType("VisualShaderNodeCompare", VisualShaderNodeCompare::class,
      ::VisualShaderNodeCompare)
  TypeManager.registerEngineType("VisualShaderNodeConstant", VisualShaderNodeConstant::class,
      ::VisualShaderNodeConstant)
  TypeManager.registerEngineType("VisualShaderNodeCubemap", VisualShaderNodeCubemap::class,
      ::VisualShaderNodeCubemap)
  TypeManager.registerEngineType("VisualShaderNodeCubemapParameter",
      VisualShaderNodeCubemapParameter::class, ::VisualShaderNodeCubemapParameter)
  TypeManager.registerEngineType("VisualShaderNodeCurveTexture",
      VisualShaderNodeCurveTexture::class, ::VisualShaderNodeCurveTexture)
  TypeManager.registerEngineType("VisualShaderNodeCurveXYZTexture",
      VisualShaderNodeCurveXYZTexture::class, ::VisualShaderNodeCurveXYZTexture)
  TypeManager.registerEngineType("VisualShaderNodeCustom", VisualShaderNodeCustom::class,
      ::VisualShaderNodeCustom)
  TypeManager.registerEngineType("VisualShaderNodeDerivativeFunc",
      VisualShaderNodeDerivativeFunc::class, ::VisualShaderNodeDerivativeFunc)
  TypeManager.registerEngineType("VisualShaderNodeDeterminant", VisualShaderNodeDeterminant::class,
      ::VisualShaderNodeDeterminant)
  TypeManager.registerEngineType("VisualShaderNodeDistanceFade",
      VisualShaderNodeDistanceFade::class, ::VisualShaderNodeDistanceFade)
  TypeManager.registerEngineType("VisualShaderNodeDotProduct", VisualShaderNodeDotProduct::class,
      ::VisualShaderNodeDotProduct)
  TypeManager.registerEngineType("VisualShaderNodeExpression", VisualShaderNodeExpression::class,
      ::VisualShaderNodeExpression)
  TypeManager.registerEngineType("VisualShaderNodeFaceForward", VisualShaderNodeFaceForward::class,
      ::VisualShaderNodeFaceForward)
  TypeManager.registerEngineType("VisualShaderNodeFloatConstant",
      VisualShaderNodeFloatConstant::class, ::VisualShaderNodeFloatConstant)
  TypeManager.registerEngineType("VisualShaderNodeFloatFunc", VisualShaderNodeFloatFunc::class,
      ::VisualShaderNodeFloatFunc)
  TypeManager.registerEngineType("VisualShaderNodeFloatOp", VisualShaderNodeFloatOp::class,
      ::VisualShaderNodeFloatOp)
  TypeManager.registerEngineType("VisualShaderNodeFloatParameter",
      VisualShaderNodeFloatParameter::class, ::VisualShaderNodeFloatParameter)
  TypeManager.registerEngineType("VisualShaderNodeFresnel", VisualShaderNodeFresnel::class,
      ::VisualShaderNodeFresnel)
  TypeManager.registerEngineType("VisualShaderNodeGlobalExpression",
      VisualShaderNodeGlobalExpression::class, ::VisualShaderNodeGlobalExpression)
  TypeManager.registerEngineType("VisualShaderNodeGroupBase", VisualShaderNodeGroupBase::class,
      ::VisualShaderNodeGroupBase)
  TypeManager.registerEngineType("VisualShaderNodeIf", VisualShaderNodeIf::class,
      ::VisualShaderNodeIf)
  TypeManager.registerEngineType("VisualShaderNodeInput", VisualShaderNodeInput::class,
      ::VisualShaderNodeInput)
  TypeManager.registerEngineType("VisualShaderNodeIntConstant", VisualShaderNodeIntConstant::class,
      ::VisualShaderNodeIntConstant)
  TypeManager.registerEngineType("VisualShaderNodeIntFunc", VisualShaderNodeIntFunc::class,
      ::VisualShaderNodeIntFunc)
  TypeManager.registerEngineType("VisualShaderNodeIntOp", VisualShaderNodeIntOp::class,
      ::VisualShaderNodeIntOp)
  TypeManager.registerEngineType("VisualShaderNodeIntParameter",
      VisualShaderNodeIntParameter::class, ::VisualShaderNodeIntParameter)
  TypeManager.registerEngineType("VisualShaderNodeIs", VisualShaderNodeIs::class,
      ::VisualShaderNodeIs)
  TypeManager.registerEngineType("VisualShaderNodeLinearSceneDepth",
      VisualShaderNodeLinearSceneDepth::class, ::VisualShaderNodeLinearSceneDepth)
  TypeManager.registerEngineType("VisualShaderNodeMix", VisualShaderNodeMix::class,
      ::VisualShaderNodeMix)
  TypeManager.registerEngineType("VisualShaderNodeMultiplyAdd", VisualShaderNodeMultiplyAdd::class,
      ::VisualShaderNodeMultiplyAdd)
  TypeManager.registerEngineType("VisualShaderNodeOuterProduct",
      VisualShaderNodeOuterProduct::class, ::VisualShaderNodeOuterProduct)
  TypeManager.registerEngineType("VisualShaderNodeOutput", VisualShaderNodeOutput::class,
      ::VisualShaderNodeOutput)
  TypeManager.registerEngineType("VisualShaderNodeParameter", VisualShaderNodeParameter::class,
      ::VisualShaderNodeParameter)
  TypeManager.registerEngineType("VisualShaderNodeParameterRef",
      VisualShaderNodeParameterRef::class, ::VisualShaderNodeParameterRef)
  TypeManager.registerEngineType("VisualShaderNodeParticleAccelerator",
      VisualShaderNodeParticleAccelerator::class, ::VisualShaderNodeParticleAccelerator)
  TypeManager.registerEngineType("VisualShaderNodeParticleBoxEmitter",
      VisualShaderNodeParticleBoxEmitter::class, ::VisualShaderNodeParticleBoxEmitter)
  TypeManager.registerEngineType("VisualShaderNodeParticleConeVelocity",
      VisualShaderNodeParticleConeVelocity::class, ::VisualShaderNodeParticleConeVelocity)
  TypeManager.registerEngineType("VisualShaderNodeParticleEmit",
      VisualShaderNodeParticleEmit::class, ::VisualShaderNodeParticleEmit)
  TypeManager.registerEngineType("VisualShaderNodeParticleEmitter",
      VisualShaderNodeParticleEmitter::class, ::VisualShaderNodeParticleEmitter)
  TypeManager.registerEngineType("VisualShaderNodeParticleMeshEmitter",
      VisualShaderNodeParticleMeshEmitter::class, ::VisualShaderNodeParticleMeshEmitter)
  TypeManager.registerEngineType("VisualShaderNodeParticleMultiplyByAxisAngle",
      VisualShaderNodeParticleMultiplyByAxisAngle::class,
      ::VisualShaderNodeParticleMultiplyByAxisAngle)
  TypeManager.registerEngineType("VisualShaderNodeParticleOutput",
      VisualShaderNodeParticleOutput::class, ::VisualShaderNodeParticleOutput)
  TypeManager.registerEngineType("VisualShaderNodeParticleRandomness",
      VisualShaderNodeParticleRandomness::class, ::VisualShaderNodeParticleRandomness)
  TypeManager.registerEngineType("VisualShaderNodeParticleRingEmitter",
      VisualShaderNodeParticleRingEmitter::class, ::VisualShaderNodeParticleRingEmitter)
  TypeManager.registerEngineType("VisualShaderNodeParticleSphereEmitter",
      VisualShaderNodeParticleSphereEmitter::class, ::VisualShaderNodeParticleSphereEmitter)
  TypeManager.registerEngineType("VisualShaderNodeProximityFade",
      VisualShaderNodeProximityFade::class, ::VisualShaderNodeProximityFade)
  TypeManager.registerEngineType("VisualShaderNodeRandomRange", VisualShaderNodeRandomRange::class,
      ::VisualShaderNodeRandomRange)
  TypeManager.registerEngineType("VisualShaderNodeRemap", VisualShaderNodeRemap::class,
      ::VisualShaderNodeRemap)
  TypeManager.registerEngineType("VisualShaderNodeResizableBase",
      VisualShaderNodeResizableBase::class, ::VisualShaderNodeResizableBase)
  TypeManager.registerEngineType("VisualShaderNodeSDFRaymarch", VisualShaderNodeSDFRaymarch::class,
      ::VisualShaderNodeSDFRaymarch)
  TypeManager.registerEngineType("VisualShaderNodeSDFToScreenUV",
      VisualShaderNodeSDFToScreenUV::class, ::VisualShaderNodeSDFToScreenUV)
  TypeManager.registerEngineType("VisualShaderNodeSample3D", VisualShaderNodeSample3D::class,
      ::VisualShaderNodeSample3D)
  TypeManager.registerEngineType("VisualShaderNodeScreenUVToSDF",
      VisualShaderNodeScreenUVToSDF::class, ::VisualShaderNodeScreenUVToSDF)
  TypeManager.registerEngineType("VisualShaderNodeSmoothStep", VisualShaderNodeSmoothStep::class,
      ::VisualShaderNodeSmoothStep)
  TypeManager.registerEngineType("VisualShaderNodeStep", VisualShaderNodeStep::class,
      ::VisualShaderNodeStep)
  TypeManager.registerEngineType("VisualShaderNodeSwitch", VisualShaderNodeSwitch::class,
      ::VisualShaderNodeSwitch)
  TypeManager.registerEngineType("VisualShaderNodeTexture", VisualShaderNodeTexture::class,
      ::VisualShaderNodeTexture)
  TypeManager.registerEngineType("VisualShaderNodeTexture2DArray",
      VisualShaderNodeTexture2DArray::class, ::VisualShaderNodeTexture2DArray)
  TypeManager.registerEngineType("VisualShaderNodeTexture2DArrayParameter",
      VisualShaderNodeTexture2DArrayParameter::class, ::VisualShaderNodeTexture2DArrayParameter)
  TypeManager.registerEngineType("VisualShaderNodeTexture2DParameter",
      VisualShaderNodeTexture2DParameter::class, ::VisualShaderNodeTexture2DParameter)
  TypeManager.registerEngineType("VisualShaderNodeTexture3D", VisualShaderNodeTexture3D::class,
      ::VisualShaderNodeTexture3D)
  TypeManager.registerEngineType("VisualShaderNodeTexture3DParameter",
      VisualShaderNodeTexture3DParameter::class, ::VisualShaderNodeTexture3DParameter)
  TypeManager.registerEngineType("VisualShaderNodeTextureParameter",
      VisualShaderNodeTextureParameter::class, ::VisualShaderNodeTextureParameter)
  TypeManager.registerEngineType("VisualShaderNodeTextureParameterTriplanar",
      VisualShaderNodeTextureParameterTriplanar::class, ::VisualShaderNodeTextureParameterTriplanar)
  TypeManager.registerEngineType("VisualShaderNodeTextureSDF", VisualShaderNodeTextureSDF::class,
      ::VisualShaderNodeTextureSDF)
  TypeManager.registerEngineType("VisualShaderNodeTextureSDFNormal",
      VisualShaderNodeTextureSDFNormal::class, ::VisualShaderNodeTextureSDFNormal)
  TypeManager.registerEngineType("VisualShaderNodeTransformCompose",
      VisualShaderNodeTransformCompose::class, ::VisualShaderNodeTransformCompose)
  TypeManager.registerEngineType("VisualShaderNodeTransformConstant",
      VisualShaderNodeTransformConstant::class, ::VisualShaderNodeTransformConstant)
  TypeManager.registerEngineType("VisualShaderNodeTransformDecompose",
      VisualShaderNodeTransformDecompose::class, ::VisualShaderNodeTransformDecompose)
  TypeManager.registerEngineType("VisualShaderNodeTransformFunc",
      VisualShaderNodeTransformFunc::class, ::VisualShaderNodeTransformFunc)
  TypeManager.registerEngineType("VisualShaderNodeTransformOp", VisualShaderNodeTransformOp::class,
      ::VisualShaderNodeTransformOp)
  TypeManager.registerEngineType("VisualShaderNodeTransformParameter",
      VisualShaderNodeTransformParameter::class, ::VisualShaderNodeTransformParameter)
  TypeManager.registerEngineType("VisualShaderNodeTransformVecMult",
      VisualShaderNodeTransformVecMult::class, ::VisualShaderNodeTransformVecMult)
  TypeManager.registerEngineType("VisualShaderNodeUIntConstant",
      VisualShaderNodeUIntConstant::class, ::VisualShaderNodeUIntConstant)
  TypeManager.registerEngineType("VisualShaderNodeUIntFunc", VisualShaderNodeUIntFunc::class,
      ::VisualShaderNodeUIntFunc)
  TypeManager.registerEngineType("VisualShaderNodeUIntOp", VisualShaderNodeUIntOp::class,
      ::VisualShaderNodeUIntOp)
  TypeManager.registerEngineType("VisualShaderNodeUIntParameter",
      VisualShaderNodeUIntParameter::class, ::VisualShaderNodeUIntParameter)
  TypeManager.registerEngineType("VisualShaderNodeUVFunc", VisualShaderNodeUVFunc::class,
      ::VisualShaderNodeUVFunc)
  TypeManager.registerEngineType("VisualShaderNodeUVPolarCoord",
      VisualShaderNodeUVPolarCoord::class, ::VisualShaderNodeUVPolarCoord)
  TypeManager.registerEngineType("VisualShaderNodeVarying", VisualShaderNodeVarying::class,
      ::VisualShaderNodeVarying)
  TypeManager.registerEngineType("VisualShaderNodeVaryingGetter",
      VisualShaderNodeVaryingGetter::class, ::VisualShaderNodeVaryingGetter)
  TypeManager.registerEngineType("VisualShaderNodeVaryingSetter",
      VisualShaderNodeVaryingSetter::class, ::VisualShaderNodeVaryingSetter)
  TypeManager.registerEngineType("VisualShaderNodeVec2Constant",
      VisualShaderNodeVec2Constant::class, ::VisualShaderNodeVec2Constant)
  TypeManager.registerEngineType("VisualShaderNodeVec2Parameter",
      VisualShaderNodeVec2Parameter::class, ::VisualShaderNodeVec2Parameter)
  TypeManager.registerEngineType("VisualShaderNodeVec3Constant",
      VisualShaderNodeVec3Constant::class, ::VisualShaderNodeVec3Constant)
  TypeManager.registerEngineType("VisualShaderNodeVec3Parameter",
      VisualShaderNodeVec3Parameter::class, ::VisualShaderNodeVec3Parameter)
  TypeManager.registerEngineType("VisualShaderNodeVec4Constant",
      VisualShaderNodeVec4Constant::class, ::VisualShaderNodeVec4Constant)
  TypeManager.registerEngineType("VisualShaderNodeVec4Parameter",
      VisualShaderNodeVec4Parameter::class, ::VisualShaderNodeVec4Parameter)
  TypeManager.registerEngineType("VisualShaderNodeVectorBase", VisualShaderNodeVectorBase::class,
      ::VisualShaderNodeVectorBase)
  TypeManager.registerEngineType("VisualShaderNodeVectorCompose",
      VisualShaderNodeVectorCompose::class, ::VisualShaderNodeVectorCompose)
  TypeManager.registerEngineType("VisualShaderNodeVectorDecompose",
      VisualShaderNodeVectorDecompose::class, ::VisualShaderNodeVectorDecompose)
  TypeManager.registerEngineType("VisualShaderNodeVectorDistance",
      VisualShaderNodeVectorDistance::class, ::VisualShaderNodeVectorDistance)
  TypeManager.registerEngineType("VisualShaderNodeVectorFunc", VisualShaderNodeVectorFunc::class,
      ::VisualShaderNodeVectorFunc)
  TypeManager.registerEngineType("VisualShaderNodeVectorLen", VisualShaderNodeVectorLen::class,
      ::VisualShaderNodeVectorLen)
  TypeManager.registerEngineType("VisualShaderNodeVectorOp", VisualShaderNodeVectorOp::class,
      ::VisualShaderNodeVectorOp)
  TypeManager.registerEngineType("VisualShaderNodeVectorRefract",
      VisualShaderNodeVectorRefract::class, ::VisualShaderNodeVectorRefract)
  TypeManager.registerEngineType("VoxelGI", VoxelGI::class, ::VoxelGI)
  TypeManager.registerEngineType("VoxelGIData", VoxelGIData::class, ::VoxelGIData)
  TypeManager.registerEngineType("WeakRef", WeakRef::class, ::WeakRef)
  TypeManager.registerEngineType("WebRTCDataChannel", WebRTCDataChannel::class, ::WebRTCDataChannel)
  TypeManager.registerEngineType("WebRTCDataChannelExtension", WebRTCDataChannelExtension::class,
      ::WebRTCDataChannelExtension)
  TypeManager.registerEngineType("WebRTCMultiplayerPeer", WebRTCMultiplayerPeer::class,
      ::WebRTCMultiplayerPeer)
  TypeManager.registerEngineType("WebRTCPeerConnection", WebRTCPeerConnection::class,
      ::WebRTCPeerConnection)
  TypeManager.registerEngineType("WebRTCPeerConnectionExtension",
      WebRTCPeerConnectionExtension::class, ::WebRTCPeerConnectionExtension)
  TypeManager.registerEngineType("WebSocketMultiplayerPeer", WebSocketMultiplayerPeer::class,
      ::WebSocketMultiplayerPeer)
  TypeManager.registerEngineType("WebSocketPeer", WebSocketPeer::class, ::WebSocketPeer)
  TypeManager.registerEngineType("WebXRInterface", WebXRInterface::class, ::WebXRInterface)
  TypeManager.registerEngineType("Window", Window::class, ::Window)
  TypeManager.registerEngineType("World2D", World2D::class, ::World2D)
  TypeManager.registerEngineType("World3D", World3D::class, ::World3D)
  TypeManager.registerEngineType("WorldBoundaryShape2D", WorldBoundaryShape2D::class,
      ::WorldBoundaryShape2D)
  TypeManager.registerEngineType("WorldBoundaryShape3D", WorldBoundaryShape3D::class,
      ::WorldBoundaryShape3D)
  TypeManager.registerEngineType("WorldEnvironment", WorldEnvironment::class, ::WorldEnvironment)
  TypeManager.registerEngineType("X509Certificate", X509Certificate::class, ::X509Certificate)
  TypeManager.registerEngineType("XMLParser", XMLParser::class, ::XMLParser)
  TypeManager.registerEngineType("XRAnchor3D", XRAnchor3D::class, ::XRAnchor3D)
  TypeManager.registerEngineType("XRCamera3D", XRCamera3D::class, ::XRCamera3D)
  TypeManager.registerEngineType("XRController3D", XRController3D::class, ::XRController3D)
  TypeManager.registerEngineType("XRInterface", XRInterface::class, ::XRInterface)
  TypeManager.registerEngineType("XRInterfaceExtension", XRInterfaceExtension::class,
      ::XRInterfaceExtension)
  TypeManager.registerEngineType("XRNode3D", XRNode3D::class, ::XRNode3D)
  TypeManager.registerEngineType("XROrigin3D", XROrigin3D::class, ::XROrigin3D)
  TypeManager.registerEngineType("XRPose", XRPose::class, ::XRPose)
  TypeManager.registerEngineType("XRPositionalTracker", XRPositionalTracker::class,
      ::XRPositionalTracker)
  TypeManager.registerEngineType("ZIPPacker", ZIPPacker::class, ::ZIPPacker)
  TypeManager.registerEngineType("ZIPReader", ZIPReader::class, ::ZIPReader)
}

public fun registerVariantMapping(): Unit {
  variantMapper[Performance::class] = OBJECT
  variantMapper[TextServerManager::class] = OBJECT
  variantMapper[PhysicsServer2DManager::class] = OBJECT
  variantMapper[PhysicsServer3DManager::class] = OBJECT
  variantMapper[NavigationMeshGenerator::class] = OBJECT
  variantMapper[ProjectSettings::class] = OBJECT
  variantMapper[IP::class] = OBJECT
  variantMapper[Geometry2D::class] = OBJECT
  variantMapper[Geometry3D::class] = OBJECT
  variantMapper[ResourceLoader::class] = OBJECT
  variantMapper[ResourceSaver::class] = OBJECT
  variantMapper[OS::class] = OBJECT
  variantMapper[Engine::class] = OBJECT
  variantMapper[ClassDB::class] = OBJECT
  variantMapper[Marshalls::class] = OBJECT
  variantMapper[TranslationServer::class] = OBJECT
  variantMapper[Input::class] = OBJECT
  variantMapper[InputMap::class] = OBJECT
  variantMapper[EngineDebugger::class] = OBJECT
  variantMapper[Time::class] = OBJECT
  variantMapper[GDExtensionManager::class] = OBJECT
  variantMapper[ResourceUID::class] = OBJECT
  variantMapper[WorkerThreadPool::class] = OBJECT
  variantMapper[JavaClassWrapper::class] = OBJECT
  variantMapper[JavaScriptBridge::class] = OBJECT
  variantMapper[ThemeDB::class] = OBJECT
  variantMapper[DisplayServer::class] = OBJECT
  variantMapper[RenderingServer::class] = OBJECT
  variantMapper[AudioServer::class] = OBJECT
  variantMapper[PhysicsServer2D::class] = OBJECT
  variantMapper[PhysicsServer3D::class] = OBJECT
  variantMapper[NavigationServer2D::class] = OBJECT
  variantMapper[NavigationServer3D::class] = OBJECT
  variantMapper[XRServer::class] = OBJECT
  variantMapper[CameraServer::class] = OBJECT
  variantMapper[AESContext::class] = OBJECT
  variantMapper[AStar2D::class] = OBJECT
  variantMapper[AStar3D::class] = OBJECT
  variantMapper[AStarGrid2D::class] = OBJECT
  variantMapper[AcceptDialog::class] = OBJECT
  variantMapper[AnimatableBody2D::class] = OBJECT
  variantMapper[AnimatableBody3D::class] = OBJECT
  variantMapper[AnimatedSprite2D::class] = OBJECT
  variantMapper[AnimatedSprite3D::class] = OBJECT
  variantMapper[AnimatedTexture::class] = OBJECT
  variantMapper[Animation::class] = OBJECT
  variantMapper[AnimationLibrary::class] = OBJECT
  variantMapper[AnimationNode::class] = OBJECT
  variantMapper[AnimationNodeAdd2::class] = OBJECT
  variantMapper[AnimationNodeAdd3::class] = OBJECT
  variantMapper[AnimationNodeAnimation::class] = OBJECT
  variantMapper[AnimationNodeBlend2::class] = OBJECT
  variantMapper[AnimationNodeBlend3::class] = OBJECT
  variantMapper[AnimationNodeBlendSpace1D::class] = OBJECT
  variantMapper[AnimationNodeBlendSpace2D::class] = OBJECT
  variantMapper[AnimationNodeBlendTree::class] = OBJECT
  variantMapper[AnimationNodeOneShot::class] = OBJECT
  variantMapper[AnimationNodeOutput::class] = OBJECT
  variantMapper[AnimationNodeStateMachine::class] = OBJECT
  variantMapper[AnimationNodeStateMachinePlayback::class] = OBJECT
  variantMapper[AnimationNodeStateMachineTransition::class] = OBJECT
  variantMapper[AnimationNodeSync::class] = OBJECT
  variantMapper[AnimationNodeTimeScale::class] = OBJECT
  variantMapper[AnimationNodeTimeSeek::class] = OBJECT
  variantMapper[AnimationNodeTransition::class] = OBJECT
  variantMapper[AnimationPlayer::class] = OBJECT
  variantMapper[AnimationRootNode::class] = OBJECT
  variantMapper[AnimationTrackEditPlugin::class] = OBJECT
  variantMapper[AnimationTree::class] = OBJECT
  variantMapper[Area2D::class] = OBJECT
  variantMapper[Area3D::class] = OBJECT
  variantMapper[ArrayMesh::class] = OBJECT
  variantMapper[ArrayOccluder3D::class] = OBJECT
  variantMapper[AspectRatioContainer::class] = OBJECT
  variantMapper[AtlasTexture::class] = OBJECT
  variantMapper[AudioBusLayout::class] = OBJECT
  variantMapper[AudioEffect::class] = OBJECT
  variantMapper[AudioEffectAmplify::class] = OBJECT
  variantMapper[AudioEffectBandLimitFilter::class] = OBJECT
  variantMapper[AudioEffectBandPassFilter::class] = OBJECT
  variantMapper[AudioEffectCapture::class] = OBJECT
  variantMapper[AudioEffectChorus::class] = OBJECT
  variantMapper[AudioEffectCompressor::class] = OBJECT
  variantMapper[AudioEffectDelay::class] = OBJECT
  variantMapper[AudioEffectDistortion::class] = OBJECT
  variantMapper[AudioEffectEQ::class] = OBJECT
  variantMapper[AudioEffectEQ10::class] = OBJECT
  variantMapper[AudioEffectEQ21::class] = OBJECT
  variantMapper[AudioEffectEQ6::class] = OBJECT
  variantMapper[AudioEffectFilter::class] = OBJECT
  variantMapper[AudioEffectHighPassFilter::class] = OBJECT
  variantMapper[AudioEffectHighShelfFilter::class] = OBJECT
  variantMapper[AudioEffectInstance::class] = OBJECT
  variantMapper[AudioEffectLimiter::class] = OBJECT
  variantMapper[AudioEffectLowPassFilter::class] = OBJECT
  variantMapper[AudioEffectLowShelfFilter::class] = OBJECT
  variantMapper[AudioEffectNotchFilter::class] = OBJECT
  variantMapper[AudioEffectPanner::class] = OBJECT
  variantMapper[AudioEffectPhaser::class] = OBJECT
  variantMapper[AudioEffectPitchShift::class] = OBJECT
  variantMapper[AudioEffectRecord::class] = OBJECT
  variantMapper[AudioEffectReverb::class] = OBJECT
  variantMapper[AudioEffectSpectrumAnalyzer::class] = OBJECT
  variantMapper[AudioEffectSpectrumAnalyzerInstance::class] = OBJECT
  variantMapper[AudioEffectStereoEnhance::class] = OBJECT
  variantMapper[AudioListener2D::class] = OBJECT
  variantMapper[AudioListener3D::class] = OBJECT
  variantMapper[AudioStream::class] = OBJECT
  variantMapper[AudioStreamGenerator::class] = OBJECT
  variantMapper[AudioStreamGeneratorPlayback::class] = OBJECT
  variantMapper[AudioStreamMP3::class] = OBJECT
  variantMapper[AudioStreamMicrophone::class] = OBJECT
  variantMapper[AudioStreamOggVorbis::class] = OBJECT
  variantMapper[AudioStreamPlayback::class] = OBJECT
  variantMapper[AudioStreamPlaybackOggVorbis::class] = OBJECT
  variantMapper[AudioStreamPlaybackResampled::class] = OBJECT
  variantMapper[AudioStreamPlayer::class] = OBJECT
  variantMapper[AudioStreamPlayer2D::class] = OBJECT
  variantMapper[AudioStreamPlayer3D::class] = OBJECT
  variantMapper[AudioStreamRandomizer::class] = OBJECT
  variantMapper[AudioStreamWAV::class] = OBJECT
  variantMapper[BackBufferCopy::class] = OBJECT
  variantMapper[BaseButton::class] = OBJECT
  variantMapper[BaseMaterial3D::class] = OBJECT
  variantMapper[BitMap::class] = OBJECT
  variantMapper[Bone2D::class] = OBJECT
  variantMapper[BoneAttachment3D::class] = OBJECT
  variantMapper[BoneMap::class] = OBJECT
  variantMapper[BoxContainer::class] = OBJECT
  variantMapper[BoxMesh::class] = OBJECT
  variantMapper[BoxOccluder3D::class] = OBJECT
  variantMapper[BoxShape3D::class] = OBJECT
  variantMapper[Button::class] = OBJECT
  variantMapper[ButtonGroup::class] = OBJECT
  variantMapper[CPUParticles2D::class] = OBJECT
  variantMapper[CPUParticles3D::class] = OBJECT
  variantMapper[CSGBox3D::class] = OBJECT
  variantMapper[CSGCombiner3D::class] = OBJECT
  variantMapper[CSGCylinder3D::class] = OBJECT
  variantMapper[CSGMesh3D::class] = OBJECT
  variantMapper[CSGPolygon3D::class] = OBJECT
  variantMapper[CSGPrimitive3D::class] = OBJECT
  variantMapper[CSGShape3D::class] = OBJECT
  variantMapper[CSGSphere3D::class] = OBJECT
  variantMapper[CSGTorus3D::class] = OBJECT
  variantMapper[CallbackTweener::class] = OBJECT
  variantMapper[Camera2D::class] = OBJECT
  variantMapper[Camera3D::class] = OBJECT
  variantMapper[CameraAttributes::class] = OBJECT
  variantMapper[CameraAttributesPhysical::class] = OBJECT
  variantMapper[CameraAttributesPractical::class] = OBJECT
  variantMapper[CameraFeed::class] = OBJECT
  variantMapper[CameraTexture::class] = OBJECT
  variantMapper[CanvasGroup::class] = OBJECT
  variantMapper[CanvasItem::class] = OBJECT
  variantMapper[CanvasItemMaterial::class] = OBJECT
  variantMapper[CanvasLayer::class] = OBJECT
  variantMapper[CanvasModulate::class] = OBJECT
  variantMapper[CanvasTexture::class] = OBJECT
  variantMapper[CapsuleMesh::class] = OBJECT
  variantMapper[CapsuleShape2D::class] = OBJECT
  variantMapper[CapsuleShape3D::class] = OBJECT
  variantMapper[CenterContainer::class] = OBJECT
  variantMapper[CharFXTransform::class] = OBJECT
  variantMapper[CharacterBody2D::class] = OBJECT
  variantMapper[CharacterBody3D::class] = OBJECT
  variantMapper[CheckBox::class] = OBJECT
  variantMapper[CheckButton::class] = OBJECT
  variantMapper[CircleShape2D::class] = OBJECT
  variantMapper[CodeEdit::class] = OBJECT
  variantMapper[CodeHighlighter::class] = OBJECT
  variantMapper[CollisionObject2D::class] = OBJECT
  variantMapper[CollisionObject3D::class] = OBJECT
  variantMapper[CollisionPolygon2D::class] = OBJECT
  variantMapper[CollisionPolygon3D::class] = OBJECT
  variantMapper[CollisionShape2D::class] = OBJECT
  variantMapper[CollisionShape3D::class] = OBJECT
  variantMapper[ColorPicker::class] = OBJECT
  variantMapper[ColorPickerButton::class] = OBJECT
  variantMapper[ColorRect::class] = OBJECT
  variantMapper[CompressedCubemap::class] = OBJECT
  variantMapper[CompressedCubemapArray::class] = OBJECT
  variantMapper[CompressedTexture2D::class] = OBJECT
  variantMapper[CompressedTexture2DArray::class] = OBJECT
  variantMapper[CompressedTexture3D::class] = OBJECT
  variantMapper[CompressedTextureLayered::class] = OBJECT
  variantMapper[ConcavePolygonShape2D::class] = OBJECT
  variantMapper[ConcavePolygonShape3D::class] = OBJECT
  variantMapper[ConeTwistJoint3D::class] = OBJECT
  variantMapper[ConfigFile::class] = OBJECT
  variantMapper[ConfirmationDialog::class] = OBJECT
  variantMapper[Container::class] = OBJECT
  variantMapper[Control::class] = OBJECT
  variantMapper[ConvexPolygonShape2D::class] = OBJECT
  variantMapper[ConvexPolygonShape3D::class] = OBJECT
  variantMapper[Crypto::class] = OBJECT
  variantMapper[CryptoKey::class] = OBJECT
  variantMapper[Cubemap::class] = OBJECT
  variantMapper[CubemapArray::class] = OBJECT
  variantMapper[Curve::class] = OBJECT
  variantMapper[Curve2D::class] = OBJECT
  variantMapper[Curve3D::class] = OBJECT
  variantMapper[CurveTexture::class] = OBJECT
  variantMapper[CurveXYZTexture::class] = OBJECT
  variantMapper[CylinderMesh::class] = OBJECT
  variantMapper[CylinderShape3D::class] = OBJECT
  variantMapper[DTLSServer::class] = OBJECT
  variantMapper[DampedSpringJoint2D::class] = OBJECT
  variantMapper[Decal::class] = OBJECT
  variantMapper[DirAccess::class] = OBJECT
  variantMapper[DirectionalLight2D::class] = OBJECT
  variantMapper[DirectionalLight3D::class] = OBJECT
  variantMapper[ENetConnection::class] = OBJECT
  variantMapper[ENetMultiplayerPeer::class] = OBJECT
  variantMapper[ENetPacketPeer::class] = OBJECT
  variantMapper[EditorCommandPalette::class] = OBJECT
  variantMapper[EditorDebuggerPlugin::class] = OBJECT
  variantMapper[EditorDebuggerSession::class] = OBJECT
  variantMapper[EditorExportPlatform::class] = OBJECT
  variantMapper[EditorExportPlugin::class] = OBJECT
  variantMapper[EditorFeatureProfile::class] = OBJECT
  variantMapper[EditorFileDialog::class] = OBJECT
  variantMapper[EditorFileSystem::class] = OBJECT
  variantMapper[EditorFileSystemDirectory::class] = OBJECT
  variantMapper[EditorFileSystemImportFormatSupportQuery::class] = OBJECT
  variantMapper[EditorImportPlugin::class] = OBJECT
  variantMapper[EditorInspector::class] = OBJECT
  variantMapper[EditorInspectorPlugin::class] = OBJECT
  variantMapper[EditorInterface::class] = OBJECT
  variantMapper[EditorNode3DGizmo::class] = OBJECT
  variantMapper[EditorNode3DGizmoPlugin::class] = OBJECT
  variantMapper[EditorPaths::class] = OBJECT
  variantMapper[EditorPlugin::class] = OBJECT
  variantMapper[EditorProperty::class] = OBJECT
  variantMapper[EditorResourceConversionPlugin::class] = OBJECT
  variantMapper[EditorResourcePicker::class] = OBJECT
  variantMapper[EditorResourcePreview::class] = OBJECT
  variantMapper[EditorResourcePreviewGenerator::class] = OBJECT
  variantMapper[EditorSceneFormatImporter::class] = OBJECT
  variantMapper[EditorSceneFormatImporterBlend::class] = OBJECT
  variantMapper[EditorSceneFormatImporterFBX::class] = OBJECT
  variantMapper[EditorSceneFormatImporterGLTF::class] = OBJECT
  variantMapper[EditorScenePostImport::class] = OBJECT
  variantMapper[EditorScenePostImportPlugin::class] = OBJECT
  variantMapper[EditorScript::class] = OBJECT
  variantMapper[EditorScriptPicker::class] = OBJECT
  variantMapper[EditorSelection::class] = OBJECT
  variantMapper[EditorSettings::class] = OBJECT
  variantMapper[EditorSpinSlider::class] = OBJECT
  variantMapper[EditorSyntaxHighlighter::class] = OBJECT
  variantMapper[EditorTranslationParserPlugin::class] = OBJECT
  variantMapper[EditorUndoRedoManager::class] = OBJECT
  variantMapper[EditorVCSInterface::class] = OBJECT
  variantMapper[EncodedObjectAsID::class] = OBJECT
  variantMapper[EngineProfiler::class] = OBJECT
  variantMapper[Environment::class] = OBJECT
  variantMapper[Expression::class] = OBJECT
  variantMapper[FastNoiseLite::class] = OBJECT
  variantMapper[FileAccess::class] = OBJECT
  variantMapper[FileDialog::class] = OBJECT
  variantMapper[FileSystemDock::class] = OBJECT
  variantMapper[FlowContainer::class] = OBJECT
  variantMapper[FogMaterial::class] = OBJECT
  variantMapper[FogVolume::class] = OBJECT
  variantMapper[Font::class] = OBJECT
  variantMapper[FontFile::class] = OBJECT
  variantMapper[FontVariation::class] = OBJECT
  variantMapper[FramebufferCacheRD::class] = OBJECT
  variantMapper[GDExtension::class] = OBJECT
  variantMapper[GDScript::class] = OBJECT
  variantMapper[GDScriptEditorTranslationParserPlugin::class] = OBJECT
  variantMapper[GDScriptNativeClass::class] = OBJECT
  variantMapper[GLTFAccessor::class] = OBJECT
  variantMapper[GLTFAnimation::class] = OBJECT
  variantMapper[GLTFBufferView::class] = OBJECT
  variantMapper[GLTFCamera::class] = OBJECT
  variantMapper[GLTFDocument::class] = OBJECT
  variantMapper[GLTFDocumentExtension::class] = OBJECT
  variantMapper[GLTFDocumentExtensionConvertImporterMesh::class] = OBJECT
  variantMapper[GLTFLight::class] = OBJECT
  variantMapper[GLTFMesh::class] = OBJECT
  variantMapper[GLTFNode::class] = OBJECT
  variantMapper[GLTFSkeleton::class] = OBJECT
  variantMapper[GLTFSkin::class] = OBJECT
  variantMapper[GLTFSpecGloss::class] = OBJECT
  variantMapper[GLTFState::class] = OBJECT
  variantMapper[GLTFTexture::class] = OBJECT
  variantMapper[GLTFTextureSampler::class] = OBJECT
  variantMapper[GPUParticles2D::class] = OBJECT
  variantMapper[GPUParticles3D::class] = OBJECT
  variantMapper[GPUParticlesAttractor3D::class] = OBJECT
  variantMapper[GPUParticlesAttractorBox3D::class] = OBJECT
  variantMapper[GPUParticlesAttractorSphere3D::class] = OBJECT
  variantMapper[GPUParticlesAttractorVectorField3D::class] = OBJECT
  variantMapper[GPUParticlesCollision3D::class] = OBJECT
  variantMapper[GPUParticlesCollisionBox3D::class] = OBJECT
  variantMapper[GPUParticlesCollisionHeightField3D::class] = OBJECT
  variantMapper[GPUParticlesCollisionSDF3D::class] = OBJECT
  variantMapper[GPUParticlesCollisionSphere3D::class] = OBJECT
  variantMapper[Generic6DOFJoint3D::class] = OBJECT
  variantMapper[GeometryInstance3D::class] = OBJECT
  variantMapper[Gradient::class] = OBJECT
  variantMapper[GradientTexture1D::class] = OBJECT
  variantMapper[GradientTexture2D::class] = OBJECT
  variantMapper[GraphEdit::class] = OBJECT
  variantMapper[GraphNode::class] = OBJECT
  variantMapper[GridContainer::class] = OBJECT
  variantMapper[GridMap::class] = OBJECT
  variantMapper[GrooveJoint2D::class] = OBJECT
  variantMapper[HBoxContainer::class] = OBJECT
  variantMapper[HFlowContainer::class] = OBJECT
  variantMapper[HMACContext::class] = OBJECT
  variantMapper[HScrollBar::class] = OBJECT
  variantMapper[HSeparator::class] = OBJECT
  variantMapper[HSlider::class] = OBJECT
  variantMapper[HSplitContainer::class] = OBJECT
  variantMapper[HTTPClient::class] = OBJECT
  variantMapper[HTTPRequest::class] = OBJECT
  variantMapper[HashingContext::class] = OBJECT
  variantMapper[HeightMapShape3D::class] = OBJECT
  variantMapper[HingeJoint3D::class] = OBJECT
  variantMapper[Image::class] = OBJECT
  variantMapper[ImageFormatLoader::class] = OBJECT
  variantMapper[ImageFormatLoaderExtension::class] = OBJECT
  variantMapper[ImageTexture::class] = OBJECT
  variantMapper[ImageTexture3D::class] = OBJECT
  variantMapper[ImageTextureLayered::class] = OBJECT
  variantMapper[ImmediateMesh::class] = OBJECT
  variantMapper[ImporterMesh::class] = OBJECT
  variantMapper[ImporterMeshInstance3D::class] = OBJECT
  variantMapper[InputEvent::class] = OBJECT
  variantMapper[InputEventAction::class] = OBJECT
  variantMapper[InputEventFromWindow::class] = OBJECT
  variantMapper[InputEventGesture::class] = OBJECT
  variantMapper[InputEventJoypadButton::class] = OBJECT
  variantMapper[InputEventJoypadMotion::class] = OBJECT
  variantMapper[InputEventKey::class] = OBJECT
  variantMapper[InputEventMIDI::class] = OBJECT
  variantMapper[InputEventMagnifyGesture::class] = OBJECT
  variantMapper[InputEventMouse::class] = OBJECT
  variantMapper[InputEventMouseButton::class] = OBJECT
  variantMapper[InputEventMouseMotion::class] = OBJECT
  variantMapper[InputEventPanGesture::class] = OBJECT
  variantMapper[InputEventScreenDrag::class] = OBJECT
  variantMapper[InputEventScreenTouch::class] = OBJECT
  variantMapper[InputEventShortcut::class] = OBJECT
  variantMapper[InputEventWithModifiers::class] = OBJECT
  variantMapper[InstancePlaceholder::class] = OBJECT
  variantMapper[IntervalTweener::class] = OBJECT
  variantMapper[ItemList::class] = OBJECT
  variantMapper[JNISingleton::class] = OBJECT
  variantMapper[JSON::class] = OBJECT
  variantMapper[JSONRPC::class] = OBJECT
  variantMapper[JavaClass::class] = OBJECT
  variantMapper[JavaScriptObject::class] = OBJECT
  variantMapper[Joint2D::class] = OBJECT
  variantMapper[Joint3D::class] = OBJECT
  variantMapper[KinematicCollision2D::class] = OBJECT
  variantMapper[KinematicCollision3D::class] = OBJECT
  variantMapper[KotlinScript::class] = OBJECT
  variantMapper[Label::class] = OBJECT
  variantMapper[Label3D::class] = OBJECT
  variantMapper[LabelSettings::class] = OBJECT
  variantMapper[Light2D::class] = OBJECT
  variantMapper[Light3D::class] = OBJECT
  variantMapper[LightOccluder2D::class] = OBJECT
  variantMapper[LightmapGI::class] = OBJECT
  variantMapper[LightmapGIData::class] = OBJECT
  variantMapper[LightmapProbe::class] = OBJECT
  variantMapper[Lightmapper::class] = OBJECT
  variantMapper[LightmapperRD::class] = OBJECT
  variantMapper[Line2D::class] = OBJECT
  variantMapper[LineEdit::class] = OBJECT
  variantMapper[LinkButton::class] = OBJECT
  variantMapper[MainLoop::class] = OBJECT
  variantMapper[MarginContainer::class] = OBJECT
  variantMapper[Marker2D::class] = OBJECT
  variantMapper[Marker3D::class] = OBJECT
  variantMapper[Material::class] = OBJECT
  variantMapper[MenuBar::class] = OBJECT
  variantMapper[MenuButton::class] = OBJECT
  variantMapper[Mesh::class] = OBJECT
  variantMapper[MeshDataTool::class] = OBJECT
  variantMapper[MeshInstance2D::class] = OBJECT
  variantMapper[MeshInstance3D::class] = OBJECT
  variantMapper[MeshLibrary::class] = OBJECT
  variantMapper[MeshTexture::class] = OBJECT
  variantMapper[MethodTweener::class] = OBJECT
  variantMapper[MissingNode::class] = OBJECT
  variantMapper[MissingResource::class] = OBJECT
  variantMapper[MobileVRInterface::class] = OBJECT
  variantMapper[MovieWriter::class] = OBJECT
  variantMapper[MovieWriterMJPEG::class] = OBJECT
  variantMapper[MovieWriterPNGWAV::class] = OBJECT
  variantMapper[MultiMesh::class] = OBJECT
  variantMapper[MultiMeshInstance2D::class] = OBJECT
  variantMapper[MultiMeshInstance3D::class] = OBJECT
  variantMapper[MultiplayerAPI::class] = OBJECT
  variantMapper[MultiplayerAPIExtension::class] = OBJECT
  variantMapper[MultiplayerPeer::class] = OBJECT
  variantMapper[MultiplayerPeerExtension::class] = OBJECT
  variantMapper[MultiplayerSpawner::class] = OBJECT
  variantMapper[MultiplayerSynchronizer::class] = OBJECT
  variantMapper[Mutex::class] = OBJECT
  variantMapper[NavigationAgent2D::class] = OBJECT
  variantMapper[NavigationAgent3D::class] = OBJECT
  variantMapper[NavigationLink2D::class] = OBJECT
  variantMapper[NavigationLink3D::class] = OBJECT
  variantMapper[NavigationMesh::class] = OBJECT
  variantMapper[NavigationObstacle2D::class] = OBJECT
  variantMapper[NavigationObstacle3D::class] = OBJECT
  variantMapper[NavigationPathQueryParameters2D::class] = OBJECT
  variantMapper[NavigationPathQueryParameters3D::class] = OBJECT
  variantMapper[NavigationPathQueryResult2D::class] = OBJECT
  variantMapper[NavigationPathQueryResult3D::class] = OBJECT
  variantMapper[NavigationPolygon::class] = OBJECT
  variantMapper[NavigationRegion2D::class] = OBJECT
  variantMapper[NavigationRegion3D::class] = OBJECT
  variantMapper[NinePatchRect::class] = OBJECT
  variantMapper[Node::class] = OBJECT
  variantMapper[Node2D::class] = OBJECT
  variantMapper[Node3D::class] = OBJECT
  variantMapper[Node3DGizmo::class] = OBJECT
  variantMapper[Noise::class] = OBJECT
  variantMapper[NoiseTexture2D::class] = OBJECT
  variantMapper[ORMMaterial3D::class] = OBJECT
  variantMapper[Object::class] = OBJECT
  variantMapper[Occluder3D::class] = OBJECT
  variantMapper[OccluderInstance3D::class] = OBJECT
  variantMapper[OccluderPolygon2D::class] = OBJECT
  variantMapper[OfflineMultiplayerPeer::class] = OBJECT
  variantMapper[OggPacketSequence::class] = OBJECT
  variantMapper[OggPacketSequencePlayback::class] = OBJECT
  variantMapper[OmniLight3D::class] = OBJECT
  variantMapper[OptimizedTranslation::class] = OBJECT
  variantMapper[OptionButton::class] = OBJECT
  variantMapper[PCKPacker::class] = OBJECT
  variantMapper[PackedDataContainer::class] = OBJECT
  variantMapper[PackedDataContainerRef::class] = OBJECT
  variantMapper[PackedScene::class] = OBJECT
  variantMapper[PacketPeer::class] = OBJECT
  variantMapper[PacketPeerDTLS::class] = OBJECT
  variantMapper[PacketPeerExtension::class] = OBJECT
  variantMapper[PacketPeerStream::class] = OBJECT
  variantMapper[PacketPeerUDP::class] = OBJECT
  variantMapper[Panel::class] = OBJECT
  variantMapper[PanelContainer::class] = OBJECT
  variantMapper[PanoramaSkyMaterial::class] = OBJECT
  variantMapper[ParallaxBackground::class] = OBJECT
  variantMapper[ParallaxLayer::class] = OBJECT
  variantMapper[ParticleProcessMaterial::class] = OBJECT
  variantMapper[Path2D::class] = OBJECT
  variantMapper[Path3D::class] = OBJECT
  variantMapper[PathFollow2D::class] = OBJECT
  variantMapper[PathFollow3D::class] = OBJECT
  variantMapper[PhysicalBone2D::class] = OBJECT
  variantMapper[PhysicalBone3D::class] = OBJECT
  variantMapper[PhysicalSkyMaterial::class] = OBJECT
  variantMapper[PhysicsBody2D::class] = OBJECT
  variantMapper[PhysicsBody3D::class] = OBJECT
  variantMapper[PhysicsDirectBodyState2D::class] = OBJECT
  variantMapper[PhysicsDirectBodyState2DExtension::class] = OBJECT
  variantMapper[PhysicsDirectBodyState3D::class] = OBJECT
  variantMapper[PhysicsDirectBodyState3DExtension::class] = OBJECT
  variantMapper[PhysicsDirectSpaceState2D::class] = OBJECT
  variantMapper[PhysicsDirectSpaceState2DExtension::class] = OBJECT
  variantMapper[PhysicsDirectSpaceState3D::class] = OBJECT
  variantMapper[PhysicsDirectSpaceState3DExtension::class] = OBJECT
  variantMapper[PhysicsMaterial::class] = OBJECT
  variantMapper[PhysicsPointQueryParameters2D::class] = OBJECT
  variantMapper[PhysicsPointQueryParameters3D::class] = OBJECT
  variantMapper[PhysicsRayQueryParameters2D::class] = OBJECT
  variantMapper[PhysicsRayQueryParameters3D::class] = OBJECT
  variantMapper[PhysicsServer3DRenderingServerHandler::class] = OBJECT
  variantMapper[PhysicsShapeQueryParameters2D::class] = OBJECT
  variantMapper[PhysicsShapeQueryParameters3D::class] = OBJECT
  variantMapper[PhysicsTestMotionParameters2D::class] = OBJECT
  variantMapper[PhysicsTestMotionParameters3D::class] = OBJECT
  variantMapper[PhysicsTestMotionResult2D::class] = OBJECT
  variantMapper[PhysicsTestMotionResult3D::class] = OBJECT
  variantMapper[PinJoint2D::class] = OBJECT
  variantMapper[PinJoint3D::class] = OBJECT
  variantMapper[PlaceholderCubemap::class] = OBJECT
  variantMapper[PlaceholderCubemapArray::class] = OBJECT
  variantMapper[PlaceholderMaterial::class] = OBJECT
  variantMapper[PlaceholderMesh::class] = OBJECT
  variantMapper[PlaceholderTexture2D::class] = OBJECT
  variantMapper[PlaceholderTexture2DArray::class] = OBJECT
  variantMapper[PlaceholderTexture3D::class] = OBJECT
  variantMapper[PlaceholderTextureLayered::class] = OBJECT
  variantMapper[PlaneMesh::class] = OBJECT
  variantMapper[PointLight2D::class] = OBJECT
  variantMapper[PointMesh::class] = OBJECT
  variantMapper[Polygon2D::class] = OBJECT
  variantMapper[PolygonOccluder3D::class] = OBJECT
  variantMapper[PolygonPathFinder::class] = OBJECT
  variantMapper[Popup::class] = OBJECT
  variantMapper[PopupMenu::class] = OBJECT
  variantMapper[PopupPanel::class] = OBJECT
  variantMapper[PortableCompressedTexture2D::class] = OBJECT
  variantMapper[PrimitiveMesh::class] = OBJECT
  variantMapper[PrismMesh::class] = OBJECT
  variantMapper[ProceduralSkyMaterial::class] = OBJECT
  variantMapper[ProgressBar::class] = OBJECT
  variantMapper[PropertyTweener::class] = OBJECT
  variantMapper[QuadMesh::class] = OBJECT
  variantMapper[QuadOccluder3D::class] = OBJECT
  variantMapper[RDAttachmentFormat::class] = OBJECT
  variantMapper[RDFramebufferPass::class] = OBJECT
  variantMapper[RDPipelineColorBlendState::class] = OBJECT
  variantMapper[RDPipelineColorBlendStateAttachment::class] = OBJECT
  variantMapper[RDPipelineDepthStencilState::class] = OBJECT
  variantMapper[RDPipelineMultisampleState::class] = OBJECT
  variantMapper[RDPipelineRasterizationState::class] = OBJECT
  variantMapper[RDPipelineSpecializationConstant::class] = OBJECT
  variantMapper[RDSamplerState::class] = OBJECT
  variantMapper[RDShaderFile::class] = OBJECT
  variantMapper[RDShaderSPIRV::class] = OBJECT
  variantMapper[RDShaderSource::class] = OBJECT
  variantMapper[RDTextureFormat::class] = OBJECT
  variantMapper[RDTextureView::class] = OBJECT
  variantMapper[RDUniform::class] = OBJECT
  variantMapper[RDVertexAttribute::class] = OBJECT
  variantMapper[RandomNumberGenerator::class] = OBJECT
  variantMapper[Range::class] = OBJECT
  variantMapper[RayCast2D::class] = OBJECT
  variantMapper[RayCast3D::class] = OBJECT
  variantMapper[RectangleShape2D::class] = OBJECT
  variantMapper[RefCounted::class] = OBJECT
  variantMapper[ReferenceRect::class] = OBJECT
  variantMapper[ReflectionProbe::class] = OBJECT
  variantMapper[RegEx::class] = OBJECT
  variantMapper[RegExMatch::class] = OBJECT
  variantMapper[RemoteTransform2D::class] = OBJECT
  variantMapper[RemoteTransform3D::class] = OBJECT
  variantMapper[RenderingDevice::class] = OBJECT
  variantMapper[Resource::class] = OBJECT
  variantMapper[ResourceFormatImporterSaver::class] = OBJECT
  variantMapper[ResourceFormatLoader::class] = OBJECT
  variantMapper[ResourceFormatSaver::class] = OBJECT
  variantMapper[ResourceImporter::class] = OBJECT
  variantMapper[ResourcePreloader::class] = OBJECT
  variantMapper[RibbonTrailMesh::class] = OBJECT
  variantMapper[RichTextEffect::class] = OBJECT
  variantMapper[RichTextLabel::class] = OBJECT
  variantMapper[RigidBody2D::class] = OBJECT
  variantMapper[RigidBody3D::class] = OBJECT
  variantMapper[RootMotionView::class] = OBJECT
  variantMapper[SceneMultiplayer::class] = OBJECT
  variantMapper[SceneReplicationConfig::class] = OBJECT
  variantMapper[SceneState::class] = OBJECT
  variantMapper[SceneTree::class] = OBJECT
  variantMapper[SceneTreeTimer::class] = OBJECT
  variantMapper[Script::class] = OBJECT
  variantMapper[ScriptCreateDialog::class] = OBJECT
  variantMapper[ScriptEditor::class] = OBJECT
  variantMapper[ScriptEditorBase::class] = OBJECT
  variantMapper[ScriptExtension::class] = OBJECT
  variantMapper[ScriptLanguage::class] = OBJECT
  variantMapper[ScriptLanguageExtension::class] = OBJECT
  variantMapper[ScrollBar::class] = OBJECT
  variantMapper[ScrollContainer::class] = OBJECT
  variantMapper[SegmentShape2D::class] = OBJECT
  variantMapper[Semaphore::class] = OBJECT
  variantMapper[SeparationRayShape2D::class] = OBJECT
  variantMapper[SeparationRayShape3D::class] = OBJECT
  variantMapper[Separator::class] = OBJECT
  variantMapper[Shader::class] = OBJECT
  variantMapper[ShaderGlobalsOverride::class] = OBJECT
  variantMapper[ShaderInclude::class] = OBJECT
  variantMapper[ShaderMaterial::class] = OBJECT
  variantMapper[Shape2D::class] = OBJECT
  variantMapper[Shape3D::class] = OBJECT
  variantMapper[ShapeCast2D::class] = OBJECT
  variantMapper[ShapeCast3D::class] = OBJECT
  variantMapper[Shortcut::class] = OBJECT
  variantMapper[Skeleton2D::class] = OBJECT
  variantMapper[Skeleton3D::class] = OBJECT
  variantMapper[SkeletonIK3D::class] = OBJECT
  variantMapper[SkeletonModification2D::class] = OBJECT
  variantMapper[SkeletonModification2DCCDIK::class] = OBJECT
  variantMapper[SkeletonModification2DFABRIK::class] = OBJECT
  variantMapper[SkeletonModification2DJiggle::class] = OBJECT
  variantMapper[SkeletonModification2DLookAt::class] = OBJECT
  variantMapper[SkeletonModification2DPhysicalBones::class] = OBJECT
  variantMapper[SkeletonModification2DStackHolder::class] = OBJECT
  variantMapper[SkeletonModification2DTwoBoneIK::class] = OBJECT
  variantMapper[SkeletonModificationStack2D::class] = OBJECT
  variantMapper[SkeletonProfile::class] = OBJECT
  variantMapper[SkeletonProfileHumanoid::class] = OBJECT
  variantMapper[Skin::class] = OBJECT
  variantMapper[SkinReference::class] = OBJECT
  variantMapper[Sky::class] = OBJECT
  variantMapper[Slider::class] = OBJECT
  variantMapper[SliderJoint3D::class] = OBJECT
  variantMapper[SoftBody3D::class] = OBJECT
  variantMapper[SphereMesh::class] = OBJECT
  variantMapper[SphereOccluder3D::class] = OBJECT
  variantMapper[SphereShape3D::class] = OBJECT
  variantMapper[SpinBox::class] = OBJECT
  variantMapper[SplitContainer::class] = OBJECT
  variantMapper[SpotLight3D::class] = OBJECT
  variantMapper[SpringArm3D::class] = OBJECT
  variantMapper[Sprite2D::class] = OBJECT
  variantMapper[Sprite3D::class] = OBJECT
  variantMapper[SpriteBase3D::class] = OBJECT
  variantMapper[SpriteFrames::class] = OBJECT
  variantMapper[StandardMaterial3D::class] = OBJECT
  variantMapper[StaticBody2D::class] = OBJECT
  variantMapper[StaticBody3D::class] = OBJECT
  variantMapper[StreamPeer::class] = OBJECT
  variantMapper[StreamPeerBuffer::class] = OBJECT
  variantMapper[StreamPeerExtension::class] = OBJECT
  variantMapper[StreamPeerGZIP::class] = OBJECT
  variantMapper[StreamPeerTCP::class] = OBJECT
  variantMapper[StreamPeerTLS::class] = OBJECT
  variantMapper[StyleBox::class] = OBJECT
  variantMapper[StyleBoxEmpty::class] = OBJECT
  variantMapper[StyleBoxFlat::class] = OBJECT
  variantMapper[StyleBoxLine::class] = OBJECT
  variantMapper[StyleBoxTexture::class] = OBJECT
  variantMapper[SubViewport::class] = OBJECT
  variantMapper[SubViewportContainer::class] = OBJECT
  variantMapper[SurfaceTool::class] = OBJECT
  variantMapper[SyntaxHighlighter::class] = OBJECT
  variantMapper[SystemFont::class] = OBJECT
  variantMapper[TCPServer::class] = OBJECT
  variantMapper[TabBar::class] = OBJECT
  variantMapper[TabContainer::class] = OBJECT
  variantMapper[TextEdit::class] = OBJECT
  variantMapper[TextLine::class] = OBJECT
  variantMapper[TextMesh::class] = OBJECT
  variantMapper[TextParagraph::class] = OBJECT
  variantMapper[TextServer::class] = OBJECT
  variantMapper[TextServerAdvanced::class] = OBJECT
  variantMapper[TextServerDummy::class] = OBJECT
  variantMapper[TextServerExtension::class] = OBJECT
  variantMapper[Texture::class] = OBJECT
  variantMapper[Texture2D::class] = OBJECT
  variantMapper[Texture2DArray::class] = OBJECT
  variantMapper[Texture3D::class] = OBJECT
  variantMapper[TextureButton::class] = OBJECT
  variantMapper[TextureLayered::class] = OBJECT
  variantMapper[TextureProgressBar::class] = OBJECT
  variantMapper[TextureRect::class] = OBJECT
  variantMapper[Theme::class] = OBJECT
  variantMapper[Thread::class] = OBJECT
  variantMapper[TileData::class] = OBJECT
  variantMapper[TileMap::class] = OBJECT
  variantMapper[TileMapPattern::class] = OBJECT
  variantMapper[TileSet::class] = OBJECT
  variantMapper[TileSetAtlasSource::class] = OBJECT
  variantMapper[TileSetScenesCollectionSource::class] = OBJECT
  variantMapper[TileSetSource::class] = OBJECT
  variantMapper[Timer::class] = OBJECT
  variantMapper[TorusMesh::class] = OBJECT
  variantMapper[TouchScreenButton::class] = OBJECT
  variantMapper[Translation::class] = OBJECT
  variantMapper[Tree::class] = OBJECT
  variantMapper[TreeItem::class] = OBJECT
  variantMapper[TriangleMesh::class] = OBJECT
  variantMapper[TubeTrailMesh::class] = OBJECT
  variantMapper[Tween::class] = OBJECT
  variantMapper[Tweener::class] = OBJECT
  variantMapper[UDPServer::class] = OBJECT
  variantMapper[UPNP::class] = OBJECT
  variantMapper[UPNPDevice::class] = OBJECT
  variantMapper[UndoRedo::class] = OBJECT
  variantMapper[UniformSetCacheRD::class] = OBJECT
  variantMapper[VBoxContainer::class] = OBJECT
  variantMapper[VFlowContainer::class] = OBJECT
  variantMapper[VScrollBar::class] = OBJECT
  variantMapper[VSeparator::class] = OBJECT
  variantMapper[VSlider::class] = OBJECT
  variantMapper[VSplitContainer::class] = OBJECT
  variantMapper[VehicleBody3D::class] = OBJECT
  variantMapper[VehicleWheel3D::class] = OBJECT
  variantMapper[VideoStream::class] = OBJECT
  variantMapper[VideoStreamPlayer::class] = OBJECT
  variantMapper[VideoStreamTheora::class] = OBJECT
  variantMapper[Viewport::class] = OBJECT
  variantMapper[ViewportTexture::class] = OBJECT
  variantMapper[VisibleOnScreenEnabler2D::class] = OBJECT
  variantMapper[VisibleOnScreenEnabler3D::class] = OBJECT
  variantMapper[VisibleOnScreenNotifier2D::class] = OBJECT
  variantMapper[VisibleOnScreenNotifier3D::class] = OBJECT
  variantMapper[VisualInstance3D::class] = OBJECT
  variantMapper[VisualShader::class] = OBJECT
  variantMapper[VisualShaderNode::class] = OBJECT
  variantMapper[VisualShaderNodeBillboard::class] = OBJECT
  variantMapper[VisualShaderNodeBooleanConstant::class] = OBJECT
  variantMapper[VisualShaderNodeBooleanParameter::class] = OBJECT
  variantMapper[VisualShaderNodeClamp::class] = OBJECT
  variantMapper[VisualShaderNodeColorConstant::class] = OBJECT
  variantMapper[VisualShaderNodeColorFunc::class] = OBJECT
  variantMapper[VisualShaderNodeColorOp::class] = OBJECT
  variantMapper[VisualShaderNodeColorParameter::class] = OBJECT
  variantMapper[VisualShaderNodeComment::class] = OBJECT
  variantMapper[VisualShaderNodeCompare::class] = OBJECT
  variantMapper[VisualShaderNodeConstant::class] = OBJECT
  variantMapper[VisualShaderNodeCubemap::class] = OBJECT
  variantMapper[VisualShaderNodeCubemapParameter::class] = OBJECT
  variantMapper[VisualShaderNodeCurveTexture::class] = OBJECT
  variantMapper[VisualShaderNodeCurveXYZTexture::class] = OBJECT
  variantMapper[VisualShaderNodeCustom::class] = OBJECT
  variantMapper[VisualShaderNodeDerivativeFunc::class] = OBJECT
  variantMapper[VisualShaderNodeDeterminant::class] = OBJECT
  variantMapper[VisualShaderNodeDistanceFade::class] = OBJECT
  variantMapper[VisualShaderNodeDotProduct::class] = OBJECT
  variantMapper[VisualShaderNodeExpression::class] = OBJECT
  variantMapper[VisualShaderNodeFaceForward::class] = OBJECT
  variantMapper[VisualShaderNodeFloatConstant::class] = OBJECT
  variantMapper[VisualShaderNodeFloatFunc::class] = OBJECT
  variantMapper[VisualShaderNodeFloatOp::class] = OBJECT
  variantMapper[VisualShaderNodeFloatParameter::class] = OBJECT
  variantMapper[VisualShaderNodeFresnel::class] = OBJECT
  variantMapper[VisualShaderNodeGlobalExpression::class] = OBJECT
  variantMapper[VisualShaderNodeGroupBase::class] = OBJECT
  variantMapper[VisualShaderNodeIf::class] = OBJECT
  variantMapper[VisualShaderNodeInput::class] = OBJECT
  variantMapper[VisualShaderNodeIntConstant::class] = OBJECT
  variantMapper[VisualShaderNodeIntFunc::class] = OBJECT
  variantMapper[VisualShaderNodeIntOp::class] = OBJECT
  variantMapper[VisualShaderNodeIntParameter::class] = OBJECT
  variantMapper[VisualShaderNodeIs::class] = OBJECT
  variantMapper[VisualShaderNodeLinearSceneDepth::class] = OBJECT
  variantMapper[VisualShaderNodeMix::class] = OBJECT
  variantMapper[VisualShaderNodeMultiplyAdd::class] = OBJECT
  variantMapper[VisualShaderNodeOuterProduct::class] = OBJECT
  variantMapper[VisualShaderNodeOutput::class] = OBJECT
  variantMapper[VisualShaderNodeParameter::class] = OBJECT
  variantMapper[VisualShaderNodeParameterRef::class] = OBJECT
  variantMapper[VisualShaderNodeParticleAccelerator::class] = OBJECT
  variantMapper[VisualShaderNodeParticleBoxEmitter::class] = OBJECT
  variantMapper[VisualShaderNodeParticleConeVelocity::class] = OBJECT
  variantMapper[VisualShaderNodeParticleEmit::class] = OBJECT
  variantMapper[VisualShaderNodeParticleEmitter::class] = OBJECT
  variantMapper[VisualShaderNodeParticleMeshEmitter::class] = OBJECT
  variantMapper[VisualShaderNodeParticleMultiplyByAxisAngle::class] = OBJECT
  variantMapper[VisualShaderNodeParticleOutput::class] = OBJECT
  variantMapper[VisualShaderNodeParticleRandomness::class] = OBJECT
  variantMapper[VisualShaderNodeParticleRingEmitter::class] = OBJECT
  variantMapper[VisualShaderNodeParticleSphereEmitter::class] = OBJECT
  variantMapper[VisualShaderNodeProximityFade::class] = OBJECT
  variantMapper[VisualShaderNodeRandomRange::class] = OBJECT
  variantMapper[VisualShaderNodeRemap::class] = OBJECT
  variantMapper[VisualShaderNodeResizableBase::class] = OBJECT
  variantMapper[VisualShaderNodeSDFRaymarch::class] = OBJECT
  variantMapper[VisualShaderNodeSDFToScreenUV::class] = OBJECT
  variantMapper[VisualShaderNodeSample3D::class] = OBJECT
  variantMapper[VisualShaderNodeScreenUVToSDF::class] = OBJECT
  variantMapper[VisualShaderNodeSmoothStep::class] = OBJECT
  variantMapper[VisualShaderNodeStep::class] = OBJECT
  variantMapper[VisualShaderNodeSwitch::class] = OBJECT
  variantMapper[VisualShaderNodeTexture::class] = OBJECT
  variantMapper[VisualShaderNodeTexture2DArray::class] = OBJECT
  variantMapper[VisualShaderNodeTexture2DArrayParameter::class] = OBJECT
  variantMapper[VisualShaderNodeTexture2DParameter::class] = OBJECT
  variantMapper[VisualShaderNodeTexture3D::class] = OBJECT
  variantMapper[VisualShaderNodeTexture3DParameter::class] = OBJECT
  variantMapper[VisualShaderNodeTextureParameter::class] = OBJECT
  variantMapper[VisualShaderNodeTextureParameterTriplanar::class] = OBJECT
  variantMapper[VisualShaderNodeTextureSDF::class] = OBJECT
  variantMapper[VisualShaderNodeTextureSDFNormal::class] = OBJECT
  variantMapper[VisualShaderNodeTransformCompose::class] = OBJECT
  variantMapper[VisualShaderNodeTransformConstant::class] = OBJECT
  variantMapper[VisualShaderNodeTransformDecompose::class] = OBJECT
  variantMapper[VisualShaderNodeTransformFunc::class] = OBJECT
  variantMapper[VisualShaderNodeTransformOp::class] = OBJECT
  variantMapper[VisualShaderNodeTransformParameter::class] = OBJECT
  variantMapper[VisualShaderNodeTransformVecMult::class] = OBJECT
  variantMapper[VisualShaderNodeUIntConstant::class] = OBJECT
  variantMapper[VisualShaderNodeUIntFunc::class] = OBJECT
  variantMapper[VisualShaderNodeUIntOp::class] = OBJECT
  variantMapper[VisualShaderNodeUIntParameter::class] = OBJECT
  variantMapper[VisualShaderNodeUVFunc::class] = OBJECT
  variantMapper[VisualShaderNodeUVPolarCoord::class] = OBJECT
  variantMapper[VisualShaderNodeVarying::class] = OBJECT
  variantMapper[VisualShaderNodeVaryingGetter::class] = OBJECT
  variantMapper[VisualShaderNodeVaryingSetter::class] = OBJECT
  variantMapper[VisualShaderNodeVec2Constant::class] = OBJECT
  variantMapper[VisualShaderNodeVec2Parameter::class] = OBJECT
  variantMapper[VisualShaderNodeVec3Constant::class] = OBJECT
  variantMapper[VisualShaderNodeVec3Parameter::class] = OBJECT
  variantMapper[VisualShaderNodeVec4Constant::class] = OBJECT
  variantMapper[VisualShaderNodeVec4Parameter::class] = OBJECT
  variantMapper[VisualShaderNodeVectorBase::class] = OBJECT
  variantMapper[VisualShaderNodeVectorCompose::class] = OBJECT
  variantMapper[VisualShaderNodeVectorDecompose::class] = OBJECT
  variantMapper[VisualShaderNodeVectorDistance::class] = OBJECT
  variantMapper[VisualShaderNodeVectorFunc::class] = OBJECT
  variantMapper[VisualShaderNodeVectorLen::class] = OBJECT
  variantMapper[VisualShaderNodeVectorOp::class] = OBJECT
  variantMapper[VisualShaderNodeVectorRefract::class] = OBJECT
  variantMapper[VoxelGI::class] = OBJECT
  variantMapper[VoxelGIData::class] = OBJECT
  variantMapper[WeakRef::class] = OBJECT
  variantMapper[WebRTCDataChannel::class] = OBJECT
  variantMapper[WebRTCDataChannelExtension::class] = OBJECT
  variantMapper[WebRTCMultiplayerPeer::class] = OBJECT
  variantMapper[WebRTCPeerConnection::class] = OBJECT
  variantMapper[WebRTCPeerConnectionExtension::class] = OBJECT
  variantMapper[WebSocketMultiplayerPeer::class] = OBJECT
  variantMapper[WebSocketPeer::class] = OBJECT
  variantMapper[WebXRInterface::class] = OBJECT
  variantMapper[Window::class] = OBJECT
  variantMapper[World2D::class] = OBJECT
  variantMapper[World3D::class] = OBJECT
  variantMapper[WorldBoundaryShape2D::class] = OBJECT
  variantMapper[WorldBoundaryShape3D::class] = OBJECT
  variantMapper[WorldEnvironment::class] = OBJECT
  variantMapper[X509Certificate::class] = OBJECT
  variantMapper[XMLParser::class] = OBJECT
  variantMapper[XRAnchor3D::class] = OBJECT
  variantMapper[XRCamera3D::class] = OBJECT
  variantMapper[XRController3D::class] = OBJECT
  variantMapper[XRInterface::class] = OBJECT
  variantMapper[XRInterfaceExtension::class] = OBJECT
  variantMapper[XRNode3D::class] = OBJECT
  variantMapper[XROrigin3D::class] = OBJECT
  variantMapper[XRPose::class] = OBJECT
  variantMapper[XRPositionalTracker::class] = OBJECT
  variantMapper[ZIPPacker::class] = OBJECT
  variantMapper[ZIPReader::class] = OBJECT
}

public fun registerEngineTypeMethods(): Unit {
  registerEngineTypeMethodForPerformance()
  registerEngineTypeMethodForTextServerManager()
  registerEngineTypeMethodForPhysicsServer2DManager()
  registerEngineTypeMethodForPhysicsServer3DManager()
  registerEngineTypeMethodForNavigationMeshGenerator()
  registerEngineTypeMethodForProjectSettings()
  registerEngineTypeMethodForIP()
  registerEngineTypeMethodForGeometry2D()
  registerEngineTypeMethodForGeometry3D()
  registerEngineTypeMethodForResourceLoader()
  registerEngineTypeMethodForResourceSaver()
  registerEngineTypeMethodForOS()
  registerEngineTypeMethodForEngine()
  registerEngineTypeMethodForClassDB()
  registerEngineTypeMethodForMarshalls()
  registerEngineTypeMethodForTranslationServer()
  registerEngineTypeMethodForInput()
  registerEngineTypeMethodForInputMap()
  registerEngineTypeMethodForEngineDebugger()
  registerEngineTypeMethodForTime()
  registerEngineTypeMethodForGDExtensionManager()
  registerEngineTypeMethodForResourceUID()
  registerEngineTypeMethodForWorkerThreadPool()
  registerEngineTypeMethodForJavaClassWrapper()
  registerEngineTypeMethodForJavaScriptBridge()
  registerEngineTypeMethodForThemeDB()
  registerEngineTypeMethodForDisplayServer()
  registerEngineTypeMethodForRenderingServer()
  registerEngineTypeMethodForAudioServer()
  registerEngineTypeMethodForPhysicsServer2D()
  registerEngineTypeMethodForPhysicsServer3D()
  registerEngineTypeMethodForNavigationServer2D()
  registerEngineTypeMethodForNavigationServer3D()
  registerEngineTypeMethodForXRServer()
  registerEngineTypeMethodForCameraServer()
  registerEngineTypeMethodForAESContext()
  registerEngineTypeMethodForAStar2D()
  registerEngineTypeMethodForAStar3D()
  registerEngineTypeMethodForAStarGrid2D()
  registerEngineTypeMethodForAcceptDialog()
  registerEngineTypeMethodForAnimatableBody2D()
  registerEngineTypeMethodForAnimatableBody3D()
  registerEngineTypeMethodForAnimatedSprite2D()
  registerEngineTypeMethodForAnimatedSprite3D()
  registerEngineTypeMethodForAnimatedTexture()
  registerEngineTypeMethodForAnimation()
  registerEngineTypeMethodForAnimationLibrary()
  registerEngineTypeMethodForAnimationNode()
  registerEngineTypeMethodForAnimationNodeAdd2()
  registerEngineTypeMethodForAnimationNodeAdd3()
  registerEngineTypeMethodForAnimationNodeAnimation()
  registerEngineTypeMethodForAnimationNodeBlend2()
  registerEngineTypeMethodForAnimationNodeBlend3()
  registerEngineTypeMethodForAnimationNodeBlendSpace1D()
  registerEngineTypeMethodForAnimationNodeBlendSpace2D()
  registerEngineTypeMethodForAnimationNodeBlendTree()
  registerEngineTypeMethodForAnimationNodeOneShot()
  registerEngineTypeMethodForAnimationNodeOutput()
  registerEngineTypeMethodForAnimationNodeStateMachine()
  registerEngineTypeMethodForAnimationNodeStateMachinePlayback()
  registerEngineTypeMethodForAnimationNodeStateMachineTransition()
  registerEngineTypeMethodForAnimationNodeSync()
  registerEngineTypeMethodForAnimationNodeTimeScale()
  registerEngineTypeMethodForAnimationNodeTimeSeek()
  registerEngineTypeMethodForAnimationNodeTransition()
  registerEngineTypeMethodForAnimationPlayer()
  registerEngineTypeMethodForAnimationRootNode()
  registerEngineTypeMethodForAnimationTrackEditPlugin()
  registerEngineTypeMethodForAnimationTree()
  registerEngineTypeMethodForArea2D()
  registerEngineTypeMethodForArea3D()
  registerEngineTypeMethodForArrayMesh()
  registerEngineTypeMethodForArrayOccluder3D()
  registerEngineTypeMethodForAspectRatioContainer()
  registerEngineTypeMethodForAtlasTexture()
  registerEngineTypeMethodForAudioBusLayout()
  registerEngineTypeMethodForAudioEffect()
  registerEngineTypeMethodForAudioEffectAmplify()
  registerEngineTypeMethodForAudioEffectBandLimitFilter()
  registerEngineTypeMethodForAudioEffectBandPassFilter()
  registerEngineTypeMethodForAudioEffectCapture()
  registerEngineTypeMethodForAudioEffectChorus()
  registerEngineTypeMethodForAudioEffectCompressor()
  registerEngineTypeMethodForAudioEffectDelay()
  registerEngineTypeMethodForAudioEffectDistortion()
  registerEngineTypeMethodForAudioEffectEQ()
  registerEngineTypeMethodForAudioEffectEQ10()
  registerEngineTypeMethodForAudioEffectEQ21()
  registerEngineTypeMethodForAudioEffectEQ6()
  registerEngineTypeMethodForAudioEffectFilter()
  registerEngineTypeMethodForAudioEffectHighPassFilter()
  registerEngineTypeMethodForAudioEffectHighShelfFilter()
  registerEngineTypeMethodForAudioEffectInstance()
  registerEngineTypeMethodForAudioEffectLimiter()
  registerEngineTypeMethodForAudioEffectLowPassFilter()
  registerEngineTypeMethodForAudioEffectLowShelfFilter()
  registerEngineTypeMethodForAudioEffectNotchFilter()
  registerEngineTypeMethodForAudioEffectPanner()
  registerEngineTypeMethodForAudioEffectPhaser()
  registerEngineTypeMethodForAudioEffectPitchShift()
  registerEngineTypeMethodForAudioEffectRecord()
  registerEngineTypeMethodForAudioEffectReverb()
  registerEngineTypeMethodForAudioEffectSpectrumAnalyzer()
  registerEngineTypeMethodForAudioEffectSpectrumAnalyzerInstance()
  registerEngineTypeMethodForAudioEffectStereoEnhance()
  registerEngineTypeMethodForAudioListener2D()
  registerEngineTypeMethodForAudioListener3D()
  registerEngineTypeMethodForAudioStream()
  registerEngineTypeMethodForAudioStreamGenerator()
  registerEngineTypeMethodForAudioStreamGeneratorPlayback()
  registerEngineTypeMethodForAudioStreamMP3()
  registerEngineTypeMethodForAudioStreamMicrophone()
  registerEngineTypeMethodForAudioStreamOggVorbis()
  registerEngineTypeMethodForAudioStreamPlayback()
  registerEngineTypeMethodForAudioStreamPlaybackOggVorbis()
  registerEngineTypeMethodForAudioStreamPlaybackResampled()
  registerEngineTypeMethodForAudioStreamPlayer()
  registerEngineTypeMethodForAudioStreamPlayer2D()
  registerEngineTypeMethodForAudioStreamPlayer3D()
  registerEngineTypeMethodForAudioStreamRandomizer()
  registerEngineTypeMethodForAudioStreamWAV()
  registerEngineTypeMethodForBackBufferCopy()
  registerEngineTypeMethodForBaseButton()
  registerEngineTypeMethodForBaseMaterial3D()
  registerEngineTypeMethodForBitMap()
  registerEngineTypeMethodForBone2D()
  registerEngineTypeMethodForBoneAttachment3D()
  registerEngineTypeMethodForBoneMap()
  registerEngineTypeMethodForBoxContainer()
  registerEngineTypeMethodForBoxMesh()
  registerEngineTypeMethodForBoxOccluder3D()
  registerEngineTypeMethodForBoxShape3D()
  registerEngineTypeMethodForButton()
  registerEngineTypeMethodForButtonGroup()
  registerEngineTypeMethodForCPUParticles2D()
  registerEngineTypeMethodForCPUParticles3D()
  registerEngineTypeMethodForCSGBox3D()
  registerEngineTypeMethodForCSGCombiner3D()
  registerEngineTypeMethodForCSGCylinder3D()
  registerEngineTypeMethodForCSGMesh3D()
  registerEngineTypeMethodForCSGPolygon3D()
  registerEngineTypeMethodForCSGPrimitive3D()
  registerEngineTypeMethodForCSGShape3D()
  registerEngineTypeMethodForCSGSphere3D()
  registerEngineTypeMethodForCSGTorus3D()
  registerEngineTypeMethodForCallbackTweener()
  registerEngineTypeMethodForCamera2D()
  registerEngineTypeMethodForCamera3D()
  registerEngineTypeMethodForCameraAttributes()
  registerEngineTypeMethodForCameraAttributesPhysical()
  registerEngineTypeMethodForCameraAttributesPractical()
  registerEngineTypeMethodForCameraFeed()
  registerEngineTypeMethodForCameraTexture()
  registerEngineTypeMethodForCanvasGroup()
  registerEngineTypeMethodForCanvasItem()
  registerEngineTypeMethodForCanvasItemMaterial()
  registerEngineTypeMethodForCanvasLayer()
  registerEngineTypeMethodForCanvasModulate()
  registerEngineTypeMethodForCanvasTexture()
  registerEngineTypeMethodForCapsuleMesh()
  registerEngineTypeMethodForCapsuleShape2D()
  registerEngineTypeMethodForCapsuleShape3D()
  registerEngineTypeMethodForCenterContainer()
  registerEngineTypeMethodForCharFXTransform()
  registerEngineTypeMethodForCharacterBody2D()
  registerEngineTypeMethodForCharacterBody3D()
  registerEngineTypeMethodForCheckBox()
  registerEngineTypeMethodForCheckButton()
  registerEngineTypeMethodForCircleShape2D()
  registerEngineTypeMethodForCodeEdit()
  registerEngineTypeMethodForCodeHighlighter()
  registerEngineTypeMethodForCollisionObject2D()
  registerEngineTypeMethodForCollisionObject3D()
  registerEngineTypeMethodForCollisionPolygon2D()
  registerEngineTypeMethodForCollisionPolygon3D()
  registerEngineTypeMethodForCollisionShape2D()
  registerEngineTypeMethodForCollisionShape3D()
  registerEngineTypeMethodForColorPicker()
  registerEngineTypeMethodForColorPickerButton()
  registerEngineTypeMethodForColorRect()
  registerEngineTypeMethodForCompressedCubemap()
  registerEngineTypeMethodForCompressedCubemapArray()
  registerEngineTypeMethodForCompressedTexture2D()
  registerEngineTypeMethodForCompressedTexture2DArray()
  registerEngineTypeMethodForCompressedTexture3D()
  registerEngineTypeMethodForCompressedTextureLayered()
  registerEngineTypeMethodForConcavePolygonShape2D()
  registerEngineTypeMethodForConcavePolygonShape3D()
  registerEngineTypeMethodForConeTwistJoint3D()
  registerEngineTypeMethodForConfigFile()
  registerEngineTypeMethodForConfirmationDialog()
  registerEngineTypeMethodForContainer()
  registerEngineTypeMethodForControl()
  registerEngineTypeMethodForConvexPolygonShape2D()
  registerEngineTypeMethodForConvexPolygonShape3D()
  registerEngineTypeMethodForCrypto()
  registerEngineTypeMethodForCryptoKey()
  registerEngineTypeMethodForCubemap()
  registerEngineTypeMethodForCubemapArray()
  registerEngineTypeMethodForCurve()
  registerEngineTypeMethodForCurve2D()
  registerEngineTypeMethodForCurve3D()
  registerEngineTypeMethodForCurveTexture()
  registerEngineTypeMethodForCurveXYZTexture()
  registerEngineTypeMethodForCylinderMesh()
  registerEngineTypeMethodForCylinderShape3D()
  registerEngineTypeMethodForDTLSServer()
  registerEngineTypeMethodForDampedSpringJoint2D()
  registerEngineTypeMethodForDecal()
  registerEngineTypeMethodForDirAccess()
  registerEngineTypeMethodForDirectionalLight2D()
  registerEngineTypeMethodForDirectionalLight3D()
  registerEngineTypeMethodForENetConnection()
  registerEngineTypeMethodForENetMultiplayerPeer()
  registerEngineTypeMethodForENetPacketPeer()
  registerEngineTypeMethodForEditorCommandPalette()
  registerEngineTypeMethodForEditorDebuggerPlugin()
  registerEngineTypeMethodForEditorDebuggerSession()
  registerEngineTypeMethodForEditorExportPlatform()
  registerEngineTypeMethodForEditorExportPlugin()
  registerEngineTypeMethodForEditorFeatureProfile()
  registerEngineTypeMethodForEditorFileDialog()
  registerEngineTypeMethodForEditorFileSystem()
  registerEngineTypeMethodForEditorFileSystemDirectory()
  registerEngineTypeMethodForEditorFileSystemImportFormatSupportQuery()
  registerEngineTypeMethodForEditorImportPlugin()
  registerEngineTypeMethodForEditorInspector()
  registerEngineTypeMethodForEditorInspectorPlugin()
  registerEngineTypeMethodForEditorInterface()
  registerEngineTypeMethodForEditorNode3DGizmo()
  registerEngineTypeMethodForEditorNode3DGizmoPlugin()
  registerEngineTypeMethodForEditorPaths()
  registerEngineTypeMethodForEditorPlugin()
  registerEngineTypeMethodForEditorProperty()
  registerEngineTypeMethodForEditorResourceConversionPlugin()
  registerEngineTypeMethodForEditorResourcePicker()
  registerEngineTypeMethodForEditorResourcePreview()
  registerEngineTypeMethodForEditorResourcePreviewGenerator()
  registerEngineTypeMethodForEditorSceneFormatImporter()
  registerEngineTypeMethodForEditorSceneFormatImporterBlend()
  registerEngineTypeMethodForEditorSceneFormatImporterFBX()
  registerEngineTypeMethodForEditorSceneFormatImporterGLTF()
  registerEngineTypeMethodForEditorScenePostImport()
  registerEngineTypeMethodForEditorScenePostImportPlugin()
  registerEngineTypeMethodForEditorScript()
  registerEngineTypeMethodForEditorScriptPicker()
  registerEngineTypeMethodForEditorSelection()
  registerEngineTypeMethodForEditorSettings()
  registerEngineTypeMethodForEditorSpinSlider()
  registerEngineTypeMethodForEditorSyntaxHighlighter()
  registerEngineTypeMethodForEditorTranslationParserPlugin()
  registerEngineTypeMethodForEditorUndoRedoManager()
  registerEngineTypeMethodForEditorVCSInterface()
  registerEngineTypeMethodForEncodedObjectAsID()
  registerEngineTypeMethodForEngineProfiler()
  registerEngineTypeMethodForEnvironment()
  registerEngineTypeMethodForExpression()
  registerEngineTypeMethodForFastNoiseLite()
  registerEngineTypeMethodForFileAccess()
  registerEngineTypeMethodForFileDialog()
  registerEngineTypeMethodForFileSystemDock()
  registerEngineTypeMethodForFlowContainer()
  registerEngineTypeMethodForFogMaterial()
  registerEngineTypeMethodForFogVolume()
  registerEngineTypeMethodForFont()
  registerEngineTypeMethodForFontFile()
  registerEngineTypeMethodForFontVariation()
  registerEngineTypeMethodForFramebufferCacheRD()
  registerEngineTypeMethodForGDExtension()
  registerEngineTypeMethodForGDScript()
  registerEngineTypeMethodForGDScriptEditorTranslationParserPlugin()
  registerEngineTypeMethodForGDScriptNativeClass()
  registerEngineTypeMethodForGLTFAccessor()
  registerEngineTypeMethodForGLTFAnimation()
  registerEngineTypeMethodForGLTFBufferView()
  registerEngineTypeMethodForGLTFCamera()
  registerEngineTypeMethodForGLTFDocument()
  registerEngineTypeMethodForGLTFDocumentExtension()
  registerEngineTypeMethodForGLTFDocumentExtensionConvertImporterMesh()
  registerEngineTypeMethodForGLTFLight()
  registerEngineTypeMethodForGLTFMesh()
  registerEngineTypeMethodForGLTFNode()
  registerEngineTypeMethodForGLTFSkeleton()
  registerEngineTypeMethodForGLTFSkin()
  registerEngineTypeMethodForGLTFSpecGloss()
  registerEngineTypeMethodForGLTFState()
  registerEngineTypeMethodForGLTFTexture()
  registerEngineTypeMethodForGLTFTextureSampler()
  registerEngineTypeMethodForGPUParticles2D()
  registerEngineTypeMethodForGPUParticles3D()
  registerEngineTypeMethodForGPUParticlesAttractor3D()
  registerEngineTypeMethodForGPUParticlesAttractorBox3D()
  registerEngineTypeMethodForGPUParticlesAttractorSphere3D()
  registerEngineTypeMethodForGPUParticlesAttractorVectorField3D()
  registerEngineTypeMethodForGPUParticlesCollision3D()
  registerEngineTypeMethodForGPUParticlesCollisionBox3D()
  registerEngineTypeMethodForGPUParticlesCollisionHeightField3D()
  registerEngineTypeMethodForGPUParticlesCollisionSDF3D()
  registerEngineTypeMethodForGPUParticlesCollisionSphere3D()
  registerEngineTypeMethodForGeneric6DOFJoint3D()
  registerEngineTypeMethodForGeometryInstance3D()
  registerEngineTypeMethodForGradient()
  registerEngineTypeMethodForGradientTexture1D()
  registerEngineTypeMethodForGradientTexture2D()
  registerEngineTypeMethodForGraphEdit()
  registerEngineTypeMethodForGraphNode()
  registerEngineTypeMethodForGridContainer()
  registerEngineTypeMethodForGridMap()
  registerEngineTypeMethodForGrooveJoint2D()
  registerEngineTypeMethodForHBoxContainer()
  registerEngineTypeMethodForHFlowContainer()
  registerEngineTypeMethodForHMACContext()
  registerEngineTypeMethodForHScrollBar()
  registerEngineTypeMethodForHSeparator()
  registerEngineTypeMethodForHSlider()
  registerEngineTypeMethodForHSplitContainer()
  registerEngineTypeMethodForHTTPClient()
  registerEngineTypeMethodForHTTPRequest()
  registerEngineTypeMethodForHashingContext()
  registerEngineTypeMethodForHeightMapShape3D()
  registerEngineTypeMethodForHingeJoint3D()
  registerEngineTypeMethodForImage()
  registerEngineTypeMethodForImageFormatLoader()
  registerEngineTypeMethodForImageFormatLoaderExtension()
  registerEngineTypeMethodForImageTexture()
  registerEngineTypeMethodForImageTexture3D()
  registerEngineTypeMethodForImageTextureLayered()
  registerEngineTypeMethodForImmediateMesh()
  registerEngineTypeMethodForImporterMesh()
  registerEngineTypeMethodForImporterMeshInstance3D()
  registerEngineTypeMethodForInputEvent()
  registerEngineTypeMethodForInputEventAction()
  registerEngineTypeMethodForInputEventFromWindow()
  registerEngineTypeMethodForInputEventGesture()
  registerEngineTypeMethodForInputEventJoypadButton()
  registerEngineTypeMethodForInputEventJoypadMotion()
  registerEngineTypeMethodForInputEventKey()
  registerEngineTypeMethodForInputEventMIDI()
  registerEngineTypeMethodForInputEventMagnifyGesture()
  registerEngineTypeMethodForInputEventMouse()
  registerEngineTypeMethodForInputEventMouseButton()
  registerEngineTypeMethodForInputEventMouseMotion()
  registerEngineTypeMethodForInputEventPanGesture()
  registerEngineTypeMethodForInputEventScreenDrag()
  registerEngineTypeMethodForInputEventScreenTouch()
  registerEngineTypeMethodForInputEventShortcut()
  registerEngineTypeMethodForInputEventWithModifiers()
  registerEngineTypeMethodForInstancePlaceholder()
  registerEngineTypeMethodForIntervalTweener()
  registerEngineTypeMethodForItemList()
  registerEngineTypeMethodForJNISingleton()
  registerEngineTypeMethodForJSON()
  registerEngineTypeMethodForJSONRPC()
  registerEngineTypeMethodForJavaClass()
  registerEngineTypeMethodForJavaScriptObject()
  registerEngineTypeMethodForJoint2D()
  registerEngineTypeMethodForJoint3D()
  registerEngineTypeMethodForKinematicCollision2D()
  registerEngineTypeMethodForKinematicCollision3D()
  registerEngineTypeMethodForKotlinScript()
  registerEngineTypeMethodForLabel()
  registerEngineTypeMethodForLabel3D()
  registerEngineTypeMethodForLabelSettings()
  registerEngineTypeMethodForLight2D()
  registerEngineTypeMethodForLight3D()
  registerEngineTypeMethodForLightOccluder2D()
  registerEngineTypeMethodForLightmapGI()
  registerEngineTypeMethodForLightmapGIData()
  registerEngineTypeMethodForLightmapProbe()
  registerEngineTypeMethodForLightmapper()
  registerEngineTypeMethodForLightmapperRD()
  registerEngineTypeMethodForLine2D()
  registerEngineTypeMethodForLineEdit()
  registerEngineTypeMethodForLinkButton()
  registerEngineTypeMethodForMainLoop()
  registerEngineTypeMethodForMarginContainer()
  registerEngineTypeMethodForMarker2D()
  registerEngineTypeMethodForMarker3D()
  registerEngineTypeMethodForMaterial()
  registerEngineTypeMethodForMenuBar()
  registerEngineTypeMethodForMenuButton()
  registerEngineTypeMethodForMesh()
  registerEngineTypeMethodForMeshDataTool()
  registerEngineTypeMethodForMeshInstance2D()
  registerEngineTypeMethodForMeshInstance3D()
  registerEngineTypeMethodForMeshLibrary()
  registerEngineTypeMethodForMeshTexture()
  registerEngineTypeMethodForMethodTweener()
  registerEngineTypeMethodForMissingNode()
  registerEngineTypeMethodForMissingResource()
  registerEngineTypeMethodForMobileVRInterface()
  registerEngineTypeMethodForMovieWriter()
  registerEngineTypeMethodForMovieWriterMJPEG()
  registerEngineTypeMethodForMovieWriterPNGWAV()
  registerEngineTypeMethodForMultiMesh()
  registerEngineTypeMethodForMultiMeshInstance2D()
  registerEngineTypeMethodForMultiMeshInstance3D()
  registerEngineTypeMethodForMultiplayerAPI()
  registerEngineTypeMethodForMultiplayerAPIExtension()
  registerEngineTypeMethodForMultiplayerPeer()
  registerEngineTypeMethodForMultiplayerPeerExtension()
  registerEngineTypeMethodForMultiplayerSpawner()
  registerEngineTypeMethodForMultiplayerSynchronizer()
  registerEngineTypeMethodForMutex()
  registerEngineTypeMethodForNavigationAgent2D()
  registerEngineTypeMethodForNavigationAgent3D()
  registerEngineTypeMethodForNavigationLink2D()
  registerEngineTypeMethodForNavigationLink3D()
  registerEngineTypeMethodForNavigationMesh()
  registerEngineTypeMethodForNavigationObstacle2D()
  registerEngineTypeMethodForNavigationObstacle3D()
  registerEngineTypeMethodForNavigationPathQueryParameters2D()
  registerEngineTypeMethodForNavigationPathQueryParameters3D()
  registerEngineTypeMethodForNavigationPathQueryResult2D()
  registerEngineTypeMethodForNavigationPathQueryResult3D()
  registerEngineTypeMethodForNavigationPolygon()
  registerEngineTypeMethodForNavigationRegion2D()
  registerEngineTypeMethodForNavigationRegion3D()
  registerEngineTypeMethodForNinePatchRect()
  registerEngineTypeMethodForNode()
  registerEngineTypeMethodForNode2D()
  registerEngineTypeMethodForNode3D()
  registerEngineTypeMethodForNode3DGizmo()
  registerEngineTypeMethodForNoise()
  registerEngineTypeMethodForNoiseTexture2D()
  registerEngineTypeMethodForORMMaterial3D()
  registerEngineTypeMethodForObject()
  registerEngineTypeMethodForOccluder3D()
  registerEngineTypeMethodForOccluderInstance3D()
  registerEngineTypeMethodForOccluderPolygon2D()
  registerEngineTypeMethodForOfflineMultiplayerPeer()
  registerEngineTypeMethodForOggPacketSequence()
  registerEngineTypeMethodForOggPacketSequencePlayback()
  registerEngineTypeMethodForOmniLight3D()
  registerEngineTypeMethodForOptimizedTranslation()
  registerEngineTypeMethodForOptionButton()
  registerEngineTypeMethodForPCKPacker()
  registerEngineTypeMethodForPackedDataContainer()
  registerEngineTypeMethodForPackedDataContainerRef()
  registerEngineTypeMethodForPackedScene()
  registerEngineTypeMethodForPacketPeer()
  registerEngineTypeMethodForPacketPeerDTLS()
  registerEngineTypeMethodForPacketPeerExtension()
  registerEngineTypeMethodForPacketPeerStream()
  registerEngineTypeMethodForPacketPeerUDP()
  registerEngineTypeMethodForPanel()
  registerEngineTypeMethodForPanelContainer()
  registerEngineTypeMethodForPanoramaSkyMaterial()
  registerEngineTypeMethodForParallaxBackground()
  registerEngineTypeMethodForParallaxLayer()
  registerEngineTypeMethodForParticleProcessMaterial()
  registerEngineTypeMethodForPath2D()
  registerEngineTypeMethodForPath3D()
  registerEngineTypeMethodForPathFollow2D()
  registerEngineTypeMethodForPathFollow3D()
  registerEngineTypeMethodForPhysicalBone2D()
  registerEngineTypeMethodForPhysicalBone3D()
  registerEngineTypeMethodForPhysicalSkyMaterial()
  registerEngineTypeMethodForPhysicsBody2D()
  registerEngineTypeMethodForPhysicsBody3D()
  registerEngineTypeMethodForPhysicsDirectBodyState2D()
  registerEngineTypeMethodForPhysicsDirectBodyState2DExtension()
  registerEngineTypeMethodForPhysicsDirectBodyState3D()
  registerEngineTypeMethodForPhysicsDirectBodyState3DExtension()
  registerEngineTypeMethodForPhysicsDirectSpaceState2D()
  registerEngineTypeMethodForPhysicsDirectSpaceState2DExtension()
  registerEngineTypeMethodForPhysicsDirectSpaceState3D()
  registerEngineTypeMethodForPhysicsDirectSpaceState3DExtension()
  registerEngineTypeMethodForPhysicsMaterial()
  registerEngineTypeMethodForPhysicsPointQueryParameters2D()
  registerEngineTypeMethodForPhysicsPointQueryParameters3D()
  registerEngineTypeMethodForPhysicsRayQueryParameters2D()
  registerEngineTypeMethodForPhysicsRayQueryParameters3D()
  registerEngineTypeMethodForPhysicsServer3DRenderingServerHandler()
  registerEngineTypeMethodForPhysicsShapeQueryParameters2D()
  registerEngineTypeMethodForPhysicsShapeQueryParameters3D()
  registerEngineTypeMethodForPhysicsTestMotionParameters2D()
  registerEngineTypeMethodForPhysicsTestMotionParameters3D()
  registerEngineTypeMethodForPhysicsTestMotionResult2D()
  registerEngineTypeMethodForPhysicsTestMotionResult3D()
  registerEngineTypeMethodForPinJoint2D()
  registerEngineTypeMethodForPinJoint3D()
  registerEngineTypeMethodForPlaceholderCubemap()
  registerEngineTypeMethodForPlaceholderCubemapArray()
  registerEngineTypeMethodForPlaceholderMaterial()
  registerEngineTypeMethodForPlaceholderMesh()
  registerEngineTypeMethodForPlaceholderTexture2D()
  registerEngineTypeMethodForPlaceholderTexture2DArray()
  registerEngineTypeMethodForPlaceholderTexture3D()
  registerEngineTypeMethodForPlaceholderTextureLayered()
  registerEngineTypeMethodForPlaneMesh()
  registerEngineTypeMethodForPointLight2D()
  registerEngineTypeMethodForPointMesh()
  registerEngineTypeMethodForPolygon2D()
  registerEngineTypeMethodForPolygonOccluder3D()
  registerEngineTypeMethodForPolygonPathFinder()
  registerEngineTypeMethodForPopup()
  registerEngineTypeMethodForPopupMenu()
  registerEngineTypeMethodForPopupPanel()
  registerEngineTypeMethodForPortableCompressedTexture2D()
  registerEngineTypeMethodForPrimitiveMesh()
  registerEngineTypeMethodForPrismMesh()
  registerEngineTypeMethodForProceduralSkyMaterial()
  registerEngineTypeMethodForProgressBar()
  registerEngineTypeMethodForPropertyTweener()
  registerEngineTypeMethodForQuadMesh()
  registerEngineTypeMethodForQuadOccluder3D()
  registerEngineTypeMethodForRDAttachmentFormat()
  registerEngineTypeMethodForRDFramebufferPass()
  registerEngineTypeMethodForRDPipelineColorBlendState()
  registerEngineTypeMethodForRDPipelineColorBlendStateAttachment()
  registerEngineTypeMethodForRDPipelineDepthStencilState()
  registerEngineTypeMethodForRDPipelineMultisampleState()
  registerEngineTypeMethodForRDPipelineRasterizationState()
  registerEngineTypeMethodForRDPipelineSpecializationConstant()
  registerEngineTypeMethodForRDSamplerState()
  registerEngineTypeMethodForRDShaderFile()
  registerEngineTypeMethodForRDShaderSPIRV()
  registerEngineTypeMethodForRDShaderSource()
  registerEngineTypeMethodForRDTextureFormat()
  registerEngineTypeMethodForRDTextureView()
  registerEngineTypeMethodForRDUniform()
  registerEngineTypeMethodForRDVertexAttribute()
  registerEngineTypeMethodForRandomNumberGenerator()
  registerEngineTypeMethodForRange()
  registerEngineTypeMethodForRayCast2D()
  registerEngineTypeMethodForRayCast3D()
  registerEngineTypeMethodForRectangleShape2D()
  registerEngineTypeMethodForRefCounted()
  registerEngineTypeMethodForReferenceRect()
  registerEngineTypeMethodForReflectionProbe()
  registerEngineTypeMethodForRegEx()
  registerEngineTypeMethodForRegExMatch()
  registerEngineTypeMethodForRemoteTransform2D()
  registerEngineTypeMethodForRemoteTransform3D()
  registerEngineTypeMethodForRenderingDevice()
  registerEngineTypeMethodForResource()
  registerEngineTypeMethodForResourceFormatImporterSaver()
  registerEngineTypeMethodForResourceFormatLoader()
  registerEngineTypeMethodForResourceFormatSaver()
  registerEngineTypeMethodForResourceImporter()
  registerEngineTypeMethodForResourcePreloader()
  registerEngineTypeMethodForRibbonTrailMesh()
  registerEngineTypeMethodForRichTextEffect()
  registerEngineTypeMethodForRichTextLabel()
  registerEngineTypeMethodForRigidBody2D()
  registerEngineTypeMethodForRigidBody3D()
  registerEngineTypeMethodForRootMotionView()
  registerEngineTypeMethodForSceneMultiplayer()
  registerEngineTypeMethodForSceneReplicationConfig()
  registerEngineTypeMethodForSceneState()
  registerEngineTypeMethodForSceneTree()
  registerEngineTypeMethodForSceneTreeTimer()
  registerEngineTypeMethodForScript()
  registerEngineTypeMethodForScriptCreateDialog()
  registerEngineTypeMethodForScriptEditor()
  registerEngineTypeMethodForScriptEditorBase()
  registerEngineTypeMethodForScriptExtension()
  registerEngineTypeMethodForScriptLanguage()
  registerEngineTypeMethodForScriptLanguageExtension()
  registerEngineTypeMethodForScrollBar()
  registerEngineTypeMethodForScrollContainer()
  registerEngineTypeMethodForSegmentShape2D()
  registerEngineTypeMethodForSemaphore()
  registerEngineTypeMethodForSeparationRayShape2D()
  registerEngineTypeMethodForSeparationRayShape3D()
  registerEngineTypeMethodForSeparator()
  registerEngineTypeMethodForShader()
  registerEngineTypeMethodForShaderGlobalsOverride()
  registerEngineTypeMethodForShaderInclude()
  registerEngineTypeMethodForShaderMaterial()
  registerEngineTypeMethodForShape2D()
  registerEngineTypeMethodForShape3D()
  registerEngineTypeMethodForShapeCast2D()
  registerEngineTypeMethodForShapeCast3D()
  registerEngineTypeMethodForShortcut()
  registerEngineTypeMethodForSkeleton2D()
  registerEngineTypeMethodForSkeleton3D()
  registerEngineTypeMethodForSkeletonIK3D()
  registerEngineTypeMethodForSkeletonModification2D()
  registerEngineTypeMethodForSkeletonModification2DCCDIK()
  registerEngineTypeMethodForSkeletonModification2DFABRIK()
  registerEngineTypeMethodForSkeletonModification2DJiggle()
  registerEngineTypeMethodForSkeletonModification2DLookAt()
  registerEngineTypeMethodForSkeletonModification2DPhysicalBones()
  registerEngineTypeMethodForSkeletonModification2DStackHolder()
  registerEngineTypeMethodForSkeletonModification2DTwoBoneIK()
  registerEngineTypeMethodForSkeletonModificationStack2D()
  registerEngineTypeMethodForSkeletonProfile()
  registerEngineTypeMethodForSkeletonProfileHumanoid()
  registerEngineTypeMethodForSkin()
  registerEngineTypeMethodForSkinReference()
  registerEngineTypeMethodForSky()
  registerEngineTypeMethodForSlider()
  registerEngineTypeMethodForSliderJoint3D()
  registerEngineTypeMethodForSoftBody3D()
  registerEngineTypeMethodForSphereMesh()
  registerEngineTypeMethodForSphereOccluder3D()
  registerEngineTypeMethodForSphereShape3D()
  registerEngineTypeMethodForSpinBox()
  registerEngineTypeMethodForSplitContainer()
  registerEngineTypeMethodForSpotLight3D()
  registerEngineTypeMethodForSpringArm3D()
  registerEngineTypeMethodForSprite2D()
  registerEngineTypeMethodForSprite3D()
  registerEngineTypeMethodForSpriteBase3D()
  registerEngineTypeMethodForSpriteFrames()
  registerEngineTypeMethodForStandardMaterial3D()
  registerEngineTypeMethodForStaticBody2D()
  registerEngineTypeMethodForStaticBody3D()
  registerEngineTypeMethodForStreamPeer()
  registerEngineTypeMethodForStreamPeerBuffer()
  registerEngineTypeMethodForStreamPeerExtension()
  registerEngineTypeMethodForStreamPeerGZIP()
  registerEngineTypeMethodForStreamPeerTCP()
  registerEngineTypeMethodForStreamPeerTLS()
  registerEngineTypeMethodForStyleBox()
  registerEngineTypeMethodForStyleBoxEmpty()
  registerEngineTypeMethodForStyleBoxFlat()
  registerEngineTypeMethodForStyleBoxLine()
  registerEngineTypeMethodForStyleBoxTexture()
  registerEngineTypeMethodForSubViewport()
  registerEngineTypeMethodForSubViewportContainer()
  registerEngineTypeMethodForSurfaceTool()
  registerEngineTypeMethodForSyntaxHighlighter()
  registerEngineTypeMethodForSystemFont()
  registerEngineTypeMethodForTCPServer()
  registerEngineTypeMethodForTabBar()
  registerEngineTypeMethodForTabContainer()
  registerEngineTypeMethodForTextEdit()
  registerEngineTypeMethodForTextLine()
  registerEngineTypeMethodForTextMesh()
  registerEngineTypeMethodForTextParagraph()
  registerEngineTypeMethodForTextServer()
  registerEngineTypeMethodForTextServerAdvanced()
  registerEngineTypeMethodForTextServerDummy()
  registerEngineTypeMethodForTextServerExtension()
  registerEngineTypeMethodForTexture()
  registerEngineTypeMethodForTexture2D()
  registerEngineTypeMethodForTexture2DArray()
  registerEngineTypeMethodForTexture3D()
  registerEngineTypeMethodForTextureButton()
  registerEngineTypeMethodForTextureLayered()
  registerEngineTypeMethodForTextureProgressBar()
  registerEngineTypeMethodForTextureRect()
  registerEngineTypeMethodForTheme()
  registerEngineTypeMethodForThread()
  registerEngineTypeMethodForTileData()
  registerEngineTypeMethodForTileMap()
  registerEngineTypeMethodForTileMapPattern()
  registerEngineTypeMethodForTileSet()
  registerEngineTypeMethodForTileSetAtlasSource()
  registerEngineTypeMethodForTileSetScenesCollectionSource()
  registerEngineTypeMethodForTileSetSource()
  registerEngineTypeMethodForTimer()
  registerEngineTypeMethodForTorusMesh()
  registerEngineTypeMethodForTouchScreenButton()
  registerEngineTypeMethodForTranslation()
  registerEngineTypeMethodForTree()
  registerEngineTypeMethodForTreeItem()
  registerEngineTypeMethodForTriangleMesh()
  registerEngineTypeMethodForTubeTrailMesh()
  registerEngineTypeMethodForTween()
  registerEngineTypeMethodForTweener()
  registerEngineTypeMethodForUDPServer()
  registerEngineTypeMethodForUPNP()
  registerEngineTypeMethodForUPNPDevice()
  registerEngineTypeMethodForUndoRedo()
  registerEngineTypeMethodForUniformSetCacheRD()
  registerEngineTypeMethodForVBoxContainer()
  registerEngineTypeMethodForVFlowContainer()
  registerEngineTypeMethodForVScrollBar()
  registerEngineTypeMethodForVSeparator()
  registerEngineTypeMethodForVSlider()
  registerEngineTypeMethodForVSplitContainer()
  registerEngineTypeMethodForVehicleBody3D()
  registerEngineTypeMethodForVehicleWheel3D()
  registerEngineTypeMethodForVideoStream()
  registerEngineTypeMethodForVideoStreamPlayer()
  registerEngineTypeMethodForVideoStreamTheora()
  registerEngineTypeMethodForViewport()
  registerEngineTypeMethodForViewportTexture()
  registerEngineTypeMethodForVisibleOnScreenEnabler2D()
  registerEngineTypeMethodForVisibleOnScreenEnabler3D()
  registerEngineTypeMethodForVisibleOnScreenNotifier2D()
  registerEngineTypeMethodForVisibleOnScreenNotifier3D()
  registerEngineTypeMethodForVisualInstance3D()
  registerEngineTypeMethodForVisualShader()
  registerEngineTypeMethodForVisualShaderNode()
  registerEngineTypeMethodForVisualShaderNodeBillboard()
  registerEngineTypeMethodForVisualShaderNodeBooleanConstant()
  registerEngineTypeMethodForVisualShaderNodeBooleanParameter()
  registerEngineTypeMethodForVisualShaderNodeClamp()
  registerEngineTypeMethodForVisualShaderNodeColorConstant()
  registerEngineTypeMethodForVisualShaderNodeColorFunc()
  registerEngineTypeMethodForVisualShaderNodeColorOp()
  registerEngineTypeMethodForVisualShaderNodeColorParameter()
  registerEngineTypeMethodForVisualShaderNodeComment()
  registerEngineTypeMethodForVisualShaderNodeCompare()
  registerEngineTypeMethodForVisualShaderNodeConstant()
  registerEngineTypeMethodForVisualShaderNodeCubemap()
  registerEngineTypeMethodForVisualShaderNodeCubemapParameter()
  registerEngineTypeMethodForVisualShaderNodeCurveTexture()
  registerEngineTypeMethodForVisualShaderNodeCurveXYZTexture()
  registerEngineTypeMethodForVisualShaderNodeCustom()
  registerEngineTypeMethodForVisualShaderNodeDerivativeFunc()
  registerEngineTypeMethodForVisualShaderNodeDeterminant()
  registerEngineTypeMethodForVisualShaderNodeDistanceFade()
  registerEngineTypeMethodForVisualShaderNodeDotProduct()
  registerEngineTypeMethodForVisualShaderNodeExpression()
  registerEngineTypeMethodForVisualShaderNodeFaceForward()
  registerEngineTypeMethodForVisualShaderNodeFloatConstant()
  registerEngineTypeMethodForVisualShaderNodeFloatFunc()
  registerEngineTypeMethodForVisualShaderNodeFloatOp()
  registerEngineTypeMethodForVisualShaderNodeFloatParameter()
  registerEngineTypeMethodForVisualShaderNodeFresnel()
  registerEngineTypeMethodForVisualShaderNodeGlobalExpression()
  registerEngineTypeMethodForVisualShaderNodeGroupBase()
  registerEngineTypeMethodForVisualShaderNodeIf()
  registerEngineTypeMethodForVisualShaderNodeInput()
  registerEngineTypeMethodForVisualShaderNodeIntConstant()
  registerEngineTypeMethodForVisualShaderNodeIntFunc()
  registerEngineTypeMethodForVisualShaderNodeIntOp()
  registerEngineTypeMethodForVisualShaderNodeIntParameter()
  registerEngineTypeMethodForVisualShaderNodeIs()
  registerEngineTypeMethodForVisualShaderNodeLinearSceneDepth()
  registerEngineTypeMethodForVisualShaderNodeMix()
  registerEngineTypeMethodForVisualShaderNodeMultiplyAdd()
  registerEngineTypeMethodForVisualShaderNodeOuterProduct()
  registerEngineTypeMethodForVisualShaderNodeOutput()
  registerEngineTypeMethodForVisualShaderNodeParameter()
  registerEngineTypeMethodForVisualShaderNodeParameterRef()
  registerEngineTypeMethodForVisualShaderNodeParticleAccelerator()
  registerEngineTypeMethodForVisualShaderNodeParticleBoxEmitter()
  registerEngineTypeMethodForVisualShaderNodeParticleConeVelocity()
  registerEngineTypeMethodForVisualShaderNodeParticleEmit()
  registerEngineTypeMethodForVisualShaderNodeParticleEmitter()
  registerEngineTypeMethodForVisualShaderNodeParticleMeshEmitter()
  registerEngineTypeMethodForVisualShaderNodeParticleMultiplyByAxisAngle()
  registerEngineTypeMethodForVisualShaderNodeParticleOutput()
  registerEngineTypeMethodForVisualShaderNodeParticleRandomness()
  registerEngineTypeMethodForVisualShaderNodeParticleRingEmitter()
  registerEngineTypeMethodForVisualShaderNodeParticleSphereEmitter()
  registerEngineTypeMethodForVisualShaderNodeProximityFade()
  registerEngineTypeMethodForVisualShaderNodeRandomRange()
  registerEngineTypeMethodForVisualShaderNodeRemap()
  registerEngineTypeMethodForVisualShaderNodeResizableBase()
  registerEngineTypeMethodForVisualShaderNodeSDFRaymarch()
  registerEngineTypeMethodForVisualShaderNodeSDFToScreenUV()
  registerEngineTypeMethodForVisualShaderNodeSample3D()
  registerEngineTypeMethodForVisualShaderNodeScreenUVToSDF()
  registerEngineTypeMethodForVisualShaderNodeSmoothStep()
  registerEngineTypeMethodForVisualShaderNodeStep()
  registerEngineTypeMethodForVisualShaderNodeSwitch()
  registerEngineTypeMethodForVisualShaderNodeTexture()
  registerEngineTypeMethodForVisualShaderNodeTexture2DArray()
  registerEngineTypeMethodForVisualShaderNodeTexture2DArrayParameter()
  registerEngineTypeMethodForVisualShaderNodeTexture2DParameter()
  registerEngineTypeMethodForVisualShaderNodeTexture3D()
  registerEngineTypeMethodForVisualShaderNodeTexture3DParameter()
  registerEngineTypeMethodForVisualShaderNodeTextureParameter()
  registerEngineTypeMethodForVisualShaderNodeTextureParameterTriplanar()
  registerEngineTypeMethodForVisualShaderNodeTextureSDF()
  registerEngineTypeMethodForVisualShaderNodeTextureSDFNormal()
  registerEngineTypeMethodForVisualShaderNodeTransformCompose()
  registerEngineTypeMethodForVisualShaderNodeTransformConstant()
  registerEngineTypeMethodForVisualShaderNodeTransformDecompose()
  registerEngineTypeMethodForVisualShaderNodeTransformFunc()
  registerEngineTypeMethodForVisualShaderNodeTransformOp()
  registerEngineTypeMethodForVisualShaderNodeTransformParameter()
  registerEngineTypeMethodForVisualShaderNodeTransformVecMult()
  registerEngineTypeMethodForVisualShaderNodeUIntConstant()
  registerEngineTypeMethodForVisualShaderNodeUIntFunc()
  registerEngineTypeMethodForVisualShaderNodeUIntOp()
  registerEngineTypeMethodForVisualShaderNodeUIntParameter()
  registerEngineTypeMethodForVisualShaderNodeUVFunc()
  registerEngineTypeMethodForVisualShaderNodeUVPolarCoord()
  registerEngineTypeMethodForVisualShaderNodeVarying()
  registerEngineTypeMethodForVisualShaderNodeVaryingGetter()
  registerEngineTypeMethodForVisualShaderNodeVaryingSetter()
  registerEngineTypeMethodForVisualShaderNodeVec2Constant()
  registerEngineTypeMethodForVisualShaderNodeVec2Parameter()
  registerEngineTypeMethodForVisualShaderNodeVec3Constant()
  registerEngineTypeMethodForVisualShaderNodeVec3Parameter()
  registerEngineTypeMethodForVisualShaderNodeVec4Constant()
  registerEngineTypeMethodForVisualShaderNodeVec4Parameter()
  registerEngineTypeMethodForVisualShaderNodeVectorBase()
  registerEngineTypeMethodForVisualShaderNodeVectorCompose()
  registerEngineTypeMethodForVisualShaderNodeVectorDecompose()
  registerEngineTypeMethodForVisualShaderNodeVectorDistance()
  registerEngineTypeMethodForVisualShaderNodeVectorFunc()
  registerEngineTypeMethodForVisualShaderNodeVectorLen()
  registerEngineTypeMethodForVisualShaderNodeVectorOp()
  registerEngineTypeMethodForVisualShaderNodeVectorRefract()
  registerEngineTypeMethodForVoxelGI()
  registerEngineTypeMethodForVoxelGIData()
  registerEngineTypeMethodForWeakRef()
  registerEngineTypeMethodForWebRTCDataChannel()
  registerEngineTypeMethodForWebRTCDataChannelExtension()
  registerEngineTypeMethodForWebRTCMultiplayerPeer()
  registerEngineTypeMethodForWebRTCPeerConnection()
  registerEngineTypeMethodForWebRTCPeerConnectionExtension()
  registerEngineTypeMethodForWebSocketMultiplayerPeer()
  registerEngineTypeMethodForWebSocketPeer()
  registerEngineTypeMethodForWebXRInterface()
  registerEngineTypeMethodForWindow()
  registerEngineTypeMethodForWorld2D()
  registerEngineTypeMethodForWorld3D()
  registerEngineTypeMethodForWorldBoundaryShape2D()
  registerEngineTypeMethodForWorldBoundaryShape3D()
  registerEngineTypeMethodForWorldEnvironment()
  registerEngineTypeMethodForX509Certificate()
  registerEngineTypeMethodForXMLParser()
  registerEngineTypeMethodForXRAnchor3D()
  registerEngineTypeMethodForXRCamera3D()
  registerEngineTypeMethodForXRController3D()
  registerEngineTypeMethodForXRInterface()
  registerEngineTypeMethodForXRInterfaceExtension()
  registerEngineTypeMethodForXRNode3D()
  registerEngineTypeMethodForXROrigin3D()
  registerEngineTypeMethodForXRPose()
  registerEngineTypeMethodForXRPositionalTracker()
  registerEngineTypeMethodForZIPPacker()
  registerEngineTypeMethodForZIPReader()
}
