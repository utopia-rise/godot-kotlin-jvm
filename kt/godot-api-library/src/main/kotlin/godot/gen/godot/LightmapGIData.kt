// THIS FILE IS GENERATED! DO NOT EDIT IT MANUALLY!
@file:Suppress("PackageDirectoryMismatch", "unused", "FunctionName", "RedundantModalityModifier",
    "UNCHECKED_CAST", "JoinDeclarationAndAssignment", "USELESS_CAST",
    "RemoveRedundantQualifierName", "NOTHING_TO_INLINE", "NON_FINAL_MEMBER_IN_OBJECT",
    "RedundantVisibilityModifier", "RedundantUnitReturnType", "MemberVisibilityCanBePrivate")

package godot

import godot.`annotation`.GodotBaseType
import godot.core.NodePath
import godot.core.Rect2
import godot.core.VariantArray
import godot.core.VariantParser.ARRAY
import godot.core.VariantParser.BOOL
import godot.core.VariantParser.LONG
import godot.core.VariantParser.NIL
import godot.core.VariantParser.NODE_PATH
import godot.core.VariantParser.OBJECT
import godot.core.VariantParser.RECT2
import godot.util.Internals
import godot.util.VoidPtr
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.Suppress
import kotlin.Unit
import kotlin.jvm.JvmName

private const val ENGINE_CLASS_LIGHTMAPGIDATA_INDEX: Int = 352

/**
 * [LightmapGIData] contains baked lightmap and dynamic object probe data for [LightmapGI]. It is
 * replaced every time lightmaps are baked in [LightmapGI].
 */
@GodotBaseType
public open class LightmapGIData : Resource() {
  /**
   * The lightmap atlas textures generated by the lightmapper.
   */
  public final inline var lightmapTextures: VariantArray<TextureLayered>
    @JvmName("lightmapTexturesProperty")
    get() = getLightmapTextures()
    @JvmName("lightmapTexturesProperty")
    set(`value`) {
      setLightmapTextures(value)
    }

  public final inline var usesSphericalHarmonics: Boolean
    @JvmName("usesSphericalHarmonicsProperty")
    get() = isUsingSphericalHarmonics()
    @JvmName("usesSphericalHarmonicsProperty")
    set(`value`) {
      setUsesSphericalHarmonics(value)
    }

  /**
   * The lightmap atlas texture generated by the lightmapper.
   */
  public final inline var lightTexture: TextureLayered?
    @JvmName("lightTextureProperty")
    get() = getLightTexture()
    @JvmName("lightTextureProperty")
    set(`value`) {
      setLightTexture(value)
    }

  public override fun new(scriptIndex: Int): Unit {
    Internals.callConstructor(this, ENGINE_CLASS_LIGHTMAPGIDATA_INDEX, scriptIndex)
  }

  public final fun setLightmapTextures(lightTextures: VariantArray<TextureLayered>): Unit {
    Internals.writeArguments(ARRAY to lightTextures)
    Internals.callMethod(rawPtr, MethodBindings.setLightmapTexturesPtr, NIL)
  }

  public final fun getLightmapTextures(): VariantArray<TextureLayered> {
    Internals.writeArguments()
    Internals.callMethod(rawPtr, MethodBindings.getLightmapTexturesPtr, ARRAY)
    return (Internals.readReturnValue(ARRAY) as VariantArray<TextureLayered>)
  }

  /**
   * If [usesSphericalHarmonics] is `true`, tells the engine to treat the lightmap data as if it was
   * baked with directional information.
   * **Note:** Changing this value on already baked lightmaps will not cause them to be baked again.
   * This means the material appearance will look incorrect until lightmaps are baked again, in which
   * case the value set here is discarded as the entire [LightmapGIData] resource is replaced by the
   * lightmapper.
   */
  public final fun setUsesSphericalHarmonics(usesSphericalHarmonics: Boolean): Unit {
    Internals.writeArguments(BOOL to usesSphericalHarmonics)
    Internals.callMethod(rawPtr, MethodBindings.setUsesSphericalHarmonicsPtr, NIL)
  }

  /**
   * If `true`, lightmaps were baked with directional information. See also
   * [LightmapGI.directional].
   */
  public final fun isUsingSphericalHarmonics(): Boolean {
    Internals.writeArguments()
    Internals.callMethod(rawPtr, MethodBindings.isUsingSphericalHarmonicsPtr, BOOL)
    return (Internals.readReturnValue(BOOL) as Boolean)
  }

  /**
   * Adds an object that is considered baked within this [LightmapGIData].
   */
  public final fun addUser(
    path: NodePath,
    uvScale: Rect2,
    sliceIndex: Int,
    subInstance: Int,
  ): Unit {
    Internals.writeArguments(NODE_PATH to path, RECT2 to uvScale, LONG to sliceIndex.toLong(), LONG to subInstance.toLong())
    Internals.callMethod(rawPtr, MethodBindings.addUserPtr, NIL)
  }

  /**
   * Returns the number of objects that are considered baked within this [LightmapGIData].
   */
  public final fun getUserCount(): Int {
    Internals.writeArguments()
    Internals.callMethod(rawPtr, MethodBindings.getUserCountPtr, LONG)
    return (Internals.readReturnValue(LONG) as Long).toInt()
  }

  /**
   * Returns the [NodePath] of the baked object at index [userIdx].
   */
  public final fun getUserPath(userIdx: Int): NodePath {
    Internals.writeArguments(LONG to userIdx.toLong())
    Internals.callMethod(rawPtr, MethodBindings.getUserPathPtr, NODE_PATH)
    return (Internals.readReturnValue(NODE_PATH) as NodePath)
  }

  /**
   * Clear all objects that are considered baked within this [LightmapGIData].
   */
  public final fun clearUsers(): Unit {
    Internals.writeArguments()
    Internals.callMethod(rawPtr, MethodBindings.clearUsersPtr, NIL)
  }

  public final fun setLightTexture(lightTexture: TextureLayered?): Unit {
    Internals.writeArguments(OBJECT to lightTexture)
    Internals.callMethod(rawPtr, MethodBindings.setLightTexturePtr, NIL)
  }

  public final fun getLightTexture(): TextureLayered? {
    Internals.writeArguments()
    Internals.callMethod(rawPtr, MethodBindings.getLightTexturePtr, OBJECT)
    return (Internals.readReturnValue(OBJECT) as TextureLayered?)
  }

  public companion object

  public object MethodBindings {
    internal val setLightmapTexturesPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "set_lightmap_textures", 381264803)

    internal val getLightmapTexturesPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "get_lightmap_textures", 3995934104)

    internal val setUsesSphericalHarmonicsPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "set_uses_spherical_harmonics", 2586408642)

    internal val isUsingSphericalHarmonicsPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "is_using_spherical_harmonics", 36873697)

    internal val addUserPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "add_user", 4272570515)

    internal val getUserCountPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "get_user_count", 3905245786)

    internal val getUserPathPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "get_user_path", 408788394)

    internal val clearUsersPtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "clear_users", 3218959716)

    internal val setLightTexturePtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "set_light_texture", 1278366092)

    internal val getLightTexturePtr: VoidPtr =
        Internals.getMethodBindPtr("LightmapGIData", "get_light_texture", 3984243839)
  }
}
