name=Godot Jvm Plugin
module.name=Godot Kotlin JVM
module.presentableName=Godot Kotlin JVM
module.description=Create a pre setup, minimal Godot Kotlin JVM project
module.builderName=Godot Kotlin JVM | IDEA
module.groupName=Godot Kotlin JVM
wizard.projectSettings.general.title=Godot Kotlin JVM
wizard.projectSettings.general.groupId=Group ID:
wizard.projectSettings.general.artifactId=Artifact ID:
wizard.projectSettings.general.version=Version:
wizard.projectSettings.buildSettings.title=Build Settings
wizard.projectSettings.buildSettings.android.title=Android
wizard.projectSettings.buildSettings.android.isAndroidEnabled=Android enabled:
wizard.projectSettings.buildSettings.android.d8ToolPath=D8 tool path:
wizard.projectSettings.buildSettings.android.d8ToolPath.browseDialogTitle=d8 executable
wizard.projectSettings.buildSettings.android.d8ToolPath.comment=d8 absolute path (usually <android_sdk_root>/build-tools/<version>/d8)
wizard.projectSettings.buildSettings.android.androidCompileSdkDir=AndroidCompileSdkDir
wizard.projectSettings.buildSettings.android.androidCompileSdkDir.browseDialogTitle=AndroidCompileSdk Directory
wizard.projectSettings.buildSettings.android.androidCompileSdkDir.comment=Absolute path to android compile sdk dir (usually <android_sdk_root>/platforms/<target_sdk_version>)
wizard.projectSettings.buildSettings.graalvm.title=Graal Native Image
wizard.projectSettings.buildSettings.graalvm.message=GraalVM Native Image is an advanced export option! Make sure you read the documentation before enabling it:
wizard.projectSettings.buildSettings.graalvm.linkText=GraalVM Native Image Documentation
wizard.projectSettings.buildSettings.graalvm.link=https://godot-kotl.in/en/stable/user-guide/advanced/graal-vm-native-image/
wizard.projectSettings.buildSettings.graalvm.isGraalVmEnabled=GraalVM Native Image enabled:
wizard.projectSettings.buildSettings.graalvm.graalVmDirectory=GraalVM directory:
wizard.projectSettings.buildSettings.graalvm.graalVmDirectory.browseDialogTitle=GraalVM directory
wizard.projectSettings.buildSettings.graalvm.graalVmDirectory.comment=Absolute path to GraalVM dir (usually <dir_containing_jdk's>/<graal_vm_jdk_version>)
wizard.projectSettings.buildSettings.graalvm.windowsDeveloperVCVarsPath=WindowsDeveloper VC vars path:
wizard.projectSettings.buildSettings.graalvm.windowsDeveloperVCVarsPath.browseDialogTitle=WindowsDeveloper VC vars path
wizard.projectSettings.buildSettings.graalvm.windowsDeveloperVCVarsPath.comment=Absolute path to WindowsDeveloper VC vars path
wizard.projectSettings.buildSettings.graalvm.isIOSEnabled=IOS enabled:
problem.class.notRegistered.butHasToolAnnotation=This class is marked as tool class but not registered with @RegisterClass
problem.class.notRegistered.properties=This class contains registered properties but is not registered
problem.class.notRegistered.functions=This class contains registered functions but is not registered
problem.class.notRegistered.signals=This class contains registered signals but is not registered
problem.class.inheritance.notInheritingGodotObject=Registered class not inheriting godot type
problem.class.constructor.defaultConstructorMissing=There is no default constructor defined. Godot needs a default constructor (no args)
problem.class.constructor.toManyParams=Godot cannot handle constructors for registered classes with more than {0} parameters. Reduce your parameter count
problem.class.constructor.overloading=Constructor overloading for registered constructors is not yet supported. Multiple registered constructors in the same class need a different argument count
problem.class.nameAlreadyRegistered=Class name already registered
problem.function.notificationFunctionNotRegistered=Overridden virtual function which is not registered will not be called by Godot.\n\
Using virtual functions for other purposes than to be called from Godot is considered a bad practise.\n\
Either register it or move your logic to a custom function you defined
problem.function.overriddenAbstractFunctionNotRegistered=Overrides registered abstract function without registering itself. Without explicit @RegisterFunction annotation on overridden functions, they cannot be called from godot.
problem.function.rpcChannelSetWhenTransferTypeIgnoresIt=Other values than 0 will be ignored if \"transferMode\" is not set to UNRELIABLE_ORDERED
problem.function.toManyParams=Registered functions cannot have more than {0} parameters. Reduce your parameter count or wrap parameters in a wrapper class.
problem.property.hint.wrongType=Property must be of type {0}
problem.property.hint.notRegistered=Property has a type hint but is not registered
problem.property.hint.notExported=Property has a type hint but is not exported. This type hint will do nothing
problem.property.export.notRegistered=Property is exported but not registered
problem.property.export.triedToExportUnsupportedType=Only types inheriting godot.Object, CoreType's, Godot collections, Kotlin collections, Java collections and primitives can be exported
problem.property.hint.toManyEnumEntries=Enums used as EnumFlags can only have a maximum of 32 entries
problem.property.mutability=Registered properties have to be mutable
problem.property.registeredKotlinCollection=Kotlin collections can only be registered if they contain enums. For other types, consider using one of the godot collections. There are handy conversion functions available
problem.property.registeredEnumListWithVariantArray=Enum lists can only be registered with kotlin collections
problem.signal.mutability=Registered signals have to be immutable
problem.signal.wrongType=Not of type signal. Properties annotated with @RegisterSignal have to be of type signal. Consider using one of the "by signal" delegates
problem.signal.connection.connectedFunctionNotRegistered=Function not registered. Functions used as target for signal emission have to be registered
problem.rpc.calledFunctionNotRegistered=Function not registered. Functions called by rpc have to be registered
problem.rpc.calledFunctionHasNoRpcAnnotation=Function has no Rpc Annotation. Functions called by rpc have to be configured
problem.rpc.calledFunctionNotAccessible=Function not accessible. Functions called by rpc cannot have RPCMode.DISABLED
problem.general.cannotRegisterGenerics=Generic elements cannot be registered
problem.general.calledFunctionNotRegistered=Target function not registered
problem.general.modificationOfCoreTypeCopy=You're modifying a copy of a CoreType. Reassign it directly or use a core type modification helper.\
For more information, visit the documentation.\
This warning is experimental! If you encounter any false positives, please write an issue with a minimal reproduction project.
quickFix.class.alreadyRegistered.familyName=Show classes registered with same name
quickFix.class.alreadyRegistered.popup.title=Jump to class
quickFix.class.notRegistered.familyName=Add @RegisterClass annotation
quickFix.property.notRegistered.familyName=Add @RegisterProperty annotation
quickFix.property.notExported.familyName=Add @Export annotation
quickFix.property.removeExportAnnotation.familyName=Remove @Export annotation
quickFix.function.notificationFunctionNotRegistered.familyName=Add @RegisterFunction annotation
quickFix.function.rpcTransferModeIgnoresChannel.familyName=Remove channel parameter
quickFix.function.connectedFunctionNotRegistered.familyName=Add @RegisterFunction annotation
quickFix.function.connectedFunctionHasNoRpcAnnotationRegistered.familyName=Add @Rpc annotation
quickFix.function.connectedFunctionsRpcAnnotationHasRpcModeDisabled.familyName=Remove RpcMode.DISABLED from target's @Rpc annotation
quickFix.property.connectedPropertyNotRegistered.familyName=Add @RegisterProperty annotation
quickFix.property.mutability.familyName=Make property mutable
notification.property.mutability.error.title=@RegisterProperty Quick Fix
notification.property.mutability.error.content=Could not change the mutability of property {0}. Change it manually
notification.group.error=Error message
quickFix.signal.initializer.familyName=Use "by signal" delegate
quickFix.signal.mutability.familyName=Make signal immutable
notification.signal.mutability.error.title=@RegisterSignal Quick Fix
notification.signal.mutability.error.content=Could not change the mutability of signal {0}. Change it manually
codeVision.name=[GodotKotlinJVM] Registered name inlay hint
codeVision.settings.enableCheckbox=[GodotKotlinJVM] Display registered name above element
linemarker.registeredName.tooltip=Registered as {0}\nClick to copy registered name
linemarker.registeredName.notRegisteredBecauseIsAbstract.text=Will not be registered, as it's abstract. Members are registered through inheriting classes
settingsIndex.action.title=Importing {0} GodotKotlinJvm
settingsIndex.error.connectionFailed=Connecting with the GodotKotlinJvm plugin failed: Code checks may be incorrect.
settingsIndex.error.compatibility.semVerFailure=Plugin 'GodotKotlinJvm' is incompatible with the current version of the GodotKotlinJvm Gradle plugin. Upgrade the version of the gradle plugin com.utopia-rise.godot-kotlin-jvm
settingsIndex.error.compatibility.idePluginOutOfDate=Plugin 'GodotKotlinJvm' is no longer compatible with the current version of the GodotKotlinJvm Gradle plugin. Use version {0} or later.
settingsIndex.error.compatibility.gradlePluginOutOfDate=Gradle plugin 'com.utopia-rise.godot-kotlin-jvm' is incompatible with the current GodotKotlinJvm IntelliJ Plugin version. Use version {0} or later.
settingsIndex.unconfigured.reason.gradleSyncInProgress=GodotKotlinJvm is waiting for Gradle to finish syncing.
settingsIndex.unconfigured.reason.syncInProgress=GodotKotlinJvm is setting up...
settingsIndex.error.showErrorAction=Show error
settingsIndex.error.connectionError=Error connecting to GodotKotlinJvm.
settingsIndex.error.copyAction=Copy
settingsIndex.error.copyMessage=Stacktrace copied to clipboard!
