name=Godot Jvm Plugin
module.name=Godot Kotlin JVM
module.presentableName=Godot Kotlin JVM
module.description=Create a pre setup, minimal Godot Kotlin JVM project
module.builderName=Godot Kotlin JVM | IDEA
module.groupName=Godot Kotlin JVM
wizard.projectSettings.general.title=Godot Kotlin JVM
wizard.projectSettings.general.groupId=Group ID:
wizard.projectSettings.general.artifactId=Artifact ID:
wizard.projectSettings.general.version=Version:
wizard.projectSettings.dependencySettings.title=Dependency Settings
wizard.projectSettings.dependencySettings.kotlinVersion=Kotlin Version:
wizard.projectSettings.dependencySettings.godotKotlinJvmVersion=Godot Kotlin JVM Version:
wizard.projectSettings.buildSettings.title=Build Settings
wizard.projectSettings.buildSettings.androidEnabled=Android enabled:
wizard.projectSettings.buildSettings.d8ToolPath=D8 tool path:
wizard.projectSettings.buildSettings.d8ToolPath.browseDialogTitle=d8 executable
wizard.projectSettings.buildSettings.d8ToolPath.comment=d8 absolute path (usually <android_sdk_root>/build-tools/<version>/d8)
wizard.projectSettings.buildSettings.androidCompileSdkDir=AndroidCompileSdkDir
wizard.projectSettings.buildSettings.androidCompileSdkDir.browseDialogTitle=AndroidCompileSdk Directory
wizard.projectSettings.buildSettings.androidCompileSdkDir.comment=Absolute path to android compile sdk dir (usually <android_sdk_root>/platforms/<target_sdk_version>)
problem.class.notRegistered.butHasToolAnnotation=This class is marked as tool class but not registered with @RegisterClass
problem.class.notRegistered.properties=This class contains registered properties but is not registered
problem.class.notRegistered.functions=This class contains registered functions but is not registered
problem.class.notRegistered.signals=This class contains registered signals but is not registered
problem.class.inheritance.notInheritingGodotObject=Registered class not inheriting godot type
problem.class.constructor.defaultConstructorMissing=There is no default constructor defined. Godot needs a default constructor (no args)
problem.class.constructor.toManyParams=Godot cannot handle constructors for registered classes with more than 5 parameters. Reduce your parameter count
problem.class.constructor.overloading=Constructor overloading for registered constructors is not yet supported. Multiple registered constructors in the same class need a different argument count
problem.class.nameAlreadyRegistered=Class name already registered
problem.class.moreThanOneRegisteredClass=More than one registered class in the containing file
problem.class.wrongFileName=File name has to match class name
problem.class.wrongPackagePath=Package path has to match actual directory path
problem.function.notificationFunctionNotRegistered=Overridden notification function which is not registered will not be called by Godot.\n\
Using notification functions for other purposes than to be called from Godot is considered a bad practise.\n\
Either register it or move your logic to a custom function you defined
problem.function.overriddenFunctionNotRegistered=Overrides registered function without registering itself. Without explicit @RegisterFunction annotation on overridden functions, they cannot be called from godot.
problem.property.hint.wrongType=Property must be of type {0}
problem.property.hint.notRegistered=Property has a type hint but is not registered
problem.property.hint.notExported=Property has a type hint but is not exported. This type hint will do nothing
problem.property.export.notRegistered=Property is exported but not registered
problem.property.export.triedToExportObject=Only types inheriting godot.Reference, CoreType's and primitives can be exported
problem.property.hint.toManyEnumEntries=Enums used as EnumFlags can only have a maximum of 32 entries
problem.property.mutability=Registered properties have to be mutable
problem.property.registeredKotlinCollection=Kotlin collections can only be registered if they contain enums. For other types, consider using one of the godot collections. There are handy conversion functions available
problem.property.registeredEnumListWithVariantArray=Enum lists can only be registered with kotlin collections
problem.property.defaultValue.notConstant=Default values of exported properties have to be compile time constants or direct constructor calls
problem.property.overriddenPropertyNotRegistered=Overrides registered property without registering itself. Without explicit @RegisterProperty annotation on overridden properties, they cannot be used from godot.
problem.signal.mutability=Registered signals have to be mutable
problem.signal.wrongType=Not of type signal. Properties annotated with @RegisterSignal have to be of type signal. Consider using one of the "by signal" delegates
problem.signal.connection.connectedFunctionNotRegistered=Function not registered. Functions used as target for signal emission have to be registered
problem.rpc.calledFunctionNotRegistered=Function not registered. Functions called by rpc have to be registered
problem.rpc.calledPropertyNotRegistered=Property not registered. Properties set with rset have to be registered
problem.rpc.calledFunctionNotAccessible=Function not accessible. Functions called by rpc cannot have RPCMode.DISABLED
problem.rpc.calledPropertyNotAccessible=Property not accessible. Properties set with rset cannot have RPCMode.DISABLED
problem.general.cannotRegisterGenerics=Generic elements cannot be registered
problem.general.calledFunctionNotRegistered=Target function not registered
problem.general.modificationOfCoreTypeCopy=You're modifying a copy of a CoreType. Either re assign this copy to it's parent or use it elsewhere after the modification.\
For more information's, visit the documentation.\
This warning is experimental! If you encounter any false positives, please write an issue with a minimal reproduction project.
quickFix.class.alreadyRegistered.familyName=Show classes registered with same name
quickFix.class.alreadyRegistered.popup.title=Jump to class
quickFix.class.notRegistered.familyName=Add @RegisterClass annotation
quickFix.property.notRegistered.familyName=Add @RegisterProperty annotation
quickFix.property.notExported.familyName=Add @Export annotation
quickFix.property.removeExportAnnotation.familyName=Remove @Export annotation
quickFix.function.notificationFunctionNotRegistered.familyName=Add @RegisterFunction annotation
quickFix.function.connectedFunctionNotRegistered.familyName=Add @RegisterFunction annotation
quickFix.property.connectedPropertyNotRegistered.familyName=Add @RegisterProperty annotation
quickFix.property.mutability.familyName=Make property mutable
notification.property.mutability.error.title=@RegisterProperty Quick Fix
notification.property.mutability.error.content=Could not change the mutability of property {0}. Change it manually
notification.group.error=Error message
quickFix.signal.initializer.familyName=Use "by signal" delegate
quickFix.signal.mutability.familyName=Make signal not mutable
notification.signal.mutability.error.title=@RegisterSignal Quick Fix
notification.signal.mutability.error.content=Could not change the mutability of signal {0}. Change it manually
codeVision.name=[GodotKotlinJVM] Registered name inlay hint
codeVision.settings.enableCheckbox=[GodotKotlinJVM] Display registered name above element
codeVision.registeredName.tooltip=Click to copy registered name
codeVision.registeredName.text=Registered as {0}
codeVision.registeredName.notRegisteredBecauseIsAbstract.text=Will not be registered, as it's abstract. Members are registered through inheriting classes
